/*
Bulat API

API specification for the Bulat system.  **IMPORTANT**: This API always returns HTTP 200 status code, even for errors. Error responses are indicated by the response content, not HTTP status codes.  Error codes: - noacc/noaccess: No access to the requested resource - dberror: Error while executing database queries   - noname/noid/no_acc_c: Incorrect data in the request 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// LoginResponseInner - struct for LoginResponseInner
type LoginResponseInner struct {
	Int32 *int32
	MapmapOfStringstring *map[string]string
	String *string
}

// int32AsLoginResponseInner is a convenience function that returns int32 wrapped in LoginResponseInner
func Int32AsLoginResponseInner(v *int32) LoginResponseInner {
	return LoginResponseInner{
		Int32: v,
	}
}

// map[string]stringAsLoginResponseInner is a convenience function that returns map[string]string wrapped in LoginResponseInner
func MapmapOfStringstringAsLoginResponseInner(v *map[string]string) LoginResponseInner {
	return LoginResponseInner{
		MapmapOfStringstring: v,
	}
}

// stringAsLoginResponseInner is a convenience function that returns string wrapped in LoginResponseInner
func StringAsLoginResponseInner(v *string) LoginResponseInner {
	return LoginResponseInner{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *LoginResponseInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Int32
	err = newStrictDecoder(data).Decode(&dst.Int32)
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			if err = validator.Validate(dst.Int32); err != nil {
				dst.Int32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Int32 = nil
	}

	// try to unmarshal data into MapmapOfStringstring
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringstring)
	if err == nil {
		jsonMapmapOfStringstring, _ := json.Marshal(dst.MapmapOfStringstring)
		if string(jsonMapmapOfStringstring) == "{}" { // empty struct
			dst.MapmapOfStringstring = nil
		} else {
			if err = validator.Validate(dst.MapmapOfStringstring); err != nil {
				dst.MapmapOfStringstring = nil
			} else {
				match++
			}
		}
	} else {
		dst.MapmapOfStringstring = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Int32 = nil
		dst.MapmapOfStringstring = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(LoginResponseInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(LoginResponseInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src LoginResponseInner) MarshalJSON() ([]byte, error) {
	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	if src.MapmapOfStringstring != nil {
		return json.Marshal(&src.MapmapOfStringstring)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *LoginResponseInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Int32 != nil {
		return obj.Int32
	}

	if obj.MapmapOfStringstring != nil {
		return obj.MapmapOfStringstring
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj LoginResponseInner) GetActualInstanceValue() (interface{}) {
	if obj.Int32 != nil {
		return *obj.Int32
	}

	if obj.MapmapOfStringstring != nil {
		return *obj.MapmapOfStringstring
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableLoginResponseInner struct {
	value *LoginResponseInner
	isSet bool
}

func (v NullableLoginResponseInner) Get() *LoginResponseInner {
	return v.value
}

func (v *NullableLoginResponseInner) Set(val *LoginResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginResponseInner(val *LoginResponseInner) *NullableLoginResponseInner {
	return &NullableLoginResponseInner{value: val, isSet: true}
}

func (v NullableLoginResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


