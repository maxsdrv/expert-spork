/*
Bulat API

API specification for the Bulat system.  **IMPORTANT**: This API always returns HTTP 200 status code, even for errors. Error responses are indicated by the response content, not HTTP status codes.  Error codes: - noacc/noaccess: No access to the requested resource - dberror: Error while executing database queries   - noname/noid/no_acc_c: Incorrect data in the request 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// LoginWithToken200Response - struct for LoginWithToken200Response
type LoginWithToken200Response struct {
	ErrorResponse *ErrorResponse
	ArrayOfLoginResponseInner *[]LoginResponseInner
}

// ErrorResponseAsLoginWithToken200Response is a convenience function that returns ErrorResponse wrapped in LoginWithToken200Response
func ErrorResponseAsLoginWithToken200Response(v *ErrorResponse) LoginWithToken200Response {
	return LoginWithToken200Response{
		ErrorResponse: v,
	}
}

// []LoginResponseInnerAsLoginWithToken200Response is a convenience function that returns []LoginResponseInner wrapped in LoginWithToken200Response
func ArrayOfLoginResponseInnerAsLoginWithToken200Response(v *[]LoginResponseInner) LoginWithToken200Response {
	return LoginWithToken200Response{
		ArrayOfLoginResponseInner: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *LoginWithToken200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ErrorResponse
	err = newStrictDecoder(data).Decode(&dst.ErrorResponse)
	if err == nil {
		jsonErrorResponse, _ := json.Marshal(dst.ErrorResponse)
		if string(jsonErrorResponse) == "{}" { // empty struct
			dst.ErrorResponse = nil
		} else {
			if err = validator.Validate(dst.ErrorResponse); err != nil {
				dst.ErrorResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.ErrorResponse = nil
	}

	// try to unmarshal data into ArrayOfLoginResponseInner
	err = newStrictDecoder(data).Decode(&dst.ArrayOfLoginResponseInner)
	if err == nil {
		jsonArrayOfLoginResponseInner, _ := json.Marshal(dst.ArrayOfLoginResponseInner)
		if string(jsonArrayOfLoginResponseInner) == "{}" { // empty struct
			dst.ArrayOfLoginResponseInner = nil
		} else {
			if err = validator.Validate(dst.ArrayOfLoginResponseInner); err != nil {
				dst.ArrayOfLoginResponseInner = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfLoginResponseInner = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ErrorResponse = nil
		dst.ArrayOfLoginResponseInner = nil

		return fmt.Errorf("data matches more than one schema in oneOf(LoginWithToken200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(LoginWithToken200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src LoginWithToken200Response) MarshalJSON() ([]byte, error) {
	if src.ErrorResponse != nil {
		return json.Marshal(&src.ErrorResponse)
	}

	if src.ArrayOfLoginResponseInner != nil {
		return json.Marshal(&src.ArrayOfLoginResponseInner)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *LoginWithToken200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ErrorResponse != nil {
		return obj.ErrorResponse
	}

	if obj.ArrayOfLoginResponseInner != nil {
		return obj.ArrayOfLoginResponseInner
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj LoginWithToken200Response) GetActualInstanceValue() (interface{}) {
	if obj.ErrorResponse != nil {
		return *obj.ErrorResponse
	}

	if obj.ArrayOfLoginResponseInner != nil {
		return *obj.ArrayOfLoginResponseInner
	}

	// all schemas are nil
	return nil
}

type NullableLoginWithToken200Response struct {
	value *LoginWithToken200Response
	isSet bool
}

func (v NullableLoginWithToken200Response) Get() *LoginWithToken200Response {
	return v.value
}

func (v *NullableLoginWithToken200Response) Set(val *LoginWithToken200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginWithToken200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginWithToken200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginWithToken200Response(val *LoginWithToken200Response) *NullableLoginWithToken200Response {
	return &NullableLoginWithToken200Response{value: val, isSet: true}
}

func (v NullableLoginWithToken200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginWithToken200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


