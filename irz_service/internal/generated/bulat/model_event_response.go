/*
Bulat API

API specification for the Bulat system.  **IMPORTANT**: This API always returns HTTP 200 status code, even for errors. Error responses are indicated by the response content, not HTTP status codes.  Error codes: - noacc/noaccess: No access to the requested resource - dberror: Error while executing database queries   - noname/noid/no_acc_c: Incorrect data in the request 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the EventResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventResponse{}

// EventResponse struct for EventResponse
type EventResponse struct {
	// Request status (1 = success, 0 = error)
	Status int32 `json:"status"`
	// Error code if status is 0
	Error *ErrorResponse `json:"error,omitempty"`
	// Error message if status is 0
	Message *string `json:"message,omitempty"`
	Uid int32 `json:"uid"`
	Oid int32 `json:"oid"`
	Now int64 `json:"now"`
	SysMsg string `json:"sys_msg"`
	Event EventObject `json:"event"`
	AdditionalProperties map[string]interface{}
}

type _EventResponse EventResponse

// NewEventResponse instantiates a new EventResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventResponse(status int32, uid int32, oid int32, now int64, sysMsg string, event EventObject) *EventResponse {
	this := EventResponse{}
	this.Status = status
	this.Uid = uid
	this.Oid = oid
	this.Now = now
	this.SysMsg = sysMsg
	this.Event = event
	return &this
}

// NewEventResponseWithDefaults instantiates a new EventResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventResponseWithDefaults() *EventResponse {
	this := EventResponse{}
	return &this
}

// GetStatus returns the Status field value
func (o *EventResponse) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *EventResponse) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *EventResponse) SetStatus(v int32) {
	o.Status = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *EventResponse) GetError() ErrorResponse {
	if o == nil || IsNil(o.Error) {
		var ret ErrorResponse
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventResponse) GetErrorOk() (*ErrorResponse, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *EventResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorResponse and assigns it to the Error field.
func (o *EventResponse) SetError(v ErrorResponse) {
	o.Error = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *EventResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *EventResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *EventResponse) SetMessage(v string) {
	o.Message = &v
}

// GetUid returns the Uid field value
func (o *EventResponse) GetUid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *EventResponse) GetUidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *EventResponse) SetUid(v int32) {
	o.Uid = v
}

// GetOid returns the Oid field value
func (o *EventResponse) GetOid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Oid
}

// GetOidOk returns a tuple with the Oid field value
// and a boolean to check if the value has been set.
func (o *EventResponse) GetOidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Oid, true
}

// SetOid sets field value
func (o *EventResponse) SetOid(v int32) {
	o.Oid = v
}

// GetNow returns the Now field value
func (o *EventResponse) GetNow() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Now
}

// GetNowOk returns a tuple with the Now field value
// and a boolean to check if the value has been set.
func (o *EventResponse) GetNowOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Now, true
}

// SetNow sets field value
func (o *EventResponse) SetNow(v int64) {
	o.Now = v
}

// GetSysMsg returns the SysMsg field value
func (o *EventResponse) GetSysMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SysMsg
}

// GetSysMsgOk returns a tuple with the SysMsg field value
// and a boolean to check if the value has been set.
func (o *EventResponse) GetSysMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SysMsg, true
}

// SetSysMsg sets field value
func (o *EventResponse) SetSysMsg(v string) {
	o.SysMsg = v
}

// GetEvent returns the Event field value
func (o *EventResponse) GetEvent() EventObject {
	if o == nil {
		var ret EventObject
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *EventResponse) GetEventOk() (*EventObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *EventResponse) SetEvent(v EventObject) {
	o.Event = v
}

func (o EventResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	toSerialize["uid"] = o.Uid
	toSerialize["oid"] = o.Oid
	toSerialize["now"] = o.Now
	toSerialize["sys_msg"] = o.SysMsg
	toSerialize["event"] = o.Event

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EventResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"uid",
		"oid",
		"now",
		"sys_msg",
		"event",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventResponse := _EventResponse{}

	err = json.Unmarshal(data, &varEventResponse)

	if err != nil {
		return err
	}

	*o = EventResponse(varEventResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "status")
		delete(additionalProperties, "error")
		delete(additionalProperties, "message")
		delete(additionalProperties, "uid")
		delete(additionalProperties, "oid")
		delete(additionalProperties, "now")
		delete(additionalProperties, "sys_msg")
		delete(additionalProperties, "event")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEventResponse struct {
	value *EventResponse
	isSet bool
}

func (v NullableEventResponse) Get() *EventResponse {
	return v.value
}

func (v *NullableEventResponse) Set(val *EventResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEventResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEventResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventResponse(val *EventResponse) *NullableEventResponse {
	return &NullableEventResponse{value: val, isSet: true}
}

func (v NullableEventResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


