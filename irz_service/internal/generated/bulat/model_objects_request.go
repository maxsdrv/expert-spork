/*
Bulat API

API specification for the Bulat system.  **IMPORTANT**: This API always returns HTTP 200 status code, even for errors. Error responses are indicated by the response content, not HTTP status codes.  Error codes: - noacc/noaccess: No access to the requested resource - dberror: Error while executing database queries   - noname/noid/no_acc_c: Incorrect data in the request 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the ObjectsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectsRequest{}

// ObjectsRequest struct for ObjectsRequest
type ObjectsRequest struct {
	Action string `json:"action"`
	LcId *int32 `json:"lc_id,omitempty"`
	LcTitle *string `json:"lc_title,omitempty"`
	LcStationary *int32 `json:"lc_stationary,omitempty"`
	LcStationaryLat *string `json:"lc_stationary_lat,omitempty"`
	LcStationaryLon *string `json:"lc_stationary_lon,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ObjectsRequest ObjectsRequest

// NewObjectsRequest instantiates a new ObjectsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectsRequest(action string) *ObjectsRequest {
	this := ObjectsRequest{}
	this.Action = action
	return &this
}

// NewObjectsRequestWithDefaults instantiates a new ObjectsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectsRequestWithDefaults() *ObjectsRequest {
	this := ObjectsRequest{}
	return &this
}

// GetAction returns the Action field value
func (o *ObjectsRequest) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *ObjectsRequest) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *ObjectsRequest) SetAction(v string) {
	o.Action = v
}

// GetLcId returns the LcId field value if set, zero value otherwise.
func (o *ObjectsRequest) GetLcId() int32 {
	if o == nil || IsNil(o.LcId) {
		var ret int32
		return ret
	}
	return *o.LcId
}

// GetLcIdOk returns a tuple with the LcId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectsRequest) GetLcIdOk() (*int32, bool) {
	if o == nil || IsNil(o.LcId) {
		return nil, false
	}
	return o.LcId, true
}

// HasLcId returns a boolean if a field has been set.
func (o *ObjectsRequest) HasLcId() bool {
	if o != nil && !IsNil(o.LcId) {
		return true
	}

	return false
}

// SetLcId gets a reference to the given int32 and assigns it to the LcId field.
func (o *ObjectsRequest) SetLcId(v int32) {
	o.LcId = &v
}

// GetLcTitle returns the LcTitle field value if set, zero value otherwise.
func (o *ObjectsRequest) GetLcTitle() string {
	if o == nil || IsNil(o.LcTitle) {
		var ret string
		return ret
	}
	return *o.LcTitle
}

// GetLcTitleOk returns a tuple with the LcTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectsRequest) GetLcTitleOk() (*string, bool) {
	if o == nil || IsNil(o.LcTitle) {
		return nil, false
	}
	return o.LcTitle, true
}

// HasLcTitle returns a boolean if a field has been set.
func (o *ObjectsRequest) HasLcTitle() bool {
	if o != nil && !IsNil(o.LcTitle) {
		return true
	}

	return false
}

// SetLcTitle gets a reference to the given string and assigns it to the LcTitle field.
func (o *ObjectsRequest) SetLcTitle(v string) {
	o.LcTitle = &v
}

// GetLcStationary returns the LcStationary field value if set, zero value otherwise.
func (o *ObjectsRequest) GetLcStationary() int32 {
	if o == nil || IsNil(o.LcStationary) {
		var ret int32
		return ret
	}
	return *o.LcStationary
}

// GetLcStationaryOk returns a tuple with the LcStationary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectsRequest) GetLcStationaryOk() (*int32, bool) {
	if o == nil || IsNil(o.LcStationary) {
		return nil, false
	}
	return o.LcStationary, true
}

// HasLcStationary returns a boolean if a field has been set.
func (o *ObjectsRequest) HasLcStationary() bool {
	if o != nil && !IsNil(o.LcStationary) {
		return true
	}

	return false
}

// SetLcStationary gets a reference to the given int32 and assigns it to the LcStationary field.
func (o *ObjectsRequest) SetLcStationary(v int32) {
	o.LcStationary = &v
}

// GetLcStationaryLat returns the LcStationaryLat field value if set, zero value otherwise.
func (o *ObjectsRequest) GetLcStationaryLat() string {
	if o == nil || IsNil(o.LcStationaryLat) {
		var ret string
		return ret
	}
	return *o.LcStationaryLat
}

// GetLcStationaryLatOk returns a tuple with the LcStationaryLat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectsRequest) GetLcStationaryLatOk() (*string, bool) {
	if o == nil || IsNil(o.LcStationaryLat) {
		return nil, false
	}
	return o.LcStationaryLat, true
}

// HasLcStationaryLat returns a boolean if a field has been set.
func (o *ObjectsRequest) HasLcStationaryLat() bool {
	if o != nil && !IsNil(o.LcStationaryLat) {
		return true
	}

	return false
}

// SetLcStationaryLat gets a reference to the given string and assigns it to the LcStationaryLat field.
func (o *ObjectsRequest) SetLcStationaryLat(v string) {
	o.LcStationaryLat = &v
}

// GetLcStationaryLon returns the LcStationaryLon field value if set, zero value otherwise.
func (o *ObjectsRequest) GetLcStationaryLon() string {
	if o == nil || IsNil(o.LcStationaryLon) {
		var ret string
		return ret
	}
	return *o.LcStationaryLon
}

// GetLcStationaryLonOk returns a tuple with the LcStationaryLon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectsRequest) GetLcStationaryLonOk() (*string, bool) {
	if o == nil || IsNil(o.LcStationaryLon) {
		return nil, false
	}
	return o.LcStationaryLon, true
}

// HasLcStationaryLon returns a boolean if a field has been set.
func (o *ObjectsRequest) HasLcStationaryLon() bool {
	if o != nil && !IsNil(o.LcStationaryLon) {
		return true
	}

	return false
}

// SetLcStationaryLon gets a reference to the given string and assigns it to the LcStationaryLon field.
func (o *ObjectsRequest) SetLcStationaryLon(v string) {
	o.LcStationaryLon = &v
}

func (o ObjectsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	if !IsNil(o.LcId) {
		toSerialize["lc_id"] = o.LcId
	}
	if !IsNil(o.LcTitle) {
		toSerialize["lc_title"] = o.LcTitle
	}
	if !IsNil(o.LcStationary) {
		toSerialize["lc_stationary"] = o.LcStationary
	}
	if !IsNil(o.LcStationaryLat) {
		toSerialize["lc_stationary_lat"] = o.LcStationaryLat
	}
	if !IsNil(o.LcStationaryLon) {
		toSerialize["lc_stationary_lon"] = o.LcStationaryLon
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ObjectsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectsRequest := _ObjectsRequest{}

	err = json.Unmarshal(data, &varObjectsRequest)

	if err != nil {
		return err
	}

	*o = ObjectsRequest(varObjectsRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "action")
		delete(additionalProperties, "lc_id")
		delete(additionalProperties, "lc_title")
		delete(additionalProperties, "lc_stationary")
		delete(additionalProperties, "lc_stationary_lat")
		delete(additionalProperties, "lc_stationary_lon")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableObjectsRequest struct {
	value *ObjectsRequest
	isSet bool
}

func (v NullableObjectsRequest) Get() *ObjectsRequest {
	return v.value
}

func (v *NullableObjectsRequest) Set(val *ObjectsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectsRequest(val *ObjectsRequest) *NullableObjectsRequest {
	return &NullableObjectsRequest{value: val, isSet: true}
}

func (v NullableObjectsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


