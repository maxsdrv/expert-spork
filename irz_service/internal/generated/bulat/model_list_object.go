/*
Bulat API

API specification for the Bulat system.  **IMPORTANT**: This API always returns HTTP 200 status code, even for errors. Error responses are indicated by the response content, not HTTP status codes.  Error codes: - noacc/noaccess: No access to the requested resource - dberror: Error while executing database queries   - noname/noid/no_acc_c: Incorrect data in the request 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the ListObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListObject{}

// ListObject struct for ListObject
type ListObject struct {
	LcId int32 `json:"lc_id"`
	LcTitle string `json:"lc_title"`
	LcActive int32 `json:"lc_active"`
	LocCourse *int32 `json:"loc_course,omitempty"`
	LocCtrl *int32 `json:"loc_ctrl,omitempty"`
	LocLat *float64 `json:"loc_lat,omitempty"`
	LocLon *float64 `json:"loc_lon,omitempty"`
	LocOnlineFlag int32 `json:"loc_online_flag"`
	LocDtSecDelta *int32 `json:"loc_dt_sec_delta,omitempty"`
	LocDt *int64 `json:"loc_dt,omitempty"`
	LocSdt *int64 `json:"loc_sdt,omitempty"`
	LocAddress *string `json:"loc_address,omitempty"`
	Group *int32 `json:"group,omitempty"`
	Title *string `json:"title,omitempty"`
	DevicesData []DeviceDataObject `json:"devices_data,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ListObject ListObject

// NewListObject instantiates a new ListObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListObject(lcId int32, lcTitle string, lcActive int32, locOnlineFlag int32) *ListObject {
	this := ListObject{}
	this.LcId = lcId
	this.LcTitle = lcTitle
	this.LcActive = lcActive
	this.LocOnlineFlag = locOnlineFlag
	return &this
}

// NewListObjectWithDefaults instantiates a new ListObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListObjectWithDefaults() *ListObject {
	this := ListObject{}
	return &this
}

// GetLcId returns the LcId field value
func (o *ListObject) GetLcId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LcId
}

// GetLcIdOk returns a tuple with the LcId field value
// and a boolean to check if the value has been set.
func (o *ListObject) GetLcIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LcId, true
}

// SetLcId sets field value
func (o *ListObject) SetLcId(v int32) {
	o.LcId = v
}

// GetLcTitle returns the LcTitle field value
func (o *ListObject) GetLcTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LcTitle
}

// GetLcTitleOk returns a tuple with the LcTitle field value
// and a boolean to check if the value has been set.
func (o *ListObject) GetLcTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LcTitle, true
}

// SetLcTitle sets field value
func (o *ListObject) SetLcTitle(v string) {
	o.LcTitle = v
}

// GetLcActive returns the LcActive field value
func (o *ListObject) GetLcActive() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LcActive
}

// GetLcActiveOk returns a tuple with the LcActive field value
// and a boolean to check if the value has been set.
func (o *ListObject) GetLcActiveOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LcActive, true
}

// SetLcActive sets field value
func (o *ListObject) SetLcActive(v int32) {
	o.LcActive = v
}

// GetLocCourse returns the LocCourse field value if set, zero value otherwise.
func (o *ListObject) GetLocCourse() int32 {
	if o == nil || IsNil(o.LocCourse) {
		var ret int32
		return ret
	}
	return *o.LocCourse
}

// GetLocCourseOk returns a tuple with the LocCourse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObject) GetLocCourseOk() (*int32, bool) {
	if o == nil || IsNil(o.LocCourse) {
		return nil, false
	}
	return o.LocCourse, true
}

// HasLocCourse returns a boolean if a field has been set.
func (o *ListObject) HasLocCourse() bool {
	if o != nil && !IsNil(o.LocCourse) {
		return true
	}

	return false
}

// SetLocCourse gets a reference to the given int32 and assigns it to the LocCourse field.
func (o *ListObject) SetLocCourse(v int32) {
	o.LocCourse = &v
}

// GetLocCtrl returns the LocCtrl field value if set, zero value otherwise.
func (o *ListObject) GetLocCtrl() int32 {
	if o == nil || IsNil(o.LocCtrl) {
		var ret int32
		return ret
	}
	return *o.LocCtrl
}

// GetLocCtrlOk returns a tuple with the LocCtrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObject) GetLocCtrlOk() (*int32, bool) {
	if o == nil || IsNil(o.LocCtrl) {
		return nil, false
	}
	return o.LocCtrl, true
}

// HasLocCtrl returns a boolean if a field has been set.
func (o *ListObject) HasLocCtrl() bool {
	if o != nil && !IsNil(o.LocCtrl) {
		return true
	}

	return false
}

// SetLocCtrl gets a reference to the given int32 and assigns it to the LocCtrl field.
func (o *ListObject) SetLocCtrl(v int32) {
	o.LocCtrl = &v
}

// GetLocLat returns the LocLat field value if set, zero value otherwise.
func (o *ListObject) GetLocLat() float64 {
	if o == nil || IsNil(o.LocLat) {
		var ret float64
		return ret
	}
	return *o.LocLat
}

// GetLocLatOk returns a tuple with the LocLat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObject) GetLocLatOk() (*float64, bool) {
	if o == nil || IsNil(o.LocLat) {
		return nil, false
	}
	return o.LocLat, true
}

// HasLocLat returns a boolean if a field has been set.
func (o *ListObject) HasLocLat() bool {
	if o != nil && !IsNil(o.LocLat) {
		return true
	}

	return false
}

// SetLocLat gets a reference to the given float64 and assigns it to the LocLat field.
func (o *ListObject) SetLocLat(v float64) {
	o.LocLat = &v
}

// GetLocLon returns the LocLon field value if set, zero value otherwise.
func (o *ListObject) GetLocLon() float64 {
	if o == nil || IsNil(o.LocLon) {
		var ret float64
		return ret
	}
	return *o.LocLon
}

// GetLocLonOk returns a tuple with the LocLon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObject) GetLocLonOk() (*float64, bool) {
	if o == nil || IsNil(o.LocLon) {
		return nil, false
	}
	return o.LocLon, true
}

// HasLocLon returns a boolean if a field has been set.
func (o *ListObject) HasLocLon() bool {
	if o != nil && !IsNil(o.LocLon) {
		return true
	}

	return false
}

// SetLocLon gets a reference to the given float64 and assigns it to the LocLon field.
func (o *ListObject) SetLocLon(v float64) {
	o.LocLon = &v
}

// GetLocOnlineFlag returns the LocOnlineFlag field value
func (o *ListObject) GetLocOnlineFlag() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LocOnlineFlag
}

// GetLocOnlineFlagOk returns a tuple with the LocOnlineFlag field value
// and a boolean to check if the value has been set.
func (o *ListObject) GetLocOnlineFlagOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocOnlineFlag, true
}

// SetLocOnlineFlag sets field value
func (o *ListObject) SetLocOnlineFlag(v int32) {
	o.LocOnlineFlag = v
}

// GetLocDtSecDelta returns the LocDtSecDelta field value if set, zero value otherwise.
func (o *ListObject) GetLocDtSecDelta() int32 {
	if o == nil || IsNil(o.LocDtSecDelta) {
		var ret int32
		return ret
	}
	return *o.LocDtSecDelta
}

// GetLocDtSecDeltaOk returns a tuple with the LocDtSecDelta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObject) GetLocDtSecDeltaOk() (*int32, bool) {
	if o == nil || IsNil(o.LocDtSecDelta) {
		return nil, false
	}
	return o.LocDtSecDelta, true
}

// HasLocDtSecDelta returns a boolean if a field has been set.
func (o *ListObject) HasLocDtSecDelta() bool {
	if o != nil && !IsNil(o.LocDtSecDelta) {
		return true
	}

	return false
}

// SetLocDtSecDelta gets a reference to the given int32 and assigns it to the LocDtSecDelta field.
func (o *ListObject) SetLocDtSecDelta(v int32) {
	o.LocDtSecDelta = &v
}

// GetLocDt returns the LocDt field value if set, zero value otherwise.
func (o *ListObject) GetLocDt() int64 {
	if o == nil || IsNil(o.LocDt) {
		var ret int64
		return ret
	}
	return *o.LocDt
}

// GetLocDtOk returns a tuple with the LocDt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObject) GetLocDtOk() (*int64, bool) {
	if o == nil || IsNil(o.LocDt) {
		return nil, false
	}
	return o.LocDt, true
}

// HasLocDt returns a boolean if a field has been set.
func (o *ListObject) HasLocDt() bool {
	if o != nil && !IsNil(o.LocDt) {
		return true
	}

	return false
}

// SetLocDt gets a reference to the given int64 and assigns it to the LocDt field.
func (o *ListObject) SetLocDt(v int64) {
	o.LocDt = &v
}

// GetLocSdt returns the LocSdt field value if set, zero value otherwise.
func (o *ListObject) GetLocSdt() int64 {
	if o == nil || IsNil(o.LocSdt) {
		var ret int64
		return ret
	}
	return *o.LocSdt
}

// GetLocSdtOk returns a tuple with the LocSdt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObject) GetLocSdtOk() (*int64, bool) {
	if o == nil || IsNil(o.LocSdt) {
		return nil, false
	}
	return o.LocSdt, true
}

// HasLocSdt returns a boolean if a field has been set.
func (o *ListObject) HasLocSdt() bool {
	if o != nil && !IsNil(o.LocSdt) {
		return true
	}

	return false
}

// SetLocSdt gets a reference to the given int64 and assigns it to the LocSdt field.
func (o *ListObject) SetLocSdt(v int64) {
	o.LocSdt = &v
}

// GetLocAddress returns the LocAddress field value if set, zero value otherwise.
func (o *ListObject) GetLocAddress() string {
	if o == nil || IsNil(o.LocAddress) {
		var ret string
		return ret
	}
	return *o.LocAddress
}

// GetLocAddressOk returns a tuple with the LocAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObject) GetLocAddressOk() (*string, bool) {
	if o == nil || IsNil(o.LocAddress) {
		return nil, false
	}
	return o.LocAddress, true
}

// HasLocAddress returns a boolean if a field has been set.
func (o *ListObject) HasLocAddress() bool {
	if o != nil && !IsNil(o.LocAddress) {
		return true
	}

	return false
}

// SetLocAddress gets a reference to the given string and assigns it to the LocAddress field.
func (o *ListObject) SetLocAddress(v string) {
	o.LocAddress = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *ListObject) GetGroup() int32 {
	if o == nil || IsNil(o.Group) {
		var ret int32
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObject) GetGroupOk() (*int32, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *ListObject) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given int32 and assigns it to the Group field.
func (o *ListObject) SetGroup(v int32) {
	o.Group = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ListObject) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObject) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ListObject) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ListObject) SetTitle(v string) {
	o.Title = &v
}

// GetDevicesData returns the DevicesData field value if set, zero value otherwise.
func (o *ListObject) GetDevicesData() []DeviceDataObject {
	if o == nil || IsNil(o.DevicesData) {
		var ret []DeviceDataObject
		return ret
	}
	return o.DevicesData
}

// GetDevicesDataOk returns a tuple with the DevicesData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListObject) GetDevicesDataOk() ([]DeviceDataObject, bool) {
	if o == nil || IsNil(o.DevicesData) {
		return nil, false
	}
	return o.DevicesData, true
}

// HasDevicesData returns a boolean if a field has been set.
func (o *ListObject) HasDevicesData() bool {
	if o != nil && !IsNil(o.DevicesData) {
		return true
	}

	return false
}

// SetDevicesData gets a reference to the given []DeviceDataObject and assigns it to the DevicesData field.
func (o *ListObject) SetDevicesData(v []DeviceDataObject) {
	o.DevicesData = v
}

func (o ListObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lc_id"] = o.LcId
	toSerialize["lc_title"] = o.LcTitle
	toSerialize["lc_active"] = o.LcActive
	if !IsNil(o.LocCourse) {
		toSerialize["loc_course"] = o.LocCourse
	}
	if !IsNil(o.LocCtrl) {
		toSerialize["loc_ctrl"] = o.LocCtrl
	}
	if !IsNil(o.LocLat) {
		toSerialize["loc_lat"] = o.LocLat
	}
	if !IsNil(o.LocLon) {
		toSerialize["loc_lon"] = o.LocLon
	}
	toSerialize["loc_online_flag"] = o.LocOnlineFlag
	if !IsNil(o.LocDtSecDelta) {
		toSerialize["loc_dt_sec_delta"] = o.LocDtSecDelta
	}
	if !IsNil(o.LocDt) {
		toSerialize["loc_dt"] = o.LocDt
	}
	if !IsNil(o.LocSdt) {
		toSerialize["loc_sdt"] = o.LocSdt
	}
	if !IsNil(o.LocAddress) {
		toSerialize["loc_address"] = o.LocAddress
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.DevicesData) {
		toSerialize["devices_data"] = o.DevicesData
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lc_id",
		"lc_title",
		"lc_active",
		"loc_online_flag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListObject := _ListObject{}

	err = json.Unmarshal(data, &varListObject)

	if err != nil {
		return err
	}

	*o = ListObject(varListObject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "lc_id")
		delete(additionalProperties, "lc_title")
		delete(additionalProperties, "lc_active")
		delete(additionalProperties, "loc_course")
		delete(additionalProperties, "loc_ctrl")
		delete(additionalProperties, "loc_lat")
		delete(additionalProperties, "loc_lon")
		delete(additionalProperties, "loc_online_flag")
		delete(additionalProperties, "loc_dt_sec_delta")
		delete(additionalProperties, "loc_dt")
		delete(additionalProperties, "loc_sdt")
		delete(additionalProperties, "loc_address")
		delete(additionalProperties, "group")
		delete(additionalProperties, "title")
		delete(additionalProperties, "devices_data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListObject struct {
	value *ListObject
	isSet bool
}

func (v NullableListObject) Get() *ListObject {
	return v.value
}

func (v *NullableListObject) Set(val *ListObject) {
	v.value = val
	v.isSet = true
}

func (v NullableListObject) IsSet() bool {
	return v.isSet
}

func (v *NullableListObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListObject(val *ListObject) *NullableListObject {
	return &NullableListObject{value: val, isSet: true}
}

func (v NullableListObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


