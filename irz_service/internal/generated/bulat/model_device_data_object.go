/*
Bulat API

API specification for the Bulat system.  **IMPORTANT**: This API always returns HTTP 200 status code, even for errors. Error responses are indicated by the response content, not HTTP status codes.  Error codes: - noacc/noaccess: No access to the requested resource - dberror: Error while executing database queries   - noname/noid/no_acc_c: Incorrect data in the request 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the DeviceDataObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceDataObject{}

// DeviceDataObject struct for DeviceDataObject
type DeviceDataObject struct {
	Id *int32 `json:"id,omitempty"`
	Imei *string `json:"imei,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceDataObject DeviceDataObject

// NewDeviceDataObject instantiates a new DeviceDataObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceDataObject() *DeviceDataObject {
	this := DeviceDataObject{}
	return &this
}

// NewDeviceDataObjectWithDefaults instantiates a new DeviceDataObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceDataObjectWithDefaults() *DeviceDataObject {
	this := DeviceDataObject{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeviceDataObject) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDataObject) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeviceDataObject) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *DeviceDataObject) SetId(v int32) {
	o.Id = &v
}

// GetImei returns the Imei field value if set, zero value otherwise.
func (o *DeviceDataObject) GetImei() string {
	if o == nil || IsNil(o.Imei) {
		var ret string
		return ret
	}
	return *o.Imei
}

// GetImeiOk returns a tuple with the Imei field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDataObject) GetImeiOk() (*string, bool) {
	if o == nil || IsNil(o.Imei) {
		return nil, false
	}
	return o.Imei, true
}

// HasImei returns a boolean if a field has been set.
func (o *DeviceDataObject) HasImei() bool {
	if o != nil && !IsNil(o.Imei) {
		return true
	}

	return false
}

// SetImei gets a reference to the given string and assigns it to the Imei field.
func (o *DeviceDataObject) SetImei(v string) {
	o.Imei = &v
}

func (o DeviceDataObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceDataObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Imei) {
		toSerialize["imei"] = o.Imei
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceDataObject) UnmarshalJSON(data []byte) (err error) {
	varDeviceDataObject := _DeviceDataObject{}

	err = json.Unmarshal(data, &varDeviceDataObject)

	if err != nil {
		return err
	}

	*o = DeviceDataObject(varDeviceDataObject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "imei")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceDataObject struct {
	value *DeviceDataObject
	isSet bool
}

func (v NullableDeviceDataObject) Get() *DeviceDataObject {
	return v.value
}

func (v *NullableDeviceDataObject) Set(val *DeviceDataObject) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceDataObject) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceDataObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceDataObject(val *DeviceDataObject) *NullableDeviceDataObject {
	return &NullableDeviceDataObject{value: val, isSet: true}
}

func (v NullableDeviceDataObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceDataObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


