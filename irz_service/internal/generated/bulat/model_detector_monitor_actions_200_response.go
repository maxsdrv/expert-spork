/*
Bulat API

API specification for the Bulat system.  **IMPORTANT**: This API always returns HTTP 200 status code, even for errors. Error responses are indicated by the response content, not HTTP status codes.  Error codes: - noacc/noaccess: No access to the requested resource - dberror: Error while executing database queries   - noname/noid/no_acc_c: Incorrect data in the request 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DetectorMonitorActions200Response - struct for DetectorMonitorActions200Response
type DetectorMonitorActions200Response struct {
	ErrorResponse *ErrorResponse
	EventResponse *EventResponse
	ObjectsResponse *ObjectsResponse
	Int32 *int32
}

// ErrorResponseAsDetectorMonitorActions200Response is a convenience function that returns ErrorResponse wrapped in DetectorMonitorActions200Response
func ErrorResponseAsDetectorMonitorActions200Response(v *ErrorResponse) DetectorMonitorActions200Response {
	return DetectorMonitorActions200Response{
		ErrorResponse: v,
	}
}

// EventResponseAsDetectorMonitorActions200Response is a convenience function that returns EventResponse wrapped in DetectorMonitorActions200Response
func EventResponseAsDetectorMonitorActions200Response(v *EventResponse) DetectorMonitorActions200Response {
	return DetectorMonitorActions200Response{
		EventResponse: v,
	}
}

// ObjectsResponseAsDetectorMonitorActions200Response is a convenience function that returns ObjectsResponse wrapped in DetectorMonitorActions200Response
func ObjectsResponseAsDetectorMonitorActions200Response(v *ObjectsResponse) DetectorMonitorActions200Response {
	return DetectorMonitorActions200Response{
		ObjectsResponse: v,
	}
}

// int32AsDetectorMonitorActions200Response is a convenience function that returns int32 wrapped in DetectorMonitorActions200Response
func Int32AsDetectorMonitorActions200Response(v *int32) DetectorMonitorActions200Response {
	return DetectorMonitorActions200Response{
		Int32: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DetectorMonitorActions200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ErrorResponse
	err = newStrictDecoder(data).Decode(&dst.ErrorResponse)
	if err == nil {
		jsonErrorResponse, _ := json.Marshal(dst.ErrorResponse)
		if string(jsonErrorResponse) == "{}" { // empty struct
			dst.ErrorResponse = nil
		} else {
			if err = validator.Validate(dst.ErrorResponse); err != nil {
				dst.ErrorResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.ErrorResponse = nil
	}

	// try to unmarshal data into EventResponse
	err = newStrictDecoder(data).Decode(&dst.EventResponse)
	if err == nil {
		jsonEventResponse, _ := json.Marshal(dst.EventResponse)
		if string(jsonEventResponse) == "{}" { // empty struct
			dst.EventResponse = nil
		} else {
			if err = validator.Validate(dst.EventResponse); err != nil {
				dst.EventResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.EventResponse = nil
	}

	// try to unmarshal data into ObjectsResponse
	err = newStrictDecoder(data).Decode(&dst.ObjectsResponse)
	if err == nil {
		jsonObjectsResponse, _ := json.Marshal(dst.ObjectsResponse)
		if string(jsonObjectsResponse) == "{}" { // empty struct
			dst.ObjectsResponse = nil
		} else {
			if err = validator.Validate(dst.ObjectsResponse); err != nil {
				dst.ObjectsResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.ObjectsResponse = nil
	}

	// try to unmarshal data into Int32
	err = newStrictDecoder(data).Decode(&dst.Int32)
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			if err = validator.Validate(dst.Int32); err != nil {
				dst.Int32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Int32 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ErrorResponse = nil
		dst.EventResponse = nil
		dst.ObjectsResponse = nil
		dst.Int32 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DetectorMonitorActions200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DetectorMonitorActions200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DetectorMonitorActions200Response) MarshalJSON() ([]byte, error) {
	if src.ErrorResponse != nil {
		return json.Marshal(&src.ErrorResponse)
	}

	if src.EventResponse != nil {
		return json.Marshal(&src.EventResponse)
	}

	if src.ObjectsResponse != nil {
		return json.Marshal(&src.ObjectsResponse)
	}

	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DetectorMonitorActions200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ErrorResponse != nil {
		return obj.ErrorResponse
	}

	if obj.EventResponse != nil {
		return obj.EventResponse
	}

	if obj.ObjectsResponse != nil {
		return obj.ObjectsResponse
	}

	if obj.Int32 != nil {
		return obj.Int32
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DetectorMonitorActions200Response) GetActualInstanceValue() (interface{}) {
	if obj.ErrorResponse != nil {
		return *obj.ErrorResponse
	}

	if obj.EventResponse != nil {
		return *obj.EventResponse
	}

	if obj.ObjectsResponse != nil {
		return *obj.ObjectsResponse
	}

	if obj.Int32 != nil {
		return *obj.Int32
	}

	// all schemas are nil
	return nil
}

type NullableDetectorMonitorActions200Response struct {
	value *DetectorMonitorActions200Response
	isSet bool
}

func (v NullableDetectorMonitorActions200Response) Get() *DetectorMonitorActions200Response {
	return v.value
}

func (v *NullableDetectorMonitorActions200Response) Set(val *DetectorMonitorActions200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableDetectorMonitorActions200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableDetectorMonitorActions200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetectorMonitorActions200Response(val *DetectorMonitorActions200Response) *NullableDetectorMonitorActions200Response {
	return &NullableDetectorMonitorActions200Response{value: val, isSet: true}
}

func (v NullableDetectorMonitorActions200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetectorMonitorActions200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


