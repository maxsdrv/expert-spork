version: v2beta1
name: dds-control

imports:
- path: devspace.local-env.yaml
- path: tests/devspace.yaml
- path: configs/env.yaml


images:
  update:
    image: ${PUBLISH_REGISTRY_IMAGE}/update
    dockerfile: update.Dockerfile
    buildArgs:
      VERSION: ${VERSION}
    buildKit:
      args: [
        "--platform=${PLATFORMS}",
        "--cache-from=type=registry,ref=${IMAGECACHE_IMAGE_PREFIX}-update:${CACHE_TAG}",
        "--cache-from=type=registry,ref=${IMAGECACHE_IMAGE_PREFIX}-update:${IMAGE_TAG}",
      ]
  api:
    image: ${PUBLISH_REGISTRY_IMAGE}/api
    buildArgs:
      APP_ID: dds-control-api
      VERSION: ${VERSION}
      GO_VER: ${GO_VER}
      GOMOD_HOST: ${CI_SERVER_HOST}
      GOMOD_TOKEN: ${GOMOD_TOKEN}
      CRYPT_PRIVATE_KEY: ${CRYPT_PRIVATE_KEY}
      SIGN_PUBLIC_KEY: ${SIGN_PUBLIC_KEY}
    buildKit:
      args: [
        "--platform=${PLATFORMS}",
        "--cache-from=type=registry,ref=${IMAGECACHE_IMAGE_PREFIX}-api:${CACHE_TAG}",
        "--cache-from=type=registry,ref=${IMAGECACHE_IMAGE_PREFIX}-api:${IMAGE_TAG}",
      ]
  proxy:
    image: ${PUBLISH_REGISTRY_IMAGE}/proxy
    dockerfile: proxy.Dockerfile
    buildArgs:
      VERSION: ${VERSION}
    buildKit:
      args: [
        "--platform=${PLATFORMS}",
        "--cache-from=type=registry,ref=${IMAGECACHE_IMAGE_PREFIX}-proxy:${CACHE_TAG}",
        "--cache-from=type=registry,ref=${IMAGECACHE_IMAGE_PREFIX}-proxy:${IMAGE_TAG}",
      ]

pipelines:
  build: |-
    build_images ${@:---all} -t $IMAGE_TAG

  deploy: |-
    export "$@"

    mkdir -p ${DATA_ROOT}/control/triggers
    mkdir -p ${DATA_ROOT}/control/upload
    mkdir -p ${DATA_ROOT}/control/firmware
    mkdir -p ${DATA_ROOT}/backups
    mkdir -p ${DATA_ROOT}/logs

    mkdir -p ${DATA_ROOT}/configs
    sed -e "s/net_if:.*/net_if: $NET_IF/" -e "s/env:.*/env: dev-docker/" configs/dev-vm/system.yaml > ${DATA_ROOT}/configs/system.yaml

    docker compose --env-file $DEVSPACE_ENV_FILE up -d

  purge: |-
    docker compose down "$@" --remove-orphans


commands:
  logs: |-
    docker compose logs -f "$@"

  dev: |-
    # Check we are not in dev container
    [ ! -d /workspace ] && devspace purge api || true
    export "$@"
    go run main.go -debug

  format: |-
    CI_SERVER_HOST= devspace --silent run format_cxx src "$@"

  lint: |-
    export CI_SERVER_HOST=
    devspace --silent run lint_spell . "$@"
    #devspace --silent run lint_cxx ${CI_REGISTRY_IMAGE}/intel/dss-ubuntu-builder:current src "$@"
    #devspace --silent run lint_cxx_qt ${CI_REGISTRY_IMAGE}/intel/dss-ubuntu-builder:current src "$@"

  validate: |-
    export CI_SERVER_HOST=
    devspace --silent run lint_openapi api/control-openapi.yaml

  gen: |-
    export CI_SERVER_HOST=
    devspace --silent run gen_go_openapi_server api/control-openapi.yaml internal/generated/api api

  use-vm-docker: |-
    vm_name=tamerlan-dev
    vm_ip=192.168.56.101

    docker context rm $vm_name -f
    docker context create $vm_name --docker host=ssh://vagrant@$vm_ip
    ssh-keygen -R $vm_ip
    ssh-keyscan -H $vm_ip >> ~/.ssh/known_hosts
    ssh-add provision/.vagrant/machines/$vm_name/virtualbox/private_key
    docker context use $vm_name

  lock: |-
    [ -n "$@" ] && go get "$@" || go mod tidy

  clean: |-
    docker builder prune --filter type=exec.cachemount -f


profiles:
  - name: ci
    activation:
      - env:
          CI_JOB_ID: "\\d+"
    patches:
      - op: add
        path: images.update.buildKit.args
        value: "--cache-to=type=registry,ref=${IMAGECACHE_IMAGE_PREFIX}-update:${IMAGE_TAG},mode=max,compression=zstd"

      - op: add
        path: images.api.buildKit.args
        value: "--cache-to=type=registry,ref=${IMAGECACHE_IMAGE_PREFIX}-api:${IMAGE_TAG},mode=max,compression=zstd"

      - op: add
        path: images.proxy.buildKit.args
        value: "--cache-to=type=registry,ref=${IMAGECACHE_IMAGE_PREFIX}-proxy:${IMAGE_TAG},mode=max,compression=zstd"
