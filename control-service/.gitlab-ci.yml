include:
  - file:
      - ci/gitlab/docker.yml
      - ci/gitlab/rebase.yml
      - ci/gitlab/automr.yml
      - ci/options/golang.yml
    project: irz/tamerlan/dds-shared
    ref: develop

stages:
  - check
  - build
#  - test
  - deploy
#  - test-deploy

images:
  stage: build
  script:
    - unset CRYPT_PRIVATE_KEY SIGN_PUBLIC_KEY # use dev keys
    - devspace build

dds-control:
  stage: deploy
  image: $CI_REGISTRY/irz/tamerlan/dds-control/update:$CI_COMMIT_BRANCH
  services: []
  variables:
    HOST_ADDR: "$ENVIRONMENT.$STAGES_DOMAIN"
    HOST_USER: "user"
    HOST_PASS: "user"
  before_script:
    - apk add sshpass openssh-client git
    - cd /provision
  script:
    - git clone https://gitlab-ci-token:$CI_JOB_TOKEN@$CI_SERVER_HOST/irz/tamerlan/dds-configs.git
    - config_files=$(realpath dds-configs/stages/$ENVIRONMENT)
    - ansible-playbook dds-configs/copy_configs.yml -i inventory/production -e ansible_host=$HOST_ADDR -e ansible_user=$HOST_USER -e ansible_ssh_pass=$HOST_PASS -e config_files=$config_files -e host_system_config=/provision/group_vars/production.yml
    - ansible-playbook init.yml -i inventory/production -e ansible_host=$HOST_ADDR -e ansible_user=$HOST_USER -e ansible_ssh_pass=$HOST_PASS
    - ansible-playbook update-services.yml -i inventory/production -e ansible_host=$HOST_ADDR -e ansible_user=$HOST_USER -e ansible_ssh_pass=$HOST_PASS -e image_tag=$CI_COMMIT_BRANCH -e online=yes
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      variables:
        ENVIRONMENT: "dev"
    - if: $CI_COMMIT_BRANCH == "staging"
      variables:
        ENVIRONMENT: "qa"

publish:
  stage: deploy
  variables:
    PUBLISH_REGISTRY_IMAGE: $PUBLIC_REGISTRY_IMAGE
  script:
    devspace build --disable-profile-activation
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when: on_success
