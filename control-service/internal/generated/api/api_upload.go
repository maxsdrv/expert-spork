// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * DDS Control HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

package api

import (
	"net/http"
	"strings"
)

// UploadAPIController binds http requests to an api service and writes the service results to the http response
type UploadAPIController struct {
	service UploadAPIServicer
	errorHandler ErrorHandler
}

// UploadAPIOption for how the controller is set up.
type UploadAPIOption func(*UploadAPIController)

// WithUploadAPIErrorHandler inject ErrorHandler into controller
func WithUploadAPIErrorHandler(h ErrorHandler) UploadAPIOption {
	return func(c *UploadAPIController) {
		c.errorHandler = h
	}
}

// NewUploadAPIController creates a default api controller
func NewUploadAPIController(s UploadAPIServicer, opts ...UploadAPIOption) *UploadAPIController {
	controller := &UploadAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UploadAPIController
func (c *UploadAPIController) Routes() Routes {
	return Routes{
		"UploadFirmware": Route{
			strings.ToUpper("Post"),
			"/api/v1/upload/firmware",
			c.UploadFirmware,
		},
		"UploadBackup": Route{
			strings.ToUpper("Post"),
			"/api/v1/upload/backup",
			c.UploadBackup,
		},
	}
}

// UploadFirmware - Upload firmware to the service
func (c *UploadAPIController) UploadFirmware(w http.ResponseWriter, r *http.Request) {
	xSessionIDParam := r.Header.Get("X-Session-ID")
	xContentRangeParam := r.Header.Get("X-Content-Range")
	contentDispositionParam := r.Header.Get("Content-Disposition")
	result, err := c.service.UploadFirmware(r.Context(), xSessionIDParam, xContentRangeParam, contentDispositionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UploadBackup - Upload a new backup
func (c *UploadAPIController) UploadBackup(w http.ResponseWriter, r *http.Request) {
	xSessionIDParam := r.Header.Get("X-Session-ID")
	xContentRangeParam := r.Header.Get("X-Content-Range")
	contentDispositionParam := r.Header.Get("Content-Disposition")
	result, err := c.service.UploadBackup(r.Context(), xSessionIDParam, xContentRangeParam, contentDispositionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
