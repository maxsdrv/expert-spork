// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * DDS Control HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

package api


import (
	"fmt"
)


// ServiceState : Service state
type ServiceState string

// List of ServiceState
const (
	SERVICESTATE_RUNNING ServiceState = "running"
	SERVICESTATE_RESTARTING ServiceState = "restarting"
	SERVICESTATE_EXITED ServiceState = "exited"
)

// AllowedServiceStateEnumValues is all the allowed values of ServiceState enum
var AllowedServiceStateEnumValues = []ServiceState{
	"running",
	"restarting",
	"exited",
}

// validServiceStateEnumValue provides a map of ServiceStates for fast verification of use input
var validServiceStateEnumValues = map[ServiceState]struct{}{
	"running": {},
	"restarting": {},
	"exited": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceState) IsValid() bool {
	_, ok := validServiceStateEnumValues[v]
	return ok
}

// NewServiceStateFromValue returns a pointer to a valid ServiceState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceStateFromValue(v string) (ServiceState, error) {
	ev := ServiceState(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ServiceState: valid values are %v", v, AllowedServiceStateEnumValues)
}



// AssertServiceStateRequired checks if the required fields are not zero-ed
func AssertServiceStateRequired(obj ServiceState) error {
	return nil
}

// AssertServiceStateConstraints checks if the values respects the defined constraints
func AssertServiceStateConstraints(obj ServiceState) error {
	return nil
}
