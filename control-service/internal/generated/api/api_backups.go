// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * DDS Control HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

package api

import (
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// BackupsAPIController binds http requests to an api service and writes the service results to the http response
type BackupsAPIController struct {
	service BackupsAPIServicer
	errorHandler ErrorHandler
}

// BackupsAPIOption for how the controller is set up.
type BackupsAPIOption func(*BackupsAPIController)

// WithBackupsAPIErrorHandler inject ErrorHandler into controller
func WithBackupsAPIErrorHandler(h ErrorHandler) BackupsAPIOption {
	return func(c *BackupsAPIController) {
		c.errorHandler = h
	}
}

// NewBackupsAPIController creates a default api controller
func NewBackupsAPIController(s BackupsAPIServicer, opts ...BackupsAPIOption) *BackupsAPIController {
	controller := &BackupsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BackupsAPIController
func (c *BackupsAPIController) Routes() Routes {
	return Routes{
		"ListBackups": Route{
			strings.ToUpper("Get"),
			"/api/v1/backups",
			c.ListBackups,
		},
		"GetBackupArchive": Route{
			strings.ToUpper("Get"),
			"/api/v1/backups/{name}",
			c.GetBackupArchive,
		},
	}
}

// ListBackups - List all backups
func (c *BackupsAPIController) ListBackups(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListBackups(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetBackupArchive - Download a specific backup
func (c *BackupsAPIController) GetBackupArchive(w http.ResponseWriter, r *http.Request) {
	nameParam := chi.URLParam(r, "name")
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	result, err := c.service.GetBackupArchive(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
