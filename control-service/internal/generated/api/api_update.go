// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * DDS Control HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"
)

// UpdateAPIController binds http requests to an api service and writes the service results to the http response
type UpdateAPIController struct {
	service UpdateAPIServicer
	errorHandler ErrorHandler
}

// UpdateAPIOption for how the controller is set up.
type UpdateAPIOption func(*UpdateAPIController)

// WithUpdateAPIErrorHandler inject ErrorHandler into controller
func WithUpdateAPIErrorHandler(h ErrorHandler) UpdateAPIOption {
	return func(c *UpdateAPIController) {
		c.errorHandler = h
	}
}

// NewUpdateAPIController creates a default api controller
func NewUpdateAPIController(s UpdateAPIServicer, opts ...UpdateAPIOption) *UpdateAPIController {
	controller := &UpdateAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UpdateAPIController
func (c *UpdateAPIController) Routes() Routes {
	return Routes{
		"UpdateFirmware": Route{
			strings.ToUpper("Post"),
			"/api/v1/update/firmware",
			c.UpdateFirmware,
		},
		"UpdateOnline": Route{
			strings.ToUpper("Post"),
			"/api/v1/update/online",
			c.UpdateOnline,
		},
		"UpdateRollback": Route{
			strings.ToUpper("Post"),
			"/api/v1/update/rollback",
			c.UpdateRollback,
		},
		"UpdateStatus": Route{
			strings.ToUpper("Get"),
			"/api/v1/update/status",
			c.UpdateStatus,
		},
		"UpdateCancel": Route{
			strings.ToUpper("Post"),
			"/api/v1/update/cancel",
			c.UpdateCancel,
		},
	}
}

// UpdateFirmware - Start update process of all services from uploaded firmware
func (c *UpdateAPIController) UpdateFirmware(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.UpdateFirmware(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateOnline - Start update process of all services or a specific service from the public registry
func (c *UpdateAPIController) UpdateOnline(w http.ResponseWriter, r *http.Request) {
	serviceUpdateParam := ServiceUpdate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&serviceUpdateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceUpdateRequired(serviceUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertServiceUpdateConstraints(serviceUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOnline(r.Context(), serviceUpdateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateRollback - Rollback last update
func (c *UpdateAPIController) UpdateRollback(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.UpdateRollback(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateStatus - Get last started update process status
func (c *UpdateAPIController) UpdateStatus(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.UpdateStatus(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateCancel - Cancel services updating process
func (c *UpdateAPIController) UpdateCancel(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.UpdateCancel(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
