// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * DDS Control HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

package api

import (
	"net/http"
	"strings"
)

// LogsAPIController binds http requests to an api service and writes the service results to the http response
type LogsAPIController struct {
	service LogsAPIServicer
	errorHandler ErrorHandler
}

// LogsAPIOption for how the controller is set up.
type LogsAPIOption func(*LogsAPIController)

// WithLogsAPIErrorHandler inject ErrorHandler into controller
func WithLogsAPIErrorHandler(h ErrorHandler) LogsAPIOption {
	return func(c *LogsAPIController) {
		c.errorHandler = h
	}
}

// NewLogsAPIController creates a default api controller
func NewLogsAPIController(s LogsAPIServicer, opts ...LogsAPIOption) *LogsAPIController {
	controller := &LogsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the LogsAPIController
func (c *LogsAPIController) Routes() Routes {
	return Routes{
		"ListLogs": Route{
			strings.ToUpper("Get"),
			"/api/v1/logs_list",
			c.ListLogs,
		},
		"GetLogs": Route{
			strings.ToUpper("Get"),
			"/api/v1/logs",
			c.GetLogs,
		},
	}
}

// ListLogs - Retrieve a list of log files within a date range
func (c *LogsAPIController) ListLogs(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var startParam string
	if query.Has("start") {
		param := string(query.Get("start"))

		startParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "start"}, nil)
		return
	}
	var endParam string
	if query.Has("end") {
		param := string(query.Get("end"))

		endParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "end"}, nil)
		return
	}
	result, err := c.service.ListLogs(r.Context(), startParam, endParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetLogs - 
func (c *LogsAPIController) GetLogs(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var logsListParam string
	if query.Has("logs_list") {
		param := query.Get("logs_list")

		logsListParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "logs_list"}, nil)
		return
	}
	result, err := c.service.GetLogs(r.Context(), logsListParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
