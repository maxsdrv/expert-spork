// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * DDS Control HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

package api

import (
"errors"
      "io"
    
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// BetaAPIController binds http requests to an api service and writes the service results to the http response
type BetaAPIController struct {
	service BetaAPIServicer
	errorHandler ErrorHandler
}

// BetaAPIOption for how the controller is set up.
type BetaAPIOption func(*BetaAPIController)

// WithBetaAPIErrorHandler inject ErrorHandler into controller
func WithBetaAPIErrorHandler(h ErrorHandler) BetaAPIOption {
	return func(c *BetaAPIController) {
		c.errorHandler = h
	}
}

// NewBetaAPIController creates a default api controller
func NewBetaAPIController(s BetaAPIServicer, opts ...BetaAPIOption) *BetaAPIController {
	controller := &BetaAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BetaAPIController
func (c *BetaAPIController) Routes() Routes {
	return Routes{
		"UploadFirmware": Route{
			strings.ToUpper("Post"),
			"/api/v1/upload/firmware",
			c.UploadFirmware,
		},
		"UploadBackup": Route{
			strings.ToUpper("Post"),
			"/api/v1/upload/backup",
			c.UploadBackup,
		},
		"UpdateFirmware": Route{
			strings.ToUpper("Post"),
			"/api/v1/update/firmware",
			c.UpdateFirmware,
		},
		"UpdateOnline": Route{
			strings.ToUpper("Post"),
			"/api/v1/update/online",
			c.UpdateOnline,
		},
		"UpdateRollback": Route{
			strings.ToUpper("Post"),
			"/api/v1/update/rollback",
			c.UpdateRollback,
		},
		"UpdateStatus": Route{
			strings.ToUpper("Get"),
			"/api/v1/update/status",
			c.UpdateStatus,
		},
		"UpdateCancel": Route{
			strings.ToUpper("Post"),
			"/api/v1/update/cancel",
			c.UpdateCancel,
		},
		"ListServices": Route{
			strings.ToUpper("Get"),
			"/api/v1/services",
			c.ListServices,
		},
		"SetServiceState": Route{
			strings.ToUpper("Post"),
			"/api/v1/services/set_state",
			c.SetServiceState,
		},
		"GetServicesVersions": Route{
			strings.ToUpper("Get"),
			"/api/v1/services/get_versions",
			c.GetServicesVersions,
		},
		"ListLogs": Route{
			strings.ToUpper("Get"),
			"/api/v1/logs_list",
			c.ListLogs,
		},
		"GetLogs": Route{
			strings.ToUpper("Get"),
			"/api/v1/logs",
			c.GetLogs,
		},
		"GetNtpServers": Route{
			strings.ToUpper("Get"),
			"/api/v1/time/get_ntp_servers",
			c.GetNtpServers,
		},
		"SetNtpServers": Route{
			strings.ToUpper("Post"),
			"/api/v1/time/set_ntp_servers",
			c.SetNtpServers,
		},
		"GetNtpSync": Route{
			strings.ToUpper("Get"),
			"/api/v1/time/get_ntp_sync",
			c.GetNtpSync,
		},
		"SetNtpSync": Route{
			strings.ToUpper("Post"),
			"/api/v1/time/set_ntp_sync",
			c.SetNtpSync,
		},
		"SetSystemTime": Route{
			strings.ToUpper("Post"),
			"/api/v1/time/set_time",
			c.SetSystemTime,
		},
		"GetSystemTime": Route{
			strings.ToUpper("Get"),
			"/api/v1/time/get_time",
			c.GetSystemTime,
		},
		"GetNetworkSettings": Route{
			strings.ToUpper("Get"),
			"/api/v1/network/get_settings",
			c.GetNetworkSettings,
		},
		"SetNetworkSettings": Route{
			strings.ToUpper("Post"),
			"/api/v1/network/set_settings",
			c.SetNetworkSettings,
		},
		"GetConfig": Route{
			strings.ToUpper("Get"),
			"/api/v1/config/get_config",
			c.GetConfig,
		},
		"SetConfig": Route{
			strings.ToUpper("Post"),
			"/api/v1/config/set_config",
			c.SetConfig,
		},
		"Metrics": Route{
			strings.ToUpper("Get"),
			"/api/v1/info/metrics",
			c.Metrics,
		},
		"ListBackups": Route{
			strings.ToUpper("Get"),
			"/api/v1/backups",
			c.ListBackups,
		},
		"GetBackupArchive": Route{
			strings.ToUpper("Get"),
			"/api/v1/backups/{name}",
			c.GetBackupArchive,
		},
		"Reboot": Route{
			strings.ToUpper("Post"),
			"/api/v1/system/reboot",
			c.Reboot,
		},
		"GetRebootStatus": Route{
			strings.ToUpper("Get"),
			"/api/v1/system/reboot_status",
			c.GetRebootStatus,
		},
		"ShutdownSystem": Route{
			strings.ToUpper("Post"),
			"/api/v1/system/shutdown",
			c.ShutdownSystem,
		},
	}
}

// UploadFirmware - Upload firmware to the service
func (c *BetaAPIController) UploadFirmware(w http.ResponseWriter, r *http.Request) {
	xSessionIDParam := r.Header.Get("X-Session-ID")
	xContentRangeParam := r.Header.Get("X-Content-Range")
	contentDispositionParam := r.Header.Get("Content-Disposition")
	result, err := c.service.UploadFirmware(r.Context(), xSessionIDParam, xContentRangeParam, contentDispositionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UploadBackup - Upload a new backup
func (c *BetaAPIController) UploadBackup(w http.ResponseWriter, r *http.Request) {
	xSessionIDParam := r.Header.Get("X-Session-ID")
	xContentRangeParam := r.Header.Get("X-Content-Range")
	contentDispositionParam := r.Header.Get("Content-Disposition")
	result, err := c.service.UploadBackup(r.Context(), xSessionIDParam, xContentRangeParam, contentDispositionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateFirmware - Start update process of all services from uploaded firmware
func (c *BetaAPIController) UpdateFirmware(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.UpdateFirmware(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateOnline - Start update process of all services or a specific service from the public registry
func (c *BetaAPIController) UpdateOnline(w http.ResponseWriter, r *http.Request) {
	serviceUpdateParam := ServiceUpdate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&serviceUpdateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceUpdateRequired(serviceUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertServiceUpdateConstraints(serviceUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOnline(r.Context(), serviceUpdateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateRollback - Rollback last update
func (c *BetaAPIController) UpdateRollback(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.UpdateRollback(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateStatus - Get last started update process status
func (c *BetaAPIController) UpdateStatus(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.UpdateStatus(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// UpdateCancel - Cancel services updating process
func (c *BetaAPIController) UpdateCancel(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.UpdateCancel(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListServices - Get services list
func (c *BetaAPIController) ListServices(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListServices(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// SetServiceState - Set state of a service
func (c *BetaAPIController) SetServiceState(w http.ResponseWriter, r *http.Request) {
	setServiceStateRequestParam := SetServiceStateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setServiceStateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetServiceStateRequestRequired(setServiceStateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetServiceStateRequestConstraints(setServiceStateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetServiceState(r.Context(), setServiceStateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetServicesVersions - Get available services versions
func (c *BetaAPIController) GetServicesVersions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetServicesVersions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListLogs - Retrieve a list of log files within a date range
func (c *BetaAPIController) ListLogs(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var startParam string
	if query.Has("start") {
		param := string(query.Get("start"))

		startParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "start"}, nil)
		return
	}
	var endParam string
	if query.Has("end") {
		param := string(query.Get("end"))

		endParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "end"}, nil)
		return
	}
	result, err := c.service.ListLogs(r.Context(), startParam, endParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetLogs - 
func (c *BetaAPIController) GetLogs(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var logsListParam string
	if query.Has("logs_list") {
		param := query.Get("logs_list")

		logsListParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "logs_list"}, nil)
		return
	}
	result, err := c.service.GetLogs(r.Context(), logsListParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetNtpServers - Get current NTP servers
func (c *BetaAPIController) GetNtpServers(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetNtpServers(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// SetNtpServers - Set NTP servers
func (c *BetaAPIController) SetNtpServers(w http.ResponseWriter, r *http.Request) {
	ntpServersParam := NtpServers{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&ntpServersParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNtpServersRequired(ntpServersParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertNtpServersConstraints(ntpServersParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetNtpServers(r.Context(), ntpServersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetNtpSync - Get current NTP synchronization state
func (c *BetaAPIController) GetNtpSync(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetNtpSync(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// SetNtpSync - Set NTP synchronization on/off
func (c *BetaAPIController) SetNtpSync(w http.ResponseWriter, r *http.Request) {
	ntpSyncStateParam := NtpSyncState{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&ntpSyncStateParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNtpSyncStateRequired(ntpSyncStateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertNtpSyncStateConstraints(ntpSyncStateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetNtpSync(r.Context(), ntpSyncStateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// SetSystemTime - Set system time
func (c *BetaAPIController) SetSystemTime(w http.ResponseWriter, r *http.Request) {
	systemTimeParam := SystemTime{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&systemTimeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSystemTimeRequired(systemTimeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSystemTimeConstraints(systemTimeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetSystemTime(r.Context(), systemTimeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetSystemTime - Get current system time
func (c *BetaAPIController) GetSystemTime(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetSystemTime(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetNetworkSettings - Get network settings
func (c *BetaAPIController) GetNetworkSettings(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetNetworkSettings(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// SetNetworkSettings - Set network settings
func (c *BetaAPIController) SetNetworkSettings(w http.ResponseWriter, r *http.Request) {
	networkSettingsParam := NetworkSettings{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&networkSettingsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNetworkSettingsRequired(networkSettingsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertNetworkSettingsConstraints(networkSettingsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetNetworkSettings(r.Context(), networkSettingsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetConfig - Get configuration
func (c *BetaAPIController) GetConfig(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var type_Param ConfigType
	if query.Has("type") {
		param := ConfigType(query.Get("type"))

		type_Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "type"}, nil)
		return
	}
	result, err := c.service.GetConfig(r.Context(), type_Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// SetConfig - Set configuration
func (c *BetaAPIController) SetConfig(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var type_Param ConfigType
	if query.Has("type") {
		param := ConfigType(query.Get("type"))

		type_Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "type"}, nil)
		return
	}
	configFileDataParam := ConfigFileData{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&configFileDataParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConfigFileDataRequired(configFileDataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertConfigFileDataConstraints(configFileDataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetConfig(r.Context(), type_Param, configFileDataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// Metrics - Get system metrics
func (c *BetaAPIController) Metrics(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.Metrics(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ListBackups - List all backups
func (c *BetaAPIController) ListBackups(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListBackups(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetBackupArchive - Download a specific backup
func (c *BetaAPIController) GetBackupArchive(w http.ResponseWriter, r *http.Request) {
	nameParam := chi.URLParam(r, "name")
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	result, err := c.service.GetBackupArchive(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// Reboot - System reboot
func (c *BetaAPIController) Reboot(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.Reboot(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetRebootStatus - Get the current reboot status
func (c *BetaAPIController) GetRebootStatus(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetRebootStatus(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// ShutdownSystem - Shutdown the system
func (c *BetaAPIController) ShutdownSystem(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ShutdownSystem(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
