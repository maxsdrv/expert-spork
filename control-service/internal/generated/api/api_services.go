// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * DDS Control HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"
)

// ServicesAPIController binds http requests to an api service and writes the service results to the http response
type ServicesAPIController struct {
	service ServicesAPIServicer
	errorHandler ErrorHandler
}

// ServicesAPIOption for how the controller is set up.
type ServicesAPIOption func(*ServicesAPIController)

// WithServicesAPIErrorHandler inject ErrorHandler into controller
func WithServicesAPIErrorHandler(h ErrorHandler) ServicesAPIOption {
	return func(c *ServicesAPIController) {
		c.errorHandler = h
	}
}

// NewServicesAPIController creates a default api controller
func NewServicesAPIController(s ServicesAPIServicer, opts ...ServicesAPIOption) *ServicesAPIController {
	controller := &ServicesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ServicesAPIController
func (c *ServicesAPIController) Routes() Routes {
	return Routes{
		"ListServices": Route{
			strings.ToUpper("Get"),
			"/api/v1/services",
			c.ListServices,
		},
		"SetServiceState": Route{
			strings.ToUpper("Post"),
			"/api/v1/services/set_state",
			c.SetServiceState,
		},
		"GetServicesVersions": Route{
			strings.ToUpper("Get"),
			"/api/v1/services/get_versions",
			c.GetServicesVersions,
		},
	}
}

// ListServices - Get services list
func (c *ServicesAPIController) ListServices(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListServices(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// SetServiceState - Set state of a service
func (c *ServicesAPIController) SetServiceState(w http.ResponseWriter, r *http.Request) {
	setServiceStateRequestParam := SetServiceStateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setServiceStateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetServiceStateRequestRequired(setServiceStateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetServiceStateRequestConstraints(setServiceStateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetServiceState(r.Context(), setServiceStateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetServicesVersions - Get available services versions
func (c *ServicesAPIController) GetServicesVersions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetServicesVersions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
