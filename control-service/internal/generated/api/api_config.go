// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * DDS Control HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

package api

import (
"errors"
      "io"
    
	"encoding/json"
	"net/http"
	"strings"
)

// ConfigAPIController binds http requests to an api service and writes the service results to the http response
type ConfigAPIController struct {
	service ConfigAPIServicer
	errorHandler ErrorHandler
}

// ConfigAPIOption for how the controller is set up.
type ConfigAPIOption func(*ConfigAPIController)

// WithConfigAPIErrorHandler inject ErrorHandler into controller
func WithConfigAPIErrorHandler(h ErrorHandler) ConfigAPIOption {
	return func(c *ConfigAPIController) {
		c.errorHandler = h
	}
}

// NewConfigAPIController creates a default api controller
func NewConfigAPIController(s ConfigAPIServicer, opts ...ConfigAPIOption) *ConfigAPIController {
	controller := &ConfigAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ConfigAPIController
func (c *ConfigAPIController) Routes() Routes {
	return Routes{
		"GetNtpServers": Route{
			strings.ToUpper("Get"),
			"/api/v1/time/get_ntp_servers",
			c.GetNtpServers,
		},
		"SetNtpServers": Route{
			strings.ToUpper("Post"),
			"/api/v1/time/set_ntp_servers",
			c.SetNtpServers,
		},
		"GetNtpSync": Route{
			strings.ToUpper("Get"),
			"/api/v1/time/get_ntp_sync",
			c.GetNtpSync,
		},
		"SetNtpSync": Route{
			strings.ToUpper("Post"),
			"/api/v1/time/set_ntp_sync",
			c.SetNtpSync,
		},
		"SetSystemTime": Route{
			strings.ToUpper("Post"),
			"/api/v1/time/set_time",
			c.SetSystemTime,
		},
		"GetSystemTime": Route{
			strings.ToUpper("Get"),
			"/api/v1/time/get_time",
			c.GetSystemTime,
		},
		"GetNetworkSettings": Route{
			strings.ToUpper("Get"),
			"/api/v1/network/get_settings",
			c.GetNetworkSettings,
		},
		"SetNetworkSettings": Route{
			strings.ToUpper("Post"),
			"/api/v1/network/set_settings",
			c.SetNetworkSettings,
		},
		"GetConfig": Route{
			strings.ToUpper("Get"),
			"/api/v1/config/get_config",
			c.GetConfig,
		},
		"SetConfig": Route{
			strings.ToUpper("Post"),
			"/api/v1/config/set_config",
			c.SetConfig,
		},
	}
}

// GetNtpServers - Get current NTP servers
func (c *ConfigAPIController) GetNtpServers(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetNtpServers(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// SetNtpServers - Set NTP servers
func (c *ConfigAPIController) SetNtpServers(w http.ResponseWriter, r *http.Request) {
	ntpServersParam := NtpServers{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&ntpServersParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNtpServersRequired(ntpServersParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertNtpServersConstraints(ntpServersParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetNtpServers(r.Context(), ntpServersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetNtpSync - Get current NTP synchronization state
func (c *ConfigAPIController) GetNtpSync(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetNtpSync(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// SetNtpSync - Set NTP synchronization on/off
func (c *ConfigAPIController) SetNtpSync(w http.ResponseWriter, r *http.Request) {
	ntpSyncStateParam := NtpSyncState{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&ntpSyncStateParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNtpSyncStateRequired(ntpSyncStateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertNtpSyncStateConstraints(ntpSyncStateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetNtpSync(r.Context(), ntpSyncStateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// SetSystemTime - Set system time
func (c *ConfigAPIController) SetSystemTime(w http.ResponseWriter, r *http.Request) {
	systemTimeParam := SystemTime{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&systemTimeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSystemTimeRequired(systemTimeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSystemTimeConstraints(systemTimeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetSystemTime(r.Context(), systemTimeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetSystemTime - Get current system time
func (c *ConfigAPIController) GetSystemTime(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetSystemTime(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetNetworkSettings - Get network settings
func (c *ConfigAPIController) GetNetworkSettings(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetNetworkSettings(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// SetNetworkSettings - Set network settings
func (c *ConfigAPIController) SetNetworkSettings(w http.ResponseWriter, r *http.Request) {
	networkSettingsParam := NetworkSettings{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&networkSettingsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNetworkSettingsRequired(networkSettingsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertNetworkSettingsConstraints(networkSettingsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetNetworkSettings(r.Context(), networkSettingsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// GetConfig - Get configuration
func (c *ConfigAPIController) GetConfig(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var type_Param ConfigType
	if query.Has("type") {
		param := ConfigType(query.Get("type"))

		type_Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "type"}, nil)
		return
	}
	result, err := c.service.GetConfig(r.Context(), type_Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// SetConfig - Set configuration
func (c *ConfigAPIController) SetConfig(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var type_Param ConfigType
	if query.Has("type") {
		param := ConfigType(query.Get("type"))

		type_Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "type"}, nil)
		return
	}
	configFileDataParam := ConfigFileData{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&configFileDataParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConfigFileDataRequired(configFileDataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertConfigFileDataConstraints(configFileDataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetConfig(r.Context(), type_Param, configFileDataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
