#!/bin/sh

set -e

. "scripts/common.sh"

get_net_iface() {
  host ip route show to default | cut -d' ' -f5
}

# shellcheck disable=SC2153
echo "DDS bootstrap version $VERSION"

show_help()
{
  echo "Usage:"
  echo "$0 [options]"
  echo ""
  echo "Options:"
  echo "  --version ver"
  echo "        DDS version (default: latest)"
  echo "  --oem-brand tamerlan|radariq"
  echo "        OEM brand (default: tamerlan)"
  echo "  --log_level INFO|DEBUG|TRACE"
  echo "        logging level (default: DEBUG)"
  echo "  --net dev"
  echo "        network interface (default: auto)"
  echo "  -- device [device] [...]"
  echo "        devices configurations"
  echo "  -h, --help"
  echo "        show this help message and exit"
  echo ""
}

while [ $# -gt 0 ]; do
  case "$1" in
    --version)
      version="$2"
      shift 2
      ;;
    --oem-brand)
      brand="$2"
      shift 2
      ;;
    --log_level)
      log_level="$2"
      shift 2
      ;;
    --net)
      net="$2"
      shift 2
      ;;
    --)
      shift
      export "$@"
      break
      ;;
    -h|--help)
      show_help
      exit
      ;;
    -*|--*)
      echo "Unknown option: $1"
      show_help
      exit 1
      ;;
    *)
  esac
done

[ -z "$version" ] && version="latest"
[ -z "$net" ] && net=$(get_net_iface)

devices=$(env | grep "_DEVICES" || true)
if [ -n "$devices" ]; then
  host mkdir -p "$data_root/configs"
  echo "$devices" | host tee "$data_root/configs/devices.env" > /dev/null
else
  if ! devices=$(host cat "$data_root/configs/devices.env"); then
    echo "Can't find devices config file '$data_root/configs/devices.env'. \
     Either *_DEVICES env vars must be defined or devices config file must exists"
  fi
fi

echo "Installing DDS version $brand $version with settings:"
echo "  logging level: ${log_level:-<default>}"
echo "  network interface: $net"
echo "  data root: $data_root"
echo "Devices configuration:"
host cat "$data_root/configs/devices.env"
echo

echo "System configuration:"
echo "net_if: $net" | host tee "$data_root/configs/system.yaml"
[ -n "$brand" ] && echo "brand: $brand" | host tee -a "$data_root/configs/system.yaml"
[ -n "$log_level" ] && echo "log_level: $log_level" | host tee -a "$data_root/configs/system.yaml"
echo

host cat "$data_root/configs/system.yaml" > "/provision/group_vars/production.yml"
run_playbook init.yml
run_playbook update-services.yml -e "image_tag=$version" -e "online=yes"

echo "Installation completed successfully"
