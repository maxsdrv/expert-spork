/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceHw_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceHw_info::OAServiceHw_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceHw_info::OAServiceHw_info() {
    this->initializeModel();
}

OAServiceHw_info::~OAServiceHw_info() {}

void OAServiceHw_info::initializeModel() {

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_voltage_isSet = false;
    m_voltage_isValid = false;

    m_current_isSet = false;
    m_current_isValid = false;
}

void OAServiceHw_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceHw_info::fromJsonObject(QJsonObject json) {

    m_temperature_isValid = ::OAService::fromJsonValue(m_temperature, json[QString("temperature")]);
    m_temperature_isSet = !json[QString("temperature")].isNull() && m_temperature_isValid;

    m_voltage_isValid = ::OAService::fromJsonValue(m_voltage, json[QString("voltage")]);
    m_voltage_isSet = !json[QString("voltage")].isNull() && m_voltage_isValid;

    m_current_isValid = ::OAService::fromJsonValue(m_current, json[QString("current")]);
    m_current_isSet = !json[QString("current")].isNull() && m_current_isValid;
}

QString OAServiceHw_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceHw_info::asJsonObject() const {
    QJsonObject obj;
    if (m_temperature_isSet) {
        obj.insert(QString("temperature"), ::OAService::toJsonValue(m_temperature));
    }
    if (m_voltage_isSet) {
        obj.insert(QString("voltage"), ::OAService::toJsonValue(m_voltage));
    }
    if (m_current_isSet) {
        obj.insert(QString("current"), ::OAService::toJsonValue(m_current));
    }
    return obj;
}

QString OAServiceHw_info::getTemperature() const {
    return m_temperature;
}
void OAServiceHw_info::setTemperature(const QString &temperature) {
    m_temperature = temperature;
    m_temperature_isSet = true;
}

bool OAServiceHw_info::is_temperature_Set() const{
    return m_temperature_isSet;
}

bool OAServiceHw_info::is_temperature_Valid() const{
    return m_temperature_isValid;
}

QString OAServiceHw_info::getVoltage() const {
    return m_voltage;
}
void OAServiceHw_info::setVoltage(const QString &voltage) {
    m_voltage = voltage;
    m_voltage_isSet = true;
}

bool OAServiceHw_info::is_voltage_Set() const{
    return m_voltage_isSet;
}

bool OAServiceHw_info::is_voltage_Valid() const{
    return m_voltage_isValid;
}

QString OAServiceHw_info::getCurrent() const {
    return m_current;
}
void OAServiceHw_info::setCurrent(const QString &current) {
    m_current = current;
    m_current_isSet = true;
}

bool OAServiceHw_info::is_current_Set() const{
    return m_current_isSet;
}

bool OAServiceHw_info::is_current_Valid() const{
    return m_current_isValid;
}

bool OAServiceHw_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_temperature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voltage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceHw_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OAService
