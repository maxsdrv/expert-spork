/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceTarget_list.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceTarget_list::OAServiceTarget_list(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceTarget_list::OAServiceTarget_list() {
    this->initializeModel();
}

OAServiceTarget_list::~OAServiceTarget_list() {}

void OAServiceTarget_list::initializeModel() {

    m_targets_isSet = false;
    m_targets_isValid = false;
}

void OAServiceTarget_list::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceTarget_list::fromJsonObject(QJsonObject json) {

    m_targets_isValid = ::OAService::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;
}

QString OAServiceTarget_list::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceTarget_list::asJsonObject() const {
    QJsonObject obj;
    if (m_targets.size() > 0) {
        obj.insert(QString("targets"), ::OAService::toJsonValue(m_targets));
    }
    return obj;
}

QList<OAServiceTarget_data> OAServiceTarget_list::getTargets() const {
    return m_targets;
}
void OAServiceTarget_list::setTargets(const QList<OAServiceTarget_data> &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAServiceTarget_list::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAServiceTarget_list::is_targets_Valid() const{
    return m_targets_isValid;
}

bool OAServiceTarget_list::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceTarget_list::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_targets_isValid && true;
}

} // namespace OAService
