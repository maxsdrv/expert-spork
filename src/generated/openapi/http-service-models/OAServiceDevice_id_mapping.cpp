/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceDevice_id_mapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceDevice_id_mapping::OAServiceDevice_id_mapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceDevice_id_mapping::OAServiceDevice_id_mapping() {
    this->initializeModel();
}

OAServiceDevice_id_mapping::~OAServiceDevice_id_mapping() {}

void OAServiceDevice_id_mapping::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_r_class_isSet = false;
    m_r_class_isValid = false;
}

void OAServiceDevice_id_mapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceDevice_id_mapping::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OAService::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_fingerprint_isValid = ::OAService::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_r_class_isValid = ::OAService::fromJsonValue(m_r_class, json[QString("class")]);
    m_r_class_isSet = !json[QString("class")].isNull() && m_r_class_isValid;
}

QString OAServiceDevice_id_mapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceDevice_id_mapping::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OAService::toJsonValue(m_id));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OAService::toJsonValue(m_fingerprint));
    }
    if (m_r_class_isSet) {
        obj.insert(QString("class"), ::OAService::toJsonValue(m_r_class));
    }
    return obj;
}

QString OAServiceDevice_id_mapping::getId() const {
    return m_id;
}
void OAServiceDevice_id_mapping::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAServiceDevice_id_mapping::is_id_Set() const{
    return m_id_isSet;
}

bool OAServiceDevice_id_mapping::is_id_Valid() const{
    return m_id_isValid;
}

QString OAServiceDevice_id_mapping::getFingerprint() const {
    return m_fingerprint;
}
void OAServiceDevice_id_mapping::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAServiceDevice_id_mapping::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAServiceDevice_id_mapping::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

QString OAServiceDevice_id_mapping::getRClass() const {
    return m_r_class;
}
void OAServiceDevice_id_mapping::setRClass(const QString &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAServiceDevice_id_mapping::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAServiceDevice_id_mapping::is_r_class_Valid() const{
    return m_r_class_isValid;
}

bool OAServiceDevice_id_mapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_class_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceDevice_id_mapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_fingerprint_isValid && m_r_class_isValid && true;
}

} // namespace OAService
