/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceTrack_point.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceTrack_point::OAServiceTrack_point(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceTrack_point::OAServiceTrack_point() {
    this->initializeModel();
}

OAServiceTrack_point::~OAServiceTrack_point() {}

void OAServiceTrack_point::initializeModel() {

    m_coordinate_isSet = false;
    m_coordinate_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAServiceTrack_point::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceTrack_point::fromJsonObject(QJsonObject json) {

    m_coordinate_isValid = ::OAService::fromJsonValue(m_coordinate, json[QString("coordinate")]);
    m_coordinate_isSet = !json[QString("coordinate")].isNull() && m_coordinate_isValid;

    m_direction_isValid = ::OAService::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_timestamp_isValid = ::OAService::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAServiceTrack_point::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceTrack_point::asJsonObject() const {
    QJsonObject obj;
    if (m_coordinate.isSet()) {
        obj.insert(QString("coordinate"), ::OAService::toJsonValue(m_coordinate));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("direction"), ::OAService::toJsonValue(m_direction));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OAService::toJsonValue(m_timestamp));
    }
    return obj;
}

OAServiceGeo_coordinate OAServiceTrack_point::getCoordinate() const {
    return m_coordinate;
}
void OAServiceTrack_point::setCoordinate(const OAServiceGeo_coordinate &coordinate) {
    m_coordinate = coordinate;
    m_coordinate_isSet = true;
}

bool OAServiceTrack_point::is_coordinate_Set() const{
    return m_coordinate_isSet;
}

bool OAServiceTrack_point::is_coordinate_Valid() const{
    return m_coordinate_isValid;
}

OAServiceGeo_direction OAServiceTrack_point::getDirection() const {
    return m_direction;
}
void OAServiceTrack_point::setDirection(const OAServiceGeo_direction &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAServiceTrack_point::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAServiceTrack_point::is_direction_Valid() const{
    return m_direction_isValid;
}

QDateTime OAServiceTrack_point::getTimestamp() const {
    return m_timestamp;
}
void OAServiceTrack_point::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAServiceTrack_point::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAServiceTrack_point::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAServiceTrack_point::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coordinate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceTrack_point::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_timestamp_isValid && true;
}

} // namespace OAService
