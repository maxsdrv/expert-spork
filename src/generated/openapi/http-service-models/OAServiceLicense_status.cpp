/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceLicense_status.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceLicense_status::OAServiceLicense_status(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceLicense_status::OAServiceLicense_status() {
    this->initializeModel();
}

OAServiceLicense_status::~OAServiceLicense_status() {}

void OAServiceLicense_status::initializeModel() {

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;
}

void OAServiceLicense_status::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceLicense_status::fromJsonObject(QJsonObject json) {

    m_r_valid_isValid = ::OAService::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;

    m_description_isValid = ::OAService::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expiry_date_isValid = ::OAService::fromJsonValue(m_expiry_date, json[QString("expiry_date")]);
    m_expiry_date_isSet = !json[QString("expiry_date")].isNull() && m_expiry_date_isValid;

    m_signature_isValid = ::OAService::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;
}

QString OAServiceLicense_status::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceLicense_status::asJsonObject() const {
    QJsonObject obj;
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OAService::toJsonValue(m_r_valid));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OAService::toJsonValue(m_description));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("expiry_date"), ::OAService::toJsonValue(m_expiry_date));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OAService::toJsonValue(m_signature));
    }
    return obj;
}

bool OAServiceLicense_status::isRValid() const {
    return m_r_valid;
}
void OAServiceLicense_status::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAServiceLicense_status::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAServiceLicense_status::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

QString OAServiceLicense_status::getDescription() const {
    return m_description;
}
void OAServiceLicense_status::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAServiceLicense_status::is_description_Set() const{
    return m_description_isSet;
}

bool OAServiceLicense_status::is_description_Valid() const{
    return m_description_isValid;
}

QString OAServiceLicense_status::getExpiryDate() const {
    return m_expiry_date;
}
void OAServiceLicense_status::setExpiryDate(const QString &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAServiceLicense_status::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAServiceLicense_status::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

QString OAServiceLicense_status::getSignature() const {
    return m_signature;
}
void OAServiceLicense_status::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAServiceLicense_status::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAServiceLicense_status::is_signature_Valid() const{
    return m_signature_isValid;
}

bool OAServiceLicense_status::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceLicense_status::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_valid_isValid && m_description_isValid && m_expiry_date_isValid && m_signature_isValid && true;
}

} // namespace OAService
