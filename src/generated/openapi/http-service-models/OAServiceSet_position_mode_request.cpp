/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceSet_position_mode_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceSet_position_mode_request::OAServiceSet_position_mode_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceSet_position_mode_request::OAServiceSet_position_mode_request() {
    this->initializeModel();
}

OAServiceSet_position_mode_request::~OAServiceSet_position_mode_request() {}

void OAServiceSet_position_mode_request::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_position_mode_isSet = false;
    m_position_mode_isValid = false;
}

void OAServiceSet_position_mode_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceSet_position_mode_request::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OAService::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_position_mode_isValid = ::OAService::fromJsonValue(m_position_mode, json[QString("position_mode")]);
    m_position_mode_isSet = !json[QString("position_mode")].isNull() && m_position_mode_isValid;
}

QString OAServiceSet_position_mode_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceSet_position_mode_request::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OAService::toJsonValue(m_id));
    }
    if (m_position_mode.isSet()) {
        obj.insert(QString("position_mode"), ::OAService::toJsonValue(m_position_mode));
    }
    return obj;
}

QString OAServiceSet_position_mode_request::getId() const {
    return m_id;
}
void OAServiceSet_position_mode_request::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAServiceSet_position_mode_request::is_id_Set() const{
    return m_id_isSet;
}

bool OAServiceSet_position_mode_request::is_id_Valid() const{
    return m_id_isValid;
}

OAServiceGeo_position_mode OAServiceSet_position_mode_request::getPositionMode() const {
    return m_position_mode;
}
void OAServiceSet_position_mode_request::setPositionMode(const OAServiceGeo_position_mode &position_mode) {
    m_position_mode = position_mode;
    m_position_mode_isSet = true;
}

bool OAServiceSet_position_mode_request::is_position_mode_Set() const{
    return m_position_mode_isSet;
}

bool OAServiceSet_position_mode_request::is_position_mode_Valid() const{
    return m_position_mode_isValid;
}

bool OAServiceSet_position_mode_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceSet_position_mode_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_position_mode_isValid && true;
}

} // namespace OAService
