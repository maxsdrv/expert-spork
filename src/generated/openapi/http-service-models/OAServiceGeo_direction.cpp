/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceGeo_direction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceGeo_direction::OAServiceGeo_direction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceGeo_direction::OAServiceGeo_direction() {
    this->initializeModel();
}

OAServiceGeo_direction::~OAServiceGeo_direction() {}

void OAServiceGeo_direction::initializeModel() {

    m_bearing_isSet = false;
    m_bearing_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_elevation_isSet = false;
    m_elevation_isValid = false;
}

void OAServiceGeo_direction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceGeo_direction::fromJsonObject(QJsonObject json) {

    m_bearing_isValid = ::OAService::fromJsonValue(m_bearing, json[QString("bearing")]);
    m_bearing_isSet = !json[QString("bearing")].isNull() && m_bearing_isValid;

    m_distance_isValid = ::OAService::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_elevation_isValid = ::OAService::fromJsonValue(m_elevation, json[QString("elevation")]);
    m_elevation_isSet = !json[QString("elevation")].isNull() && m_elevation_isValid;
}

QString OAServiceGeo_direction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceGeo_direction::asJsonObject() const {
    QJsonObject obj;
    if (m_bearing_isSet) {
        obj.insert(QString("bearing"), ::OAService::toJsonValue(m_bearing));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OAService::toJsonValue(m_distance));
    }
    if (m_elevation_isSet) {
        obj.insert(QString("elevation"), ::OAService::toJsonValue(m_elevation));
    }
    return obj;
}

double OAServiceGeo_direction::getBearing() const {
    return m_bearing;
}
void OAServiceGeo_direction::setBearing(const double &bearing) {
    m_bearing = bearing;
    m_bearing_isSet = true;
}

bool OAServiceGeo_direction::is_bearing_Set() const{
    return m_bearing_isSet;
}

bool OAServiceGeo_direction::is_bearing_Valid() const{
    return m_bearing_isValid;
}

double OAServiceGeo_direction::getDistance() const {
    return m_distance;
}
void OAServiceGeo_direction::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAServiceGeo_direction::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAServiceGeo_direction::is_distance_Valid() const{
    return m_distance_isValid;
}

double OAServiceGeo_direction::getElevation() const {
    return m_elevation;
}
void OAServiceGeo_direction::setElevation(const double &elevation) {
    m_elevation = elevation;
    m_elevation_isSet = true;
}

bool OAServiceGeo_direction::is_elevation_Set() const{
    return m_elevation_isSet;
}

bool OAServiceGeo_direction::is_elevation_Valid() const{
    return m_elevation_isValid;
}

bool OAServiceGeo_direction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bearing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elevation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceGeo_direction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bearing_isValid && m_distance_isValid && true;
}

} // namespace OAService
