/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceJammer_list.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceJammer_list::OAServiceJammer_list(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceJammer_list::OAServiceJammer_list() {
    this->initializeModel();
}

OAServiceJammer_list::~OAServiceJammer_list() {}

void OAServiceJammer_list::initializeModel() {

    m_jammers_isSet = false;
    m_jammers_isValid = false;
}

void OAServiceJammer_list::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceJammer_list::fromJsonObject(QJsonObject json) {

    m_jammers_isValid = ::OAService::fromJsonValue(m_jammers, json[QString("jammers")]);
    m_jammers_isSet = !json[QString("jammers")].isNull() && m_jammers_isValid;
}

QString OAServiceJammer_list::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceJammer_list::asJsonObject() const {
    QJsonObject obj;
    if (m_jammers.size() > 0) {
        obj.insert(QString("jammers"), ::OAService::toJsonValue(m_jammers));
    }
    return obj;
}

QList<OAServiceJammer_info> OAServiceJammer_list::getJammers() const {
    return m_jammers;
}
void OAServiceJammer_list::setJammers(const QList<OAServiceJammer_info> &jammers) {
    m_jammers = jammers;
    m_jammers_isSet = true;
}

bool OAServiceJammer_list::is_jammers_Set() const{
    return m_jammers_isSet;
}

bool OAServiceJammer_list::is_jammers_Valid() const{
    return m_jammers_isValid;
}

bool OAServiceJammer_list::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_jammers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceJammer_list::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_jammers_isValid && true;
}

} // namespace OAService
