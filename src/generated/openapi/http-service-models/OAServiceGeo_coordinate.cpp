/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceGeo_coordinate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceGeo_coordinate::OAServiceGeo_coordinate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceGeo_coordinate::OAServiceGeo_coordinate() {
    this->initializeModel();
}

OAServiceGeo_coordinate::~OAServiceGeo_coordinate() {}

void OAServiceGeo_coordinate::initializeModel() {

    m_altitude_isSet = false;
    m_altitude_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;
}

void OAServiceGeo_coordinate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceGeo_coordinate::fromJsonObject(QJsonObject json) {

    m_altitude_isValid = ::OAService::fromJsonValue(m_altitude, json[QString("altitude")]);
    m_altitude_isSet = !json[QString("altitude")].isNull() && m_altitude_isValid;

    m_latitude_isValid = ::OAService::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OAService::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;
}

QString OAServiceGeo_coordinate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceGeo_coordinate::asJsonObject() const {
    QJsonObject obj;
    if (m_altitude_isSet) {
        obj.insert(QString("altitude"), ::OAService::toJsonValue(m_altitude));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OAService::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OAService::toJsonValue(m_longitude));
    }
    return obj;
}

double OAServiceGeo_coordinate::getAltitude() const {
    return m_altitude;
}
void OAServiceGeo_coordinate::setAltitude(const double &altitude) {
    m_altitude = altitude;
    m_altitude_isSet = true;
}

bool OAServiceGeo_coordinate::is_altitude_Set() const{
    return m_altitude_isSet;
}

bool OAServiceGeo_coordinate::is_altitude_Valid() const{
    return m_altitude_isValid;
}

double OAServiceGeo_coordinate::getLatitude() const {
    return m_latitude;
}
void OAServiceGeo_coordinate::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAServiceGeo_coordinate::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAServiceGeo_coordinate::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAServiceGeo_coordinate::getLongitude() const {
    return m_longitude;
}
void OAServiceGeo_coordinate::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAServiceGeo_coordinate::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAServiceGeo_coordinate::is_longitude_Valid() const{
    return m_longitude_isValid;
}

bool OAServiceGeo_coordinate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_altitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceGeo_coordinate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_latitude_isValid && m_longitude_isValid && true;
}

} // namespace OAService
