/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceTarget_data_position.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceTarget_data_position::OAServiceTarget_data_position(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceTarget_data_position::OAServiceTarget_data_position() {
    this->initializeModel();
}

OAServiceTarget_data_position::~OAServiceTarget_data_position() {}

void OAServiceTarget_data_position::initializeModel() {

    m_coordinate_isSet = false;
    m_coordinate_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;
}

void OAServiceTarget_data_position::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceTarget_data_position::fromJsonObject(QJsonObject json) {

    m_coordinate_isValid = ::OAService::fromJsonValue(m_coordinate, json[QString("coordinate")]);
    m_coordinate_isSet = !json[QString("coordinate")].isNull() && m_coordinate_isValid;

    m_source_id_isValid = ::OAService::fromJsonValue(m_source_id, json[QString("source_id")]);
    m_source_id_isSet = !json[QString("source_id")].isNull() && m_source_id_isValid;

    m_direction_isValid = ::OAService::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;
}

QString OAServiceTarget_data_position::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceTarget_data_position::asJsonObject() const {
    QJsonObject obj;
    if (m_coordinate.isSet()) {
        obj.insert(QString("coordinate"), ::OAService::toJsonValue(m_coordinate));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("source_id"), ::OAService::toJsonValue(m_source_id));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("direction"), ::OAService::toJsonValue(m_direction));
    }
    return obj;
}

OAServiceGeo_coordinate OAServiceTarget_data_position::getCoordinate() const {
    return m_coordinate;
}
void OAServiceTarget_data_position::setCoordinate(const OAServiceGeo_coordinate &coordinate) {
    m_coordinate = coordinate;
    m_coordinate_isSet = true;
}

bool OAServiceTarget_data_position::is_coordinate_Set() const{
    return m_coordinate_isSet;
}

bool OAServiceTarget_data_position::is_coordinate_Valid() const{
    return m_coordinate_isValid;
}

QString OAServiceTarget_data_position::getSourceId() const {
    return m_source_id;
}
void OAServiceTarget_data_position::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAServiceTarget_data_position::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAServiceTarget_data_position::is_source_id_Valid() const{
    return m_source_id_isValid;
}

OAServiceTarget_data_position_direction OAServiceTarget_data_position::getDirection() const {
    return m_direction;
}
void OAServiceTarget_data_position::setDirection(const OAServiceTarget_data_position_direction &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAServiceTarget_data_position::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAServiceTarget_data_position::is_direction_Valid() const{
    return m_direction_isValid;
}

bool OAServiceTarget_data_position::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coordinate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceTarget_data_position::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OAService
