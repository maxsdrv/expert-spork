/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqAbsolute_move.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqAbsolute_move::OARadarIqAbsolute_move(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqAbsolute_move::OARadarIqAbsolute_move() {
    this->initializeModel();
}

OARadarIqAbsolute_move::~OARadarIqAbsolute_move() {}

void OARadarIqAbsolute_move::initializeModel() {

    m_pan_isSet = false;
    m_pan_isValid = false;

    m_tilt_isSet = false;
    m_tilt_isValid = false;

    m_zoom_isSet = false;
    m_zoom_isValid = false;
}

void OARadarIqAbsolute_move::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqAbsolute_move::fromJsonObject(QJsonObject json) {

    m_pan_isValid = ::OARadarIq::fromJsonValue(m_pan, json[QString("pan")]);
    m_pan_isSet = !json[QString("pan")].isNull() && m_pan_isValid;

    m_tilt_isValid = ::OARadarIq::fromJsonValue(m_tilt, json[QString("tilt")]);
    m_tilt_isSet = !json[QString("tilt")].isNull() && m_tilt_isValid;

    m_zoom_isValid = ::OARadarIq::fromJsonValue(m_zoom, json[QString("zoom")]);
    m_zoom_isSet = !json[QString("zoom")].isNull() && m_zoom_isValid;
}

QString OARadarIqAbsolute_move::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqAbsolute_move::asJsonObject() const {
    QJsonObject obj;
    if (m_pan_isSet) {
        obj.insert(QString("pan"), ::OARadarIq::toJsonValue(m_pan));
    }
    if (m_tilt_isSet) {
        obj.insert(QString("tilt"), ::OARadarIq::toJsonValue(m_tilt));
    }
    if (m_zoom_isSet) {
        obj.insert(QString("zoom"), ::OARadarIq::toJsonValue(m_zoom));
    }
    return obj;
}

double OARadarIqAbsolute_move::getPan() const {
    return m_pan;
}
void OARadarIqAbsolute_move::setPan(const double &pan) {
    m_pan = pan;
    m_pan_isSet = true;
}

bool OARadarIqAbsolute_move::is_pan_Set() const{
    return m_pan_isSet;
}

bool OARadarIqAbsolute_move::is_pan_Valid() const{
    return m_pan_isValid;
}

double OARadarIqAbsolute_move::getTilt() const {
    return m_tilt;
}
void OARadarIqAbsolute_move::setTilt(const double &tilt) {
    m_tilt = tilt;
    m_tilt_isSet = true;
}

bool OARadarIqAbsolute_move::is_tilt_Set() const{
    return m_tilt_isSet;
}

bool OARadarIqAbsolute_move::is_tilt_Valid() const{
    return m_tilt_isValid;
}

double OARadarIqAbsolute_move::getZoom() const {
    return m_zoom;
}
void OARadarIqAbsolute_move::setZoom(const double &zoom) {
    m_zoom = zoom;
    m_zoom_isSet = true;
}

bool OARadarIqAbsolute_move::is_zoom_Set() const{
    return m_zoom_isSet;
}

bool OARadarIqAbsolute_move::is_zoom_Valid() const{
    return m_zoom_isValid;
}

bool OARadarIqAbsolute_move::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tilt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zoom_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqAbsolute_move::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pan_isValid && m_tilt_isValid && m_zoom_isValid && true;
}

} // namespace OARadarIq
