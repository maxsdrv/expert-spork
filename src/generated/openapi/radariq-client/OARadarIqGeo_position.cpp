/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqGeo_position.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqGeo_position::OARadarIqGeo_position(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqGeo_position::OARadarIqGeo_position() {
    this->initializeModel();
}

OARadarIqGeo_position::~OARadarIqGeo_position() {}

void OARadarIqGeo_position::initializeModel() {

    m_azimuth_isSet = false;
    m_azimuth_isValid = false;

    m_coordinate_isSet = false;
    m_coordinate_isValid = false;
}

void OARadarIqGeo_position::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqGeo_position::fromJsonObject(QJsonObject json) {

    m_azimuth_isValid = ::OARadarIq::fromJsonValue(m_azimuth, json[QString("azimuth")]);
    m_azimuth_isSet = !json[QString("azimuth")].isNull() && m_azimuth_isValid;

    m_coordinate_isValid = ::OARadarIq::fromJsonValue(m_coordinate, json[QString("coordinate")]);
    m_coordinate_isSet = !json[QString("coordinate")].isNull() && m_coordinate_isValid;
}

QString OARadarIqGeo_position::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqGeo_position::asJsonObject() const {
    QJsonObject obj;
    if (m_azimuth_isSet) {
        obj.insert(QString("azimuth"), ::OARadarIq::toJsonValue(m_azimuth));
    }
    if (m_coordinate.isSet()) {
        obj.insert(QString("coordinate"), ::OARadarIq::toJsonValue(m_coordinate));
    }
    return obj;
}

double OARadarIqGeo_position::getAzimuth() const {
    return m_azimuth;
}
void OARadarIqGeo_position::setAzimuth(const double &azimuth) {
    m_azimuth = azimuth;
    m_azimuth_isSet = true;
}

bool OARadarIqGeo_position::is_azimuth_Set() const{
    return m_azimuth_isSet;
}

bool OARadarIqGeo_position::is_azimuth_Valid() const{
    return m_azimuth_isValid;
}

OARadarIqGeo_coordinate OARadarIqGeo_position::getCoordinate() const {
    return m_coordinate;
}
void OARadarIqGeo_position::setCoordinate(const OARadarIqGeo_coordinate &coordinate) {
    m_coordinate = coordinate;
    m_coordinate_isSet = true;
}

bool OARadarIqGeo_position::is_coordinate_Set() const{
    return m_coordinate_isSet;
}

bool OARadarIqGeo_position::is_coordinate_Valid() const{
    return m_coordinate_isValid;
}

bool OARadarIqGeo_position::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azimuth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinate.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqGeo_position::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_azimuth_isValid && m_coordinate_isValid && true;
}

} // namespace OARadarIq
