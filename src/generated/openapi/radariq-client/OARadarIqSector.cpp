/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqSector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqSector::OARadarIqSector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqSector::OARadarIqSector() {
    this->initializeModel();
}

OARadarIqSector::~OARadarIqSector() {}

void OARadarIqSector::initializeModel() {

    m_zones_isSet = false;
    m_zones_isValid = false;
}

void OARadarIqSector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqSector::fromJsonObject(QJsonObject json) {

    m_zones_isValid = ::OARadarIq::fromJsonValue(m_zones, json[QString("zones")]);
    m_zones_isSet = !json[QString("zones")].isNull() && m_zones_isValid;
}

QString OARadarIqSector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqSector::asJsonObject() const {
    QJsonObject obj;
    if (m_zones.size() > 0) {
        obj.insert(QString("zones"), ::OARadarIq::toJsonValue(m_zones));
    }
    return obj;
}

QList<OARadarIqZone> OARadarIqSector::getZones() const {
    return m_zones;
}
void OARadarIqSector::setZones(const QList<OARadarIqZone> &zones) {
    m_zones = zones;
    m_zones_isSet = true;
}

bool OARadarIqSector::is_zones_Set() const{
    return m_zones_isSet;
}

bool OARadarIqSector::is_zones_Valid() const{
    return m_zones_isValid;
}

bool OARadarIqSector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_zones.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqSector::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_zones_isValid && true;
}

} // namespace OARadarIq
