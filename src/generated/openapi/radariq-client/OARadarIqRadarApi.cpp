/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqRadarApi.h"
#include "OARadarIqServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OARadarIq {

OARadarIqRadarApi::OARadarIqRadarApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OARadarIqRadarApi::~OARadarIqRadarApi() {
}

void OARadarIqRadarApi::initializeServerConfigs() {
    //Default server
    QList<OARadarIqServerConfiguration> defaultConf = QList<OARadarIqServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OARadarIqServerConfiguration(
    QUrl("http://127.0.0.1:18320/api/v1"),
    "No description provided",
    QMap<QString, OARadarIqServerVariable>()));
    _serverConfigs.insert("checkMonitoringMode", defaultConf);
    _serverIndices.insert("checkMonitoringMode", 0);
    _serverConfigs.insert("getPlayerSources", defaultConf);
    _serverIndices.insert("getPlayerSources", 0);
    _serverConfigs.insert("getRadarConnectionState", defaultConf);
    _serverIndices.insert("getRadarConnectionState", 0);
    _serverConfigs.insert("getRadarSettings", defaultConf);
    _serverIndices.insert("getRadarSettings", 0);
    _serverConfigs.insert("getRadarTelemetry", defaultConf);
    _serverIndices.insert("getRadarTelemetry", 0);
    _serverConfigs.insert("getRadarTryToConnect", defaultConf);
    _serverIndices.insert("getRadarTryToConnect", 0);
    _serverConfigs.insert("radarControlPlayer", defaultConf);
    _serverIndices.insert("radarControlPlayer", 0);
    _serverConfigs.insert("setPlayerRepeatEnabled", defaultConf);
    _serverIndices.insert("setPlayerRepeatEnabled", 0);
    _serverConfigs.insert("setPlayerSource", defaultConf);
    _serverIndices.insert("setPlayerSource", 0);
    _serverConfigs.insert("setRadarAmplitudeThreshold", defaultConf);
    _serverIndices.insert("setRadarAmplitudeThreshold", 0);
    _serverConfigs.insert("setRadarExtrapolTime", defaultConf);
    _serverIndices.insert("setRadarExtrapolTime", 0);
    _serverConfigs.insert("setRadarFrequency", defaultConf);
    _serverIndices.insert("setRadarFrequency", 0);
    _serverConfigs.insert("setRadarPosition", defaultConf);
    _serverIndices.insert("setRadarPosition", 0);
    _serverConfigs.insert("setRadarPowerOn", defaultConf);
    _serverIndices.insert("setRadarPowerOn", 0);
    _serverConfigs.insert("setRadarScanning", defaultConf);
    _serverIndices.insert("setRadarScanning", 0);
    _serverConfigs.insert("setRadarSensitivity", defaultConf);
    _serverIndices.insert("setRadarSensitivity", 0);
    _serverConfigs.insert("setRadarThresholdControl", defaultConf);
    _serverIndices.insert("setRadarThresholdControl", 0);
    _serverConfigs.insert("setRadarTryToConnect", defaultConf);
    _serverIndices.insert("setRadarTryToConnect", 0);
    _serverConfigs.insert("setRadarVelocityThreshold", defaultConf);
    _serverIndices.insert("setRadarVelocityThreshold", 0);
    _serverConfigs.insert("setRadarWorkzone", defaultConf);
    _serverIndices.insert("setRadarWorkzone", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OARadarIqRadarApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OARadarIqRadarApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OARadarIqRadarApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OARadarIqRadarApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OARadarIqRadarApi::setUsername(const QString &username) {
    _username = username;
}

void OARadarIqRadarApi::setPassword(const QString &password) {
    _password = password;
}


void OARadarIqRadarApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OARadarIqRadarApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OARadarIqRadarApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OARadarIqRadarApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OARadarIqServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OARadarIqServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OARadarIqRadarApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OARadarIqServerVariable> &variables) {
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
#else
    for (auto &e : _serverIndices.keys()) {
        setServerIndex(e, addServerConfiguration(e, url, description, variables));
    }
#endif
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OARadarIqRadarApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OARadarIqServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OARadarIqRadarApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OARadarIqRadarApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OARadarIqRadarApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OARadarIqRadarApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OARadarIqRadarApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OARadarIqRadarApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OARadarIqRadarApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OARadarIqRadarApi::checkMonitoringMode() {
    QString fullPath = QString(_serverConfigs["checkMonitoringMode"][_serverIndices.value("checkMonitoringMode")].URL()+"/radar/check_monitoring_mode");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OARadarIqHttpRequestWorker *worker = new OARadarIqHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OARadarIqHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OARadarIqHttpRequestWorker::on_execution_finished, this, &OARadarIqRadarApi::checkMonitoringModeCallback);
    connect(this, &OARadarIqRadarApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OARadarIqHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OARadarIqRadarApi::checkMonitoringModeCallback(OARadarIqHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OARadarIqBool_data output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT checkMonitoringModeSignal(output);
        Q_EMIT checkMonitoringModeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT checkMonitoringModeSignalE(output, error_type, error_str);
        Q_EMIT checkMonitoringModeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT checkMonitoringModeSignalError(output, error_type, error_str);
        Q_EMIT checkMonitoringModeSignalErrorFull(worker, error_type, error_str);
    }
}

void OARadarIqRadarApi::getPlayerSources() {
    QString fullPath = QString(_serverConfigs["getPlayerSources"][_serverIndices.value("getPlayerSources")].URL()+"/radar/get_player_sources");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OARadarIqHttpRequestWorker *worker = new OARadarIqHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OARadarIqHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OARadarIqHttpRequestWorker::on_execution_finished, this, &OARadarIqRadarApi::getPlayerSourcesCallback);
    connect(this, &OARadarIqRadarApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OARadarIqHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OARadarIqRadarApi::getPlayerSourcesCallback(OARadarIqHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getPlayerSourcesSignal();
        Q_EMIT getPlayerSourcesSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getPlayerSourcesSignalE(error_type, error_str);
        Q_EMIT getPlayerSourcesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getPlayerSourcesSignalError(error_type, error_str);
        Q_EMIT getPlayerSourcesSignalErrorFull(worker, error_type, error_str);
    }
}

void OARadarIqRadarApi::getRadarConnectionState() {
    QString fullPath = QString(_serverConfigs["getRadarConnectionState"][_serverIndices.value("getRadarConnectionState")].URL()+"/radar/get_connection_state");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OARadarIqHttpRequestWorker *worker = new OARadarIqHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OARadarIqHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OARadarIqHttpRequestWorker::on_execution_finished, this, &OARadarIqRadarApi::getRadarConnectionStateCallback);
    connect(this, &OARadarIqRadarApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OARadarIqHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OARadarIqRadarApi::getRadarConnectionStateCallback(OARadarIqHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OARadarIqConnection_state_data output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getRadarConnectionStateSignal(output);
        Q_EMIT getRadarConnectionStateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getRadarConnectionStateSignalE(output, error_type, error_str);
        Q_EMIT getRadarConnectionStateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getRadarConnectionStateSignalError(output, error_type, error_str);
        Q_EMIT getRadarConnectionStateSignalErrorFull(worker, error_type, error_str);
    }
}

void OARadarIqRadarApi::getRadarSettings() {
    QString fullPath = QString(_serverConfigs["getRadarSettings"][_serverIndices.value("getRadarSettings")].URL()+"/radar/get_settings");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OARadarIqHttpRequestWorker *worker = new OARadarIqHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OARadarIqHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OARadarIqHttpRequestWorker::on_execution_finished, this, &OARadarIqRadarApi::getRadarSettingsCallback);
    connect(this, &OARadarIqRadarApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OARadarIqHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OARadarIqRadarApi::getRadarSettingsCallback(OARadarIqHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OARadarIqRadar_settings output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getRadarSettingsSignal(output);
        Q_EMIT getRadarSettingsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getRadarSettingsSignalE(output, error_type, error_str);
        Q_EMIT getRadarSettingsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getRadarSettingsSignalError(output, error_type, error_str);
        Q_EMIT getRadarSettingsSignalErrorFull(worker, error_type, error_str);
    }
}

void OARadarIqRadarApi::getRadarTelemetry() {
    QString fullPath = QString(_serverConfigs["getRadarTelemetry"][_serverIndices.value("getRadarTelemetry")].URL()+"/radar/get_telemetry");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OARadarIqHttpRequestWorker *worker = new OARadarIqHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OARadarIqHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OARadarIqHttpRequestWorker::on_execution_finished, this, &OARadarIqRadarApi::getRadarTelemetryCallback);
    connect(this, &OARadarIqRadarApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OARadarIqHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OARadarIqRadarApi::getRadarTelemetryCallback(OARadarIqHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OARadarIqGet_radar_telemetry_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getRadarTelemetrySignal(output);
        Q_EMIT getRadarTelemetrySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getRadarTelemetrySignalE(output, error_type, error_str);
        Q_EMIT getRadarTelemetrySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getRadarTelemetrySignalError(output, error_type, error_str);
        Q_EMIT getRadarTelemetrySignalErrorFull(worker, error_type, error_str);
    }
}

void OARadarIqRadarApi::getRadarTryToConnect() {
    QString fullPath = QString(_serverConfigs["getRadarTryToConnect"][_serverIndices.value("getRadarTryToConnect")].URL()+"/radar/get_try_to_connect");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OARadarIqHttpRequestWorker *worker = new OARadarIqHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OARadarIqHttpRequestInput input(fullPath, "GET");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OARadarIqHttpRequestWorker::on_execution_finished, this, &OARadarIqRadarApi::getRadarTryToConnectCallback);
    connect(this, &OARadarIqRadarApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OARadarIqHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OARadarIqRadarApi::getRadarTryToConnectCallback(OARadarIqHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OARadarIqBool_data output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getRadarTryToConnectSignal(output);
        Q_EMIT getRadarTryToConnectSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getRadarTryToConnectSignalE(output, error_type, error_str);
        Q_EMIT getRadarTryToConnectSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getRadarTryToConnectSignalError(output, error_type, error_str);
        Q_EMIT getRadarTryToConnectSignalErrorFull(worker, error_type, error_str);
    }
}

void OARadarIqRadarApi::radarControlPlayer(const OARadarIqPlayer_command &body) {
    QString fullPath = QString(_serverConfigs["radarControlPlayer"][_serverIndices.value("radarControlPlayer")].URL()+"/radar/control_player");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OARadarIqHttpRequestWorker *worker = new OARadarIqHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OARadarIqHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OARadarIqHttpRequestWorker::on_execution_finished, this, &OARadarIqRadarApi::radarControlPlayerCallback);
    connect(this, &OARadarIqRadarApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OARadarIqHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OARadarIqRadarApi::radarControlPlayerCallback(OARadarIqHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT radarControlPlayerSignal();
        Q_EMIT radarControlPlayerSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT radarControlPlayerSignalE(error_type, error_str);
        Q_EMIT radarControlPlayerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT radarControlPlayerSignalError(error_type, error_str);
        Q_EMIT radarControlPlayerSignalErrorFull(worker, error_type, error_str);
    }
}

void OARadarIqRadarApi::setPlayerRepeatEnabled(const OARadarIqBool_enabled &body) {
    QString fullPath = QString(_serverConfigs["setPlayerRepeatEnabled"][_serverIndices.value("setPlayerRepeatEnabled")].URL()+"/radar/set_player_repeat_enabled");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OARadarIqHttpRequestWorker *worker = new OARadarIqHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OARadarIqHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OARadarIqHttpRequestWorker::on_execution_finished, this, &OARadarIqRadarApi::setPlayerRepeatEnabledCallback);
    connect(this, &OARadarIqRadarApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OARadarIqHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OARadarIqRadarApi::setPlayerRepeatEnabledCallback(OARadarIqHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setPlayerRepeatEnabledSignal();
        Q_EMIT setPlayerRepeatEnabledSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setPlayerRepeatEnabledSignalE(error_type, error_str);
        Q_EMIT setPlayerRepeatEnabledSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setPlayerRepeatEnabledSignalError(error_type, error_str);
        Q_EMIT setPlayerRepeatEnabledSignalErrorFull(worker, error_type, error_str);
    }
}

void OARadarIqRadarApi::setPlayerSource() {
    QString fullPath = QString(_serverConfigs["setPlayerSource"][_serverIndices.value("setPlayerSource")].URL()+"/radar/set_player_source");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OARadarIqHttpRequestWorker *worker = new OARadarIqHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OARadarIqHttpRequestInput input(fullPath, "POST");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OARadarIqHttpRequestWorker::on_execution_finished, this, &OARadarIqRadarApi::setPlayerSourceCallback);
    connect(this, &OARadarIqRadarApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OARadarIqHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OARadarIqRadarApi::setPlayerSourceCallback(OARadarIqHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setPlayerSourceSignal();
        Q_EMIT setPlayerSourceSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setPlayerSourceSignalE(error_type, error_str);
        Q_EMIT setPlayerSourceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setPlayerSourceSignalError(error_type, error_str);
        Q_EMIT setPlayerSourceSignalErrorFull(worker, error_type, error_str);
    }
}

void OARadarIqRadarApi::setRadarAmplitudeThreshold(const OARadarIqInteger_value &body) {
    QString fullPath = QString(_serverConfigs["setRadarAmplitudeThreshold"][_serverIndices.value("setRadarAmplitudeThreshold")].URL()+"/radar/set_amplitude_threshold");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OARadarIqHttpRequestWorker *worker = new OARadarIqHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OARadarIqHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OARadarIqHttpRequestWorker::on_execution_finished, this, &OARadarIqRadarApi::setRadarAmplitudeThresholdCallback);
    connect(this, &OARadarIqRadarApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OARadarIqHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OARadarIqRadarApi::setRadarAmplitudeThresholdCallback(OARadarIqHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setRadarAmplitudeThresholdSignal();
        Q_EMIT setRadarAmplitudeThresholdSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setRadarAmplitudeThresholdSignalE(error_type, error_str);
        Q_EMIT setRadarAmplitudeThresholdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setRadarAmplitudeThresholdSignalError(error_type, error_str);
        Q_EMIT setRadarAmplitudeThresholdSignalErrorFull(worker, error_type, error_str);
    }
}

void OARadarIqRadarApi::setRadarExtrapolTime(const OARadarIqInteger_value &body) {
    QString fullPath = QString(_serverConfigs["setRadarExtrapolTime"][_serverIndices.value("setRadarExtrapolTime")].URL()+"/radar/set_extrapol_time");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OARadarIqHttpRequestWorker *worker = new OARadarIqHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OARadarIqHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OARadarIqHttpRequestWorker::on_execution_finished, this, &OARadarIqRadarApi::setRadarExtrapolTimeCallback);
    connect(this, &OARadarIqRadarApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OARadarIqHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OARadarIqRadarApi::setRadarExtrapolTimeCallback(OARadarIqHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setRadarExtrapolTimeSignal();
        Q_EMIT setRadarExtrapolTimeSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setRadarExtrapolTimeSignalE(error_type, error_str);
        Q_EMIT setRadarExtrapolTimeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setRadarExtrapolTimeSignalError(error_type, error_str);
        Q_EMIT setRadarExtrapolTimeSignalErrorFull(worker, error_type, error_str);
    }
}

void OARadarIqRadarApi::setRadarFrequency(const OARadarIqFrequency_value &body) {
    QString fullPath = QString(_serverConfigs["setRadarFrequency"][_serverIndices.value("setRadarFrequency")].URL()+"/radar/set_frequency");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OARadarIqHttpRequestWorker *worker = new OARadarIqHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OARadarIqHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OARadarIqHttpRequestWorker::on_execution_finished, this, &OARadarIqRadarApi::setRadarFrequencyCallback);
    connect(this, &OARadarIqRadarApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OARadarIqHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OARadarIqRadarApi::setRadarFrequencyCallback(OARadarIqHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setRadarFrequencySignal();
        Q_EMIT setRadarFrequencySignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setRadarFrequencySignalE(error_type, error_str);
        Q_EMIT setRadarFrequencySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setRadarFrequencySignalError(error_type, error_str);
        Q_EMIT setRadarFrequencySignalErrorFull(worker, error_type, error_str);
    }
}

void OARadarIqRadarApi::setRadarPosition(const OARadarIqGeo_position &body) {
    QString fullPath = QString(_serverConfigs["setRadarPosition"][_serverIndices.value("setRadarPosition")].URL()+"/radar/set_position");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OARadarIqHttpRequestWorker *worker = new OARadarIqHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OARadarIqHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OARadarIqHttpRequestWorker::on_execution_finished, this, &OARadarIqRadarApi::setRadarPositionCallback);
    connect(this, &OARadarIqRadarApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OARadarIqHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OARadarIqRadarApi::setRadarPositionCallback(OARadarIqHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setRadarPositionSignal();
        Q_EMIT setRadarPositionSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setRadarPositionSignalE(error_type, error_str);
        Q_EMIT setRadarPositionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setRadarPositionSignalError(error_type, error_str);
        Q_EMIT setRadarPositionSignalErrorFull(worker, error_type, error_str);
    }
}

void OARadarIqRadarApi::setRadarPowerOn(const OARadarIqBool_enabled &body) {
    QString fullPath = QString(_serverConfigs["setRadarPowerOn"][_serverIndices.value("setRadarPowerOn")].URL()+"/radar/set_power_on");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OARadarIqHttpRequestWorker *worker = new OARadarIqHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OARadarIqHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OARadarIqHttpRequestWorker::on_execution_finished, this, &OARadarIqRadarApi::setRadarPowerOnCallback);
    connect(this, &OARadarIqRadarApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OARadarIqHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OARadarIqRadarApi::setRadarPowerOnCallback(OARadarIqHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setRadarPowerOnSignal();
        Q_EMIT setRadarPowerOnSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setRadarPowerOnSignalE(error_type, error_str);
        Q_EMIT setRadarPowerOnSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setRadarPowerOnSignalError(error_type, error_str);
        Q_EMIT setRadarPowerOnSignalErrorFull(worker, error_type, error_str);
    }
}

void OARadarIqRadarApi::setRadarScanning(const OARadarIqBool_enabled &body) {
    QString fullPath = QString(_serverConfigs["setRadarScanning"][_serverIndices.value("setRadarScanning")].URL()+"/radar/set_scanning");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OARadarIqHttpRequestWorker *worker = new OARadarIqHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OARadarIqHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OARadarIqHttpRequestWorker::on_execution_finished, this, &OARadarIqRadarApi::setRadarScanningCallback);
    connect(this, &OARadarIqRadarApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OARadarIqHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OARadarIqRadarApi::setRadarScanningCallback(OARadarIqHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setRadarScanningSignal();
        Q_EMIT setRadarScanningSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setRadarScanningSignalE(error_type, error_str);
        Q_EMIT setRadarScanningSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setRadarScanningSignalError(error_type, error_str);
        Q_EMIT setRadarScanningSignalErrorFull(worker, error_type, error_str);
    }
}

void OARadarIqRadarApi::setRadarSensitivity(const OARadarIqSensitivity_value &body) {
    QString fullPath = QString(_serverConfigs["setRadarSensitivity"][_serverIndices.value("setRadarSensitivity")].URL()+"/radar/set_sensitivity");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OARadarIqHttpRequestWorker *worker = new OARadarIqHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OARadarIqHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OARadarIqHttpRequestWorker::on_execution_finished, this, &OARadarIqRadarApi::setRadarSensitivityCallback);
    connect(this, &OARadarIqRadarApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OARadarIqHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OARadarIqRadarApi::setRadarSensitivityCallback(OARadarIqHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setRadarSensitivitySignal();
        Q_EMIT setRadarSensitivitySignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setRadarSensitivitySignalE(error_type, error_str);
        Q_EMIT setRadarSensitivitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setRadarSensitivitySignalError(error_type, error_str);
        Q_EMIT setRadarSensitivitySignalErrorFull(worker, error_type, error_str);
    }
}

void OARadarIqRadarApi::setRadarThresholdControl(const OARadarIqThreshold_control_value &body) {
    QString fullPath = QString(_serverConfigs["setRadarThresholdControl"][_serverIndices.value("setRadarThresholdControl")].URL()+"/radar/set_threshold_control");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OARadarIqHttpRequestWorker *worker = new OARadarIqHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OARadarIqHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OARadarIqHttpRequestWorker::on_execution_finished, this, &OARadarIqRadarApi::setRadarThresholdControlCallback);
    connect(this, &OARadarIqRadarApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OARadarIqHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OARadarIqRadarApi::setRadarThresholdControlCallback(OARadarIqHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setRadarThresholdControlSignal();
        Q_EMIT setRadarThresholdControlSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setRadarThresholdControlSignalE(error_type, error_str);
        Q_EMIT setRadarThresholdControlSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setRadarThresholdControlSignalError(error_type, error_str);
        Q_EMIT setRadarThresholdControlSignalErrorFull(worker, error_type, error_str);
    }
}

void OARadarIqRadarApi::setRadarTryToConnect(const OARadarIqBool_connected &body) {
    QString fullPath = QString(_serverConfigs["setRadarTryToConnect"][_serverIndices.value("setRadarTryToConnect")].URL()+"/radar/set_try_to_connect");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OARadarIqHttpRequestWorker *worker = new OARadarIqHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OARadarIqHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OARadarIqHttpRequestWorker::on_execution_finished, this, &OARadarIqRadarApi::setRadarTryToConnectCallback);
    connect(this, &OARadarIqRadarApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OARadarIqHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OARadarIqRadarApi::setRadarTryToConnectCallback(OARadarIqHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setRadarTryToConnectSignal();
        Q_EMIT setRadarTryToConnectSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setRadarTryToConnectSignalE(error_type, error_str);
        Q_EMIT setRadarTryToConnectSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setRadarTryToConnectSignalError(error_type, error_str);
        Q_EMIT setRadarTryToConnectSignalErrorFull(worker, error_type, error_str);
    }
}

void OARadarIqRadarApi::setRadarVelocityThreshold(const OARadarIqInteger_value &body) {
    QString fullPath = QString(_serverConfigs["setRadarVelocityThreshold"][_serverIndices.value("setRadarVelocityThreshold")].URL()+"/radar/set_velocity_threshold");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OARadarIqHttpRequestWorker *worker = new OARadarIqHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OARadarIqHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OARadarIqHttpRequestWorker::on_execution_finished, this, &OARadarIqRadarApi::setRadarVelocityThresholdCallback);
    connect(this, &OARadarIqRadarApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OARadarIqHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OARadarIqRadarApi::setRadarVelocityThresholdCallback(OARadarIqHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setRadarVelocityThresholdSignal();
        Q_EMIT setRadarVelocityThresholdSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setRadarVelocityThresholdSignalE(error_type, error_str);
        Q_EMIT setRadarVelocityThresholdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setRadarVelocityThresholdSignalError(error_type, error_str);
        Q_EMIT setRadarVelocityThresholdSignalErrorFull(worker, error_type, error_str);
    }
}

void OARadarIqRadarApi::setRadarWorkzone() {
    QString fullPath = QString(_serverConfigs["setRadarWorkzone"][_serverIndices.value("setRadarWorkzone")].URL()+"/radar/set_workzone");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OARadarIqHttpRequestWorker *worker = new OARadarIqHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OARadarIqHttpRequestInput input(fullPath, "POST");


#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }
#else
    for (auto key : _defaultHeaders.keys()) {
        input.headers.insert(key, _defaultHeaders[key]);
    }
#endif

    connect(worker, &OARadarIqHttpRequestWorker::on_execution_finished, this, &OARadarIqRadarApi::setRadarWorkzoneCallback);
    connect(this, &OARadarIqRadarApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OARadarIqHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OARadarIqRadarApi::setRadarWorkzoneCallback(OARadarIqHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setRadarWorkzoneSignal();
        Q_EMIT setRadarWorkzoneSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setRadarWorkzoneSignalE(error_type, error_str);
        Q_EMIT setRadarWorkzoneSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setRadarWorkzoneSignalError(error_type, error_str);
        Q_EMIT setRadarWorkzoneSignalErrorFull(worker, error_type, error_str);
    }
}

void OARadarIqRadarApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OARadarIq
