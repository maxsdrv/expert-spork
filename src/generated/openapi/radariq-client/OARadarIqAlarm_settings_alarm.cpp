/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqAlarm_settings_alarm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqAlarm_settings_alarm::OARadarIqAlarm_settings_alarm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqAlarm_settings_alarm::OARadarIqAlarm_settings_alarm() {
    this->initializeModel();
}

OARadarIqAlarm_settings_alarm::~OARadarIqAlarm_settings_alarm() {}

void OARadarIqAlarm_settings_alarm::initializeModel() {

    m_medium_isSet = false;
    m_medium_isValid = false;

    m_high_isSet = false;
    m_high_isValid = false;
}

void OARadarIqAlarm_settings_alarm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqAlarm_settings_alarm::fromJsonObject(QJsonObject json) {

    m_medium_isValid = ::OARadarIq::fromJsonValue(m_medium, json[QString("medium")]);
    m_medium_isSet = !json[QString("medium")].isNull() && m_medium_isValid;

    m_high_isValid = ::OARadarIq::fromJsonValue(m_high, json[QString("high")]);
    m_high_isSet = !json[QString("high")].isNull() && m_high_isValid;
}

QString OARadarIqAlarm_settings_alarm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqAlarm_settings_alarm::asJsonObject() const {
    QJsonObject obj;
    if (m_medium_isSet) {
        obj.insert(QString("medium"), ::OARadarIq::toJsonValue(m_medium));
    }
    if (m_high_isSet) {
        obj.insert(QString("high"), ::OARadarIq::toJsonValue(m_high));
    }
    return obj;
}

double OARadarIqAlarm_settings_alarm::getMedium() const {
    return m_medium;
}
void OARadarIqAlarm_settings_alarm::setMedium(const double &medium) {
    m_medium = medium;
    m_medium_isSet = true;
}

bool OARadarIqAlarm_settings_alarm::is_medium_Set() const{
    return m_medium_isSet;
}

bool OARadarIqAlarm_settings_alarm::is_medium_Valid() const{
    return m_medium_isValid;
}

double OARadarIqAlarm_settings_alarm::getHigh() const {
    return m_high;
}
void OARadarIqAlarm_settings_alarm::setHigh(const double &high) {
    m_high = high;
    m_high_isSet = true;
}

bool OARadarIqAlarm_settings_alarm::is_high_Set() const{
    return m_high_isSet;
}

bool OARadarIqAlarm_settings_alarm::is_high_Valid() const{
    return m_high_isValid;
}

bool OARadarIqAlarm_settings_alarm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_medium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqAlarm_settings_alarm::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_medium_isValid && m_high_isValid && true;
}

} // namespace OARadarIq
