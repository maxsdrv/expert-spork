/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqTrack_point_meter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqTrack_point_meter::OARadarIqTrack_point_meter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqTrack_point_meter::OARadarIqTrack_point_meter() {
    this->initializeModel();
}

OARadarIqTrack_point_meter::~OARadarIqTrack_point_meter() {}

void OARadarIqTrack_point_meter::initializeModel() {

    m_amplitude_isSet = false;
    m_amplitude_isValid = false;

    m_rcs_isSet = false;
    m_rcs_isValid = false;
}

void OARadarIqTrack_point_meter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqTrack_point_meter::fromJsonObject(QJsonObject json) {

    m_amplitude_isValid = ::OARadarIq::fromJsonValue(m_amplitude, json[QString("amplitude")]);
    m_amplitude_isSet = !json[QString("amplitude")].isNull() && m_amplitude_isValid;

    m_rcs_isValid = ::OARadarIq::fromJsonValue(m_rcs, json[QString("rcs")]);
    m_rcs_isSet = !json[QString("rcs")].isNull() && m_rcs_isValid;
}

QString OARadarIqTrack_point_meter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqTrack_point_meter::asJsonObject() const {
    QJsonObject obj;
    if (m_amplitude_isSet) {
        obj.insert(QString("amplitude"), ::OARadarIq::toJsonValue(m_amplitude));
    }
    if (m_rcs_isSet) {
        obj.insert(QString("rcs"), ::OARadarIq::toJsonValue(m_rcs));
    }
    return obj;
}

double OARadarIqTrack_point_meter::getAmplitude() const {
    return m_amplitude;
}
void OARadarIqTrack_point_meter::setAmplitude(const double &amplitude) {
    m_amplitude = amplitude;
    m_amplitude_isSet = true;
}

bool OARadarIqTrack_point_meter::is_amplitude_Set() const{
    return m_amplitude_isSet;
}

bool OARadarIqTrack_point_meter::is_amplitude_Valid() const{
    return m_amplitude_isValid;
}

double OARadarIqTrack_point_meter::getRcs() const {
    return m_rcs;
}
void OARadarIqTrack_point_meter::setRcs(const double &rcs) {
    m_rcs = rcs;
    m_rcs_isSet = true;
}

bool OARadarIqTrack_point_meter::is_rcs_Set() const{
    return m_rcs_isSet;
}

bool OARadarIqTrack_point_meter::is_rcs_Valid() const{
    return m_rcs_isValid;
}

bool OARadarIqTrack_point_meter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amplitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqTrack_point_meter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amplitude_isValid && m_rcs_isValid && true;
}

} // namespace OARadarIq
