/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OARadarIqRadar_settings.h
 *
 * 
 */

#ifndef OARadarIqRadar_settings_H
#define OARadarIqRadar_settings_H

#include <QJsonObject>

#include "OARadarIqGeo_position.h"
#include "OARadarIqNetwork_address.h"
#include "OARadarIqObject.h"
#include "OARadarIqRadar_frequency.h"
#include "OARadarIqRadar_model.h"
#include "OARadarIqRadar_sensitivity.h"
#include "OARadarIqRadar_threshold_control.h"
#include "OARadarIqWorkzone.h"
#include <QString>

#include "OARadarIqEnum.h"
#include "OARadarIqObject.h"

namespace OARadarIq {
class OARadarIqNetwork_address;
class OARadarIqGeo_position;
class OARadarIqWorkzone;

class OARadarIqRadar_settings : public OARadarIqObject {
public:
    OARadarIqRadar_settings();
    OARadarIqRadar_settings(QString json);
    ~OARadarIqRadar_settings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OARadarIqRadar_model getModel() const;
    void setModel(const OARadarIqRadar_model &model);
    bool is_model_Set() const;
    bool is_model_Valid() const;

    OARadarIqNetwork_address getAddress() const;
    void setAddress(const OARadarIqNetwork_address &address);
    bool is_address_Set() const;
    bool is_address_Valid() const;

    OARadarIqGeo_position getPosition() const;
    void setPosition(const OARadarIqGeo_position &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    bool isConnectionOn() const;
    void setConnectionOn(const bool &connection_on);
    bool is_connection_on_Set() const;
    bool is_connection_on_Valid() const;

    QString getPlayerSource() const;
    void setPlayerSource(const QString &player_source);
    bool is_player_source_Set() const;
    bool is_player_source_Valid() const;

    bool isPowerOn() const;
    void setPowerOn(const bool &power_on);
    bool is_power_on_Set() const;
    bool is_power_on_Valid() const;

    bool isMonitoringMode() const;
    void setMonitoringMode(const bool &monitoring_mode);
    bool is_monitoring_mode_Set() const;
    bool is_monitoring_mode_Valid() const;

    OARadarIqRadar_frequency getFrequency() const;
    void setFrequency(const OARadarIqRadar_frequency &frequency);
    bool is_frequency_Set() const;
    bool is_frequency_Valid() const;

    OARadarIqRadar_sensitivity getSensitivity() const;
    void setSensitivity(const OARadarIqRadar_sensitivity &sensitivity);
    bool is_sensitivity_Set() const;
    bool is_sensitivity_Valid() const;

    qint32 getExtrapolTime() const;
    void setExtrapolTime(const qint32 &extrapol_time);
    bool is_extrapol_time_Set() const;
    bool is_extrapol_time_Valid() const;

    OARadarIqRadar_threshold_control getThresholdControl() const;
    void setThresholdControl(const OARadarIqRadar_threshold_control &threshold_control);
    bool is_threshold_control_Set() const;
    bool is_threshold_control_Valid() const;

    qint32 getAmplitudeThreshold() const;
    void setAmplitudeThreshold(const qint32 &amplitude_threshold);
    bool is_amplitude_threshold_Set() const;
    bool is_amplitude_threshold_Valid() const;

    qint32 getVelocityThreshold() const;
    void setVelocityThreshold(const qint32 &velocity_threshold);
    bool is_velocity_threshold_Set() const;
    bool is_velocity_threshold_Valid() const;

    OARadarIqObject getClassifierParams() const;
    void setClassifierParams(const OARadarIqObject &classifier_params);
    bool is_classifier_params_Set() const;
    bool is_classifier_params_Valid() const;

    OARadarIqWorkzone getWorkzone() const;
    void setWorkzone(const OARadarIqWorkzone &workzone);
    bool is_workzone_Set() const;
    bool is_workzone_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OARadarIqRadar_model m_model;
    bool m_model_isSet;
    bool m_model_isValid;

    OARadarIqNetwork_address m_address;
    bool m_address_isSet;
    bool m_address_isValid;

    OARadarIqGeo_position m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    bool m_connection_on;
    bool m_connection_on_isSet;
    bool m_connection_on_isValid;

    QString m_player_source;
    bool m_player_source_isSet;
    bool m_player_source_isValid;

    bool m_power_on;
    bool m_power_on_isSet;
    bool m_power_on_isValid;

    bool m_monitoring_mode;
    bool m_monitoring_mode_isSet;
    bool m_monitoring_mode_isValid;

    OARadarIqRadar_frequency m_frequency;
    bool m_frequency_isSet;
    bool m_frequency_isValid;

    OARadarIqRadar_sensitivity m_sensitivity;
    bool m_sensitivity_isSet;
    bool m_sensitivity_isValid;

    qint32 m_extrapol_time;
    bool m_extrapol_time_isSet;
    bool m_extrapol_time_isValid;

    OARadarIqRadar_threshold_control m_threshold_control;
    bool m_threshold_control_isSet;
    bool m_threshold_control_isValid;

    qint32 m_amplitude_threshold;
    bool m_amplitude_threshold_isSet;
    bool m_amplitude_threshold_isValid;

    qint32 m_velocity_threshold;
    bool m_velocity_threshold_isSet;
    bool m_velocity_threshold_isValid;

    OARadarIqObject m_classifier_params;
    bool m_classifier_params_isSet;
    bool m_classifier_params_isValid;

    OARadarIqWorkzone m_workzone;
    bool m_workzone_isSet;
    bool m_workzone_isValid;
};

} // namespace OARadarIq

Q_DECLARE_METATYPE(OARadarIq::OARadarIqRadar_settings)

#endif // OARadarIqRadar_settings_H
