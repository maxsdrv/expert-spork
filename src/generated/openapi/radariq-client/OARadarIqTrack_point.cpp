/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqTrack_point.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqTrack_point::OARadarIqTrack_point(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqTrack_point::OARadarIqTrack_point() {
    this->initializeModel();
}

OARadarIqTrack_point::~OARadarIqTrack_point() {}

void OARadarIqTrack_point::initializeModel() {

    m_coord_isSet = false;
    m_coord_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_velocity_isSet = false;
    m_velocity_isValid = false;

    m_geometry_isSet = false;
    m_geometry_isValid = false;

    m_meter_isSet = false;
    m_meter_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;
}

void OARadarIqTrack_point::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqTrack_point::fromJsonObject(QJsonObject json) {

    m_coord_isValid = ::OARadarIq::fromJsonValue(m_coord, json[QString("coord")]);
    m_coord_isSet = !json[QString("coord")].isNull() && m_coord_isValid;

    m_timestamp_isValid = ::OARadarIq::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_velocity_isValid = ::OARadarIq::fromJsonValue(m_velocity, json[QString("velocity")]);
    m_velocity_isSet = !json[QString("velocity")].isNull() && m_velocity_isValid;

    m_geometry_isValid = ::OARadarIq::fromJsonValue(m_geometry, json[QString("geometry")]);
    m_geometry_isSet = !json[QString("geometry")].isNull() && m_geometry_isValid;

    m_meter_isValid = ::OARadarIq::fromJsonValue(m_meter, json[QString("meter")]);
    m_meter_isSet = !json[QString("meter")].isNull() && m_meter_isValid;

    m_filter_isValid = ::OARadarIq::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;
}

QString OARadarIqTrack_point::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqTrack_point::asJsonObject() const {
    QJsonObject obj;
    if (m_coord.isSet()) {
        obj.insert(QString("coord"), ::OARadarIq::toJsonValue(m_coord));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OARadarIq::toJsonValue(m_timestamp));
    }
    if (m_velocity.isSet()) {
        obj.insert(QString("velocity"), ::OARadarIq::toJsonValue(m_velocity));
    }
    if (m_geometry.isSet()) {
        obj.insert(QString("geometry"), ::OARadarIq::toJsonValue(m_geometry));
    }
    if (m_meter.isSet()) {
        obj.insert(QString("meter"), ::OARadarIq::toJsonValue(m_meter));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OARadarIq::toJsonValue(m_filter));
    }
    return obj;
}

OARadarIqGeo_coordinate OARadarIqTrack_point::getCoord() const {
    return m_coord;
}
void OARadarIqTrack_point::setCoord(const OARadarIqGeo_coordinate &coord) {
    m_coord = coord;
    m_coord_isSet = true;
}

bool OARadarIqTrack_point::is_coord_Set() const{
    return m_coord_isSet;
}

bool OARadarIqTrack_point::is_coord_Valid() const{
    return m_coord_isValid;
}

QDateTime OARadarIqTrack_point::getTimestamp() const {
    return m_timestamp;
}
void OARadarIqTrack_point::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OARadarIqTrack_point::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OARadarIqTrack_point::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OARadarIqTrack_point_velocity OARadarIqTrack_point::getVelocity() const {
    return m_velocity;
}
void OARadarIqTrack_point::setVelocity(const OARadarIqTrack_point_velocity &velocity) {
    m_velocity = velocity;
    m_velocity_isSet = true;
}

bool OARadarIqTrack_point::is_velocity_Set() const{
    return m_velocity_isSet;
}

bool OARadarIqTrack_point::is_velocity_Valid() const{
    return m_velocity_isValid;
}

OARadarIqTrack_point_geometry OARadarIqTrack_point::getGeometry() const {
    return m_geometry;
}
void OARadarIqTrack_point::setGeometry(const OARadarIqTrack_point_geometry &geometry) {
    m_geometry = geometry;
    m_geometry_isSet = true;
}

bool OARadarIqTrack_point::is_geometry_Set() const{
    return m_geometry_isSet;
}

bool OARadarIqTrack_point::is_geometry_Valid() const{
    return m_geometry_isValid;
}

OARadarIqTrack_point_meter OARadarIqTrack_point::getMeter() const {
    return m_meter;
}
void OARadarIqTrack_point::setMeter(const OARadarIqTrack_point_meter &meter) {
    m_meter = meter;
    m_meter_isSet = true;
}

bool OARadarIqTrack_point::is_meter_Set() const{
    return m_meter_isSet;
}

bool OARadarIqTrack_point::is_meter_Valid() const{
    return m_meter_isValid;
}

qint32 OARadarIqTrack_point::getFilter() const {
    return m_filter;
}
void OARadarIqTrack_point::setFilter(const qint32 &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OARadarIqTrack_point::is_filter_Set() const{
    return m_filter_isSet;
}

bool OARadarIqTrack_point::is_filter_Valid() const{
    return m_filter_isValid;
}

bool OARadarIqTrack_point::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coord.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_velocity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geometry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqTrack_point::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_coord_isValid && m_timestamp_isValid && m_velocity_isValid && m_geometry_isValid && m_meter_isValid && true;
}

} // namespace OARadarIq
