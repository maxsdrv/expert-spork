/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqWebsocket_tracks_message.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqWebsocket_tracks_message::OARadarIqWebsocket_tracks_message(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqWebsocket_tracks_message::OARadarIqWebsocket_tracks_message() {
    this->initializeModel();
}

OARadarIqWebsocket_tracks_message::~OARadarIqWebsocket_tracks_message() {}

void OARadarIqWebsocket_tracks_message::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_tracks_isSet = false;
    m_tracks_isValid = false;
}

void OARadarIqWebsocket_tracks_message::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqWebsocket_tracks_message::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OARadarIq::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_tracks_isValid = ::OARadarIq::fromJsonValue(m_tracks, json[QString("tracks")]);
    m_tracks_isSet = !json[QString("tracks")].isNull() && m_tracks_isValid;
}

QString OARadarIqWebsocket_tracks_message::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqWebsocket_tracks_message::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OARadarIq::toJsonValue(m_type));
    }
    if (m_tracks.size() > 0) {
        obj.insert(QString("tracks"), ::OARadarIq::toJsonValue(m_tracks));
    }
    return obj;
}

QString OARadarIqWebsocket_tracks_message::getType() const {
    return m_type;
}
void OARadarIqWebsocket_tracks_message::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OARadarIqWebsocket_tracks_message::is_type_Set() const{
    return m_type_isSet;
}

bool OARadarIqWebsocket_tracks_message::is_type_Valid() const{
    return m_type_isValid;
}

QList<OARadarIqTrack> OARadarIqWebsocket_tracks_message::getTracks() const {
    return m_tracks;
}
void OARadarIqWebsocket_tracks_message::setTracks(const QList<OARadarIqTrack> &tracks) {
    m_tracks = tracks;
    m_tracks_isSet = true;
}

bool OARadarIqWebsocket_tracks_message::is_tracks_Set() const{
    return m_tracks_isSet;
}

bool OARadarIqWebsocket_tracks_message::is_tracks_Valid() const{
    return m_tracks_isValid;
}

bool OARadarIqWebsocket_tracks_message::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqWebsocket_tracks_message::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_tracks_isValid && true;
}

} // namespace OARadarIq
