/**
 * 
 * Description text
 *
 * The version of the OpenAPI document: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OASkycopeNetworkUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OASkycopeHelpers.h"

namespace OASkycope {

OASkycopeNetworkUsage::OASkycopeNetworkUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OASkycopeNetworkUsage::OASkycopeNetworkUsage() {
    this->initializeModel();
}

OASkycopeNetworkUsage::~OASkycopeNetworkUsage() {}

void OASkycopeNetworkUsage::initializeModel() {

    m_lan1_isSet = false;
    m_lan1_isValid = false;

    m_lan2_isSet = false;
    m_lan2_isValid = false;
}

void OASkycopeNetworkUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OASkycopeNetworkUsage::fromJsonObject(QJsonObject json) {

    m_lan1_isValid = ::OASkycope::fromJsonValue(m_lan1, json[QString("LAN1")]);
    m_lan1_isSet = !json[QString("LAN1")].isNull() && m_lan1_isValid;

    m_lan2_isValid = ::OASkycope::fromJsonValue(m_lan2, json[QString("LAN2")]);
    m_lan2_isSet = !json[QString("LAN2")].isNull() && m_lan2_isValid;
}

QString OASkycopeNetworkUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OASkycopeNetworkUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_lan1.isSet()) {
        obj.insert(QString("LAN1"), ::OASkycope::toJsonValue(m_lan1));
    }
    if (m_lan2.isSet()) {
        obj.insert(QString("LAN2"), ::OASkycope::toJsonValue(m_lan2));
    }
    return obj;
}

OASkycopeLAN1 OASkycopeNetworkUsage::getLan1() const {
    return m_lan1;
}
void OASkycopeNetworkUsage::setLan1(const OASkycopeLAN1 &lan1) {
    m_lan1 = lan1;
    m_lan1_isSet = true;
}

bool OASkycopeNetworkUsage::is_lan1_Set() const{
    return m_lan1_isSet;
}

bool OASkycopeNetworkUsage::is_lan1_Valid() const{
    return m_lan1_isValid;
}

OASkycopeLAN2 OASkycopeNetworkUsage::getLan2() const {
    return m_lan2;
}
void OASkycopeNetworkUsage::setLan2(const OASkycopeLAN2 &lan2) {
    m_lan2 = lan2;
    m_lan2_isSet = true;
}

bool OASkycopeNetworkUsage::is_lan2_Set() const{
    return m_lan2_isSet;
}

bool OASkycopeNetworkUsage::is_lan2_Valid() const{
    return m_lan2_isValid;
}

bool OASkycopeNetworkUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lan1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lan2.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OASkycopeNetworkUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OASkycope
