/**
 * 
 * Description text
 *
 * The version of the OpenAPI document: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OASkycopeModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OASkycopeHelpers.h"

namespace OASkycope {

OASkycopeModel::OASkycopeModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OASkycopeModel::OASkycopeModel() {
    this->initializeModel();
}

OASkycopeModel::~OASkycopeModel() {}

void OASkycopeModel::initializeModel() {

    m_center_location_isSet = false;
    m_center_location_isValid = false;

    m_db_migration_error_isSet = false;
    m_db_migration_error_isValid = false;

    m_defense_status_isSet = false;
    m_defense_status_isValid = false;

    m_devices_info_isSet = false;
    m_devices_info_isValid = false;

    m_drone_list_enabled_isSet = false;
    m_drone_list_enabled_isValid = false;

    m_gps_limit_isSet = false;
    m_gps_limit_isValid = false;

    m_has_danger_isSet = false;
    m_has_danger_isValid = false;

    m_hide_defense_features_isSet = false;
    m_hide_defense_features_isValid = false;

    m_hide_detection_page_isSet = false;
    m_hide_detection_page_isValid = false;

    m_hide_spectrum_page_isSet = false;
    m_hide_spectrum_page_isValid = false;

    m_is_all_expired_isSet = false;
    m_is_all_expired_isValid = false;

    m_is_anchor_server_isSet = false;
    m_is_anchor_server_isValid = false;

    m_is_local_mode_isSet = false;
    m_is_local_mode_isValid = false;

    m_is_remote_id_enabled_isSet = false;
    m_is_remote_id_enabled_isValid = false;

    m_is_unknown_wifi_enabled_isSet = false;
    m_is_unknown_wifi_enabled_isValid = false;

    m_lf_radius_isSet = false;
    m_lf_radius_isValid = false;

    m_non_ai_ignorable_isSet = false;
    m_non_ai_ignorable_isValid = false;

    m_nondf_result_isSet = false;
    m_nondf_result_isValid = false;

    m_offline_map_loaded_isSet = false;
    m_offline_map_loaded_isValid = false;

    m_online_map_enabled_isSet = false;
    m_online_map_enabled_isValid = false;

    m_sensors_info_isSet = false;
    m_sensors_info_isValid = false;

    m_setting_mode_isSet = false;
    m_setting_mode_isValid = false;

    m_show_enhanced_features_isSet = false;
    m_show_enhanced_features_isValid = false;

    m_total_devices_isSet = false;
    m_total_devices_isValid = false;

    m_total_remote_ids_isSet = false;
    m_total_remote_ids_isValid = false;

    m_total_wifi_devices_isSet = false;
    m_total_wifi_devices_isValid = false;

    m_unknown_wifi_devices_info_isSet = false;
    m_unknown_wifi_devices_info_isValid = false;

    m_upgrade_status_isSet = false;
    m_upgrade_status_isValid = false;

    m_user_locations_isSet = false;
    m_user_locations_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OASkycopeModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OASkycopeModel::fromJsonObject(QJsonObject json) {

    m_center_location_isValid = ::OASkycope::fromJsonValue(m_center_location, json[QString("center_location")]);
    m_center_location_isSet = !json[QString("center_location")].isNull() && m_center_location_isValid;

    m_db_migration_error_isValid = ::OASkycope::fromJsonValue(m_db_migration_error, json[QString("db_migration_error")]);
    m_db_migration_error_isSet = !json[QString("db_migration_error")].isNull() && m_db_migration_error_isValid;

    m_defense_status_isValid = ::OASkycope::fromJsonValue(m_defense_status, json[QString("defense_status")]);
    m_defense_status_isSet = !json[QString("defense_status")].isNull() && m_defense_status_isValid;

    m_devices_info_isValid = ::OASkycope::fromJsonValue(m_devices_info, json[QString("devices_info")]);
    m_devices_info_isSet = !json[QString("devices_info")].isNull() && m_devices_info_isValid;

    m_drone_list_enabled_isValid = ::OASkycope::fromJsonValue(m_drone_list_enabled, json[QString("drone_list_enabled")]);
    m_drone_list_enabled_isSet = !json[QString("drone_list_enabled")].isNull() && m_drone_list_enabled_isValid;

    m_gps_limit_isValid = ::OASkycope::fromJsonValue(m_gps_limit, json[QString("gps_limit")]);
    m_gps_limit_isSet = !json[QString("gps_limit")].isNull() && m_gps_limit_isValid;

    m_has_danger_isValid = ::OASkycope::fromJsonValue(m_has_danger, json[QString("has_danger")]);
    m_has_danger_isSet = !json[QString("has_danger")].isNull() && m_has_danger_isValid;

    m_hide_defense_features_isValid = ::OASkycope::fromJsonValue(m_hide_defense_features, json[QString("hide_defense_features")]);
    m_hide_defense_features_isSet = !json[QString("hide_defense_features")].isNull() && m_hide_defense_features_isValid;

    m_hide_detection_page_isValid = ::OASkycope::fromJsonValue(m_hide_detection_page, json[QString("hide_detection_page")]);
    m_hide_detection_page_isSet = !json[QString("hide_detection_page")].isNull() && m_hide_detection_page_isValid;

    m_hide_spectrum_page_isValid = ::OASkycope::fromJsonValue(m_hide_spectrum_page, json[QString("hide_spectrum_page")]);
    m_hide_spectrum_page_isSet = !json[QString("hide_spectrum_page")].isNull() && m_hide_spectrum_page_isValid;

    m_is_all_expired_isValid = ::OASkycope::fromJsonValue(m_is_all_expired, json[QString("is_all_expired")]);
    m_is_all_expired_isSet = !json[QString("is_all_expired")].isNull() && m_is_all_expired_isValid;

    m_is_anchor_server_isValid = ::OASkycope::fromJsonValue(m_is_anchor_server, json[QString("is_anchor_server")]);
    m_is_anchor_server_isSet = !json[QString("is_anchor_server")].isNull() && m_is_anchor_server_isValid;

    m_is_local_mode_isValid = ::OASkycope::fromJsonValue(m_is_local_mode, json[QString("is_local_mode")]);
    m_is_local_mode_isSet = !json[QString("is_local_mode")].isNull() && m_is_local_mode_isValid;

    m_is_remote_id_enabled_isValid = ::OASkycope::fromJsonValue(m_is_remote_id_enabled, json[QString("is_remote_id_enabled")]);
    m_is_remote_id_enabled_isSet = !json[QString("is_remote_id_enabled")].isNull() && m_is_remote_id_enabled_isValid;

    m_is_unknown_wifi_enabled_isValid = ::OASkycope::fromJsonValue(m_is_unknown_wifi_enabled, json[QString("is_unknown_wifi_enabled")]);
    m_is_unknown_wifi_enabled_isSet = !json[QString("is_unknown_wifi_enabled")].isNull() && m_is_unknown_wifi_enabled_isValid;

    m_lf_radius_isValid = ::OASkycope::fromJsonValue(m_lf_radius, json[QString("lf_radius")]);
    m_lf_radius_isSet = !json[QString("lf_radius")].isNull() && m_lf_radius_isValid;

    m_non_ai_ignorable_isValid = ::OASkycope::fromJsonValue(m_non_ai_ignorable, json[QString("non_ai_ignorable")]);
    m_non_ai_ignorable_isSet = !json[QString("non_ai_ignorable")].isNull() && m_non_ai_ignorable_isValid;

    m_nondf_result_isValid = ::OASkycope::fromJsonValue(m_nondf_result, json[QString("nondf_result")]);
    m_nondf_result_isSet = !json[QString("nondf_result")].isNull() && m_nondf_result_isValid;

    m_offline_map_loaded_isValid = ::OASkycope::fromJsonValue(m_offline_map_loaded, json[QString("offline_map_loaded")]);
    m_offline_map_loaded_isSet = !json[QString("offline_map_loaded")].isNull() && m_offline_map_loaded_isValid;

    m_online_map_enabled_isValid = ::OASkycope::fromJsonValue(m_online_map_enabled, json[QString("online_map_enabled")]);
    m_online_map_enabled_isSet = !json[QString("online_map_enabled")].isNull() && m_online_map_enabled_isValid;

    m_sensors_info_isValid = ::OASkycope::fromJsonValue(m_sensors_info, json[QString("sensors_info")]);
    m_sensors_info_isSet = !json[QString("sensors_info")].isNull() && m_sensors_info_isValid;

    m_setting_mode_isValid = ::OASkycope::fromJsonValue(m_setting_mode, json[QString("setting_mode")]);
    m_setting_mode_isSet = !json[QString("setting_mode")].isNull() && m_setting_mode_isValid;

    m_show_enhanced_features_isValid = ::OASkycope::fromJsonValue(m_show_enhanced_features, json[QString("show_enhanced_features")]);
    m_show_enhanced_features_isSet = !json[QString("show_enhanced_features")].isNull() && m_show_enhanced_features_isValid;

    m_total_devices_isValid = ::OASkycope::fromJsonValue(m_total_devices, json[QString("total_devices")]);
    m_total_devices_isSet = !json[QString("total_devices")].isNull() && m_total_devices_isValid;

    m_total_remote_ids_isValid = ::OASkycope::fromJsonValue(m_total_remote_ids, json[QString("total_remote_ids")]);
    m_total_remote_ids_isSet = !json[QString("total_remote_ids")].isNull() && m_total_remote_ids_isValid;

    m_total_wifi_devices_isValid = ::OASkycope::fromJsonValue(m_total_wifi_devices, json[QString("total_wifi_devices")]);
    m_total_wifi_devices_isSet = !json[QString("total_wifi_devices")].isNull() && m_total_wifi_devices_isValid;

    m_unknown_wifi_devices_info_isValid = ::OASkycope::fromJsonValue(m_unknown_wifi_devices_info, json[QString("unknown_wifi_devices_info")]);
    m_unknown_wifi_devices_info_isSet = !json[QString("unknown_wifi_devices_info")].isNull() && m_unknown_wifi_devices_info_isValid;

    m_upgrade_status_isValid = ::OASkycope::fromJsonValue(m_upgrade_status, json[QString("upgrade_status")]);
    m_upgrade_status_isSet = !json[QString("upgrade_status")].isNull() && m_upgrade_status_isValid;

    m_user_locations_isValid = ::OASkycope::fromJsonValue(m_user_locations, json[QString("user_locations")]);
    m_user_locations_isSet = !json[QString("user_locations")].isNull() && m_user_locations_isValid;

    m_version_isValid = ::OASkycope::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OASkycopeModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OASkycopeModel::asJsonObject() const {
    QJsonObject obj;
    if (m_center_location_isSet) {
        obj.insert(QString("center_location"), ::OASkycope::toJsonValue(m_center_location));
    }
    if (m_db_migration_error_isSet) {
        obj.insert(QString("db_migration_error"), ::OASkycope::toJsonValue(m_db_migration_error));
    }
    if (m_defense_status.isSet()) {
        obj.insert(QString("defense_status"), ::OASkycope::toJsonValue(m_defense_status));
    }
    if (m_devices_info.size() > 0) {
        obj.insert(QString("devices_info"), ::OASkycope::toJsonValue(m_devices_info));
    }
    if (m_drone_list_enabled_isSet) {
        obj.insert(QString("drone_list_enabled"), ::OASkycope::toJsonValue(m_drone_list_enabled));
    }
    if (m_gps_limit_isSet) {
        obj.insert(QString("gps_limit"), ::OASkycope::toJsonValue(m_gps_limit));
    }
    if (m_has_danger_isSet) {
        obj.insert(QString("has_danger"), ::OASkycope::toJsonValue(m_has_danger));
    }
    if (m_hide_defense_features_isSet) {
        obj.insert(QString("hide_defense_features"), ::OASkycope::toJsonValue(m_hide_defense_features));
    }
    if (m_hide_detection_page_isSet) {
        obj.insert(QString("hide_detection_page"), ::OASkycope::toJsonValue(m_hide_detection_page));
    }
    if (m_hide_spectrum_page_isSet) {
        obj.insert(QString("hide_spectrum_page"), ::OASkycope::toJsonValue(m_hide_spectrum_page));
    }
    if (m_is_all_expired_isSet) {
        obj.insert(QString("is_all_expired"), ::OASkycope::toJsonValue(m_is_all_expired));
    }
    if (m_is_anchor_server_isSet) {
        obj.insert(QString("is_anchor_server"), ::OASkycope::toJsonValue(m_is_anchor_server));
    }
    if (m_is_local_mode_isSet) {
        obj.insert(QString("is_local_mode"), ::OASkycope::toJsonValue(m_is_local_mode));
    }
    if (m_is_remote_id_enabled_isSet) {
        obj.insert(QString("is_remote_id_enabled"), ::OASkycope::toJsonValue(m_is_remote_id_enabled));
    }
    if (m_is_unknown_wifi_enabled_isSet) {
        obj.insert(QString("is_unknown_wifi_enabled"), ::OASkycope::toJsonValue(m_is_unknown_wifi_enabled));
    }
    if (m_lf_radius_isSet) {
        obj.insert(QString("lf_radius"), ::OASkycope::toJsonValue(m_lf_radius));
    }
    if (m_non_ai_ignorable_isSet) {
        obj.insert(QString("non_ai_ignorable"), ::OASkycope::toJsonValue(m_non_ai_ignorable));
    }
    if (m_nondf_result_isSet) {
        obj.insert(QString("nondf_result"), ::OASkycope::toJsonValue(m_nondf_result));
    }
    if (m_offline_map_loaded_isSet) {
        obj.insert(QString("offline_map_loaded"), ::OASkycope::toJsonValue(m_offline_map_loaded));
    }
    if (m_online_map_enabled_isSet) {
        obj.insert(QString("online_map_enabled"), ::OASkycope::toJsonValue(m_online_map_enabled));
    }
    if (m_sensors_info.size() > 0) {
        obj.insert(QString("sensors_info"), ::OASkycope::toJsonValue(m_sensors_info));
    }
    if (m_setting_mode_isSet) {
        obj.insert(QString("setting_mode"), ::OASkycope::toJsonValue(m_setting_mode));
    }
    if (m_show_enhanced_features_isSet) {
        obj.insert(QString("show_enhanced_features"), ::OASkycope::toJsonValue(m_show_enhanced_features));
    }
    if (m_total_devices_isSet) {
        obj.insert(QString("total_devices"), ::OASkycope::toJsonValue(m_total_devices));
    }
    if (m_total_remote_ids_isSet) {
        obj.insert(QString("total_remote_ids"), ::OASkycope::toJsonValue(m_total_remote_ids));
    }
    if (m_total_wifi_devices_isSet) {
        obj.insert(QString("total_wifi_devices"), ::OASkycope::toJsonValue(m_total_wifi_devices));
    }
    if (m_unknown_wifi_devices_info.size() > 0) {
        obj.insert(QString("unknown_wifi_devices_info"), ::OASkycope::toJsonValue(m_unknown_wifi_devices_info));
    }
    if (m_upgrade_status_isSet) {
        obj.insert(QString("upgrade_status"), ::OASkycope::toJsonValue(m_upgrade_status));
    }
    if (m_user_locations_isSet) {
        obj.insert(QString("user_locations"), ::OASkycope::toJsonValue(m_user_locations));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OASkycope::toJsonValue(m_version));
    }
    return obj;
}

QString OASkycopeModel::getCenterLocation() const {
    return m_center_location;
}
void OASkycopeModel::setCenterLocation(const QString &center_location) {
    m_center_location = center_location;
    m_center_location_isSet = true;
}

bool OASkycopeModel::is_center_location_Set() const{
    return m_center_location_isSet;
}

bool OASkycopeModel::is_center_location_Valid() const{
    return m_center_location_isValid;
}

bool OASkycopeModel::isDbMigrationError() const {
    return m_db_migration_error;
}
void OASkycopeModel::setDbMigrationError(const bool &db_migration_error) {
    m_db_migration_error = db_migration_error;
    m_db_migration_error_isSet = true;
}

bool OASkycopeModel::is_db_migration_error_Set() const{
    return m_db_migration_error_isSet;
}

bool OASkycopeModel::is_db_migration_error_Valid() const{
    return m_db_migration_error_isValid;
}

OASkycopeDefenseStatus OASkycopeModel::getDefenseStatus() const {
    return m_defense_status;
}
void OASkycopeModel::setDefenseStatus(const OASkycopeDefenseStatus &defense_status) {
    m_defense_status = defense_status;
    m_defense_status_isSet = true;
}

bool OASkycopeModel::is_defense_status_Set() const{
    return m_defense_status_isSet;
}

bool OASkycopeModel::is_defense_status_Valid() const{
    return m_defense_status_isValid;
}

QMap<QString, OASkycopeDrone> OASkycopeModel::getDevicesInfo() const {
    return m_devices_info;
}
void OASkycopeModel::setDevicesInfo(const QMap<QString, OASkycopeDrone> &devices_info) {
    m_devices_info = devices_info;
    m_devices_info_isSet = true;
}

bool OASkycopeModel::is_devices_info_Set() const{
    return m_devices_info_isSet;
}

bool OASkycopeModel::is_devices_info_Valid() const{
    return m_devices_info_isValid;
}

bool OASkycopeModel::isDroneListEnabled() const {
    return m_drone_list_enabled;
}
void OASkycopeModel::setDroneListEnabled(const bool &drone_list_enabled) {
    m_drone_list_enabled = drone_list_enabled;
    m_drone_list_enabled_isSet = true;
}

bool OASkycopeModel::is_drone_list_enabled_Set() const{
    return m_drone_list_enabled_isSet;
}

bool OASkycopeModel::is_drone_list_enabled_Valid() const{
    return m_drone_list_enabled_isValid;
}

qint32 OASkycopeModel::getGpsLimit() const {
    return m_gps_limit;
}
void OASkycopeModel::setGpsLimit(const qint32 &gps_limit) {
    m_gps_limit = gps_limit;
    m_gps_limit_isSet = true;
}

bool OASkycopeModel::is_gps_limit_Set() const{
    return m_gps_limit_isSet;
}

bool OASkycopeModel::is_gps_limit_Valid() const{
    return m_gps_limit_isValid;
}

bool OASkycopeModel::isHasDanger() const {
    return m_has_danger;
}
void OASkycopeModel::setHasDanger(const bool &has_danger) {
    m_has_danger = has_danger;
    m_has_danger_isSet = true;
}

bool OASkycopeModel::is_has_danger_Set() const{
    return m_has_danger_isSet;
}

bool OASkycopeModel::is_has_danger_Valid() const{
    return m_has_danger_isValid;
}

bool OASkycopeModel::isHideDefenseFeatures() const {
    return m_hide_defense_features;
}
void OASkycopeModel::setHideDefenseFeatures(const bool &hide_defense_features) {
    m_hide_defense_features = hide_defense_features;
    m_hide_defense_features_isSet = true;
}

bool OASkycopeModel::is_hide_defense_features_Set() const{
    return m_hide_defense_features_isSet;
}

bool OASkycopeModel::is_hide_defense_features_Valid() const{
    return m_hide_defense_features_isValid;
}

bool OASkycopeModel::isHideDetectionPage() const {
    return m_hide_detection_page;
}
void OASkycopeModel::setHideDetectionPage(const bool &hide_detection_page) {
    m_hide_detection_page = hide_detection_page;
    m_hide_detection_page_isSet = true;
}

bool OASkycopeModel::is_hide_detection_page_Set() const{
    return m_hide_detection_page_isSet;
}

bool OASkycopeModel::is_hide_detection_page_Valid() const{
    return m_hide_detection_page_isValid;
}

bool OASkycopeModel::isHideSpectrumPage() const {
    return m_hide_spectrum_page;
}
void OASkycopeModel::setHideSpectrumPage(const bool &hide_spectrum_page) {
    m_hide_spectrum_page = hide_spectrum_page;
    m_hide_spectrum_page_isSet = true;
}

bool OASkycopeModel::is_hide_spectrum_page_Set() const{
    return m_hide_spectrum_page_isSet;
}

bool OASkycopeModel::is_hide_spectrum_page_Valid() const{
    return m_hide_spectrum_page_isValid;
}

bool OASkycopeModel::isIsAllExpired() const {
    return m_is_all_expired;
}
void OASkycopeModel::setIsAllExpired(const bool &is_all_expired) {
    m_is_all_expired = is_all_expired;
    m_is_all_expired_isSet = true;
}

bool OASkycopeModel::is_is_all_expired_Set() const{
    return m_is_all_expired_isSet;
}

bool OASkycopeModel::is_is_all_expired_Valid() const{
    return m_is_all_expired_isValid;
}

bool OASkycopeModel::isIsAnchorServer() const {
    return m_is_anchor_server;
}
void OASkycopeModel::setIsAnchorServer(const bool &is_anchor_server) {
    m_is_anchor_server = is_anchor_server;
    m_is_anchor_server_isSet = true;
}

bool OASkycopeModel::is_is_anchor_server_Set() const{
    return m_is_anchor_server_isSet;
}

bool OASkycopeModel::is_is_anchor_server_Valid() const{
    return m_is_anchor_server_isValid;
}

bool OASkycopeModel::isIsLocalMode() const {
    return m_is_local_mode;
}
void OASkycopeModel::setIsLocalMode(const bool &is_local_mode) {
    m_is_local_mode = is_local_mode;
    m_is_local_mode_isSet = true;
}

bool OASkycopeModel::is_is_local_mode_Set() const{
    return m_is_local_mode_isSet;
}

bool OASkycopeModel::is_is_local_mode_Valid() const{
    return m_is_local_mode_isValid;
}

bool OASkycopeModel::isIsRemoteIdEnabled() const {
    return m_is_remote_id_enabled;
}
void OASkycopeModel::setIsRemoteIdEnabled(const bool &is_remote_id_enabled) {
    m_is_remote_id_enabled = is_remote_id_enabled;
    m_is_remote_id_enabled_isSet = true;
}

bool OASkycopeModel::is_is_remote_id_enabled_Set() const{
    return m_is_remote_id_enabled_isSet;
}

bool OASkycopeModel::is_is_remote_id_enabled_Valid() const{
    return m_is_remote_id_enabled_isValid;
}

bool OASkycopeModel::isIsUnknownWifiEnabled() const {
    return m_is_unknown_wifi_enabled;
}
void OASkycopeModel::setIsUnknownWifiEnabled(const bool &is_unknown_wifi_enabled) {
    m_is_unknown_wifi_enabled = is_unknown_wifi_enabled;
    m_is_unknown_wifi_enabled_isSet = true;
}

bool OASkycopeModel::is_is_unknown_wifi_enabled_Set() const{
    return m_is_unknown_wifi_enabled_isSet;
}

bool OASkycopeModel::is_is_unknown_wifi_enabled_Valid() const{
    return m_is_unknown_wifi_enabled_isValid;
}

qint32 OASkycopeModel::getLfRadius() const {
    return m_lf_radius;
}
void OASkycopeModel::setLfRadius(const qint32 &lf_radius) {
    m_lf_radius = lf_radius;
    m_lf_radius_isSet = true;
}

bool OASkycopeModel::is_lf_radius_Set() const{
    return m_lf_radius_isSet;
}

bool OASkycopeModel::is_lf_radius_Valid() const{
    return m_lf_radius_isValid;
}

bool OASkycopeModel::isNonAiIgnorable() const {
    return m_non_ai_ignorable;
}
void OASkycopeModel::setNonAiIgnorable(const bool &non_ai_ignorable) {
    m_non_ai_ignorable = non_ai_ignorable;
    m_non_ai_ignorable_isSet = true;
}

bool OASkycopeModel::is_non_ai_ignorable_Set() const{
    return m_non_ai_ignorable_isSet;
}

bool OASkycopeModel::is_non_ai_ignorable_Valid() const{
    return m_non_ai_ignorable_isValid;
}

OASkycopeObject OASkycopeModel::getNondfResult() const {
    return m_nondf_result;
}
void OASkycopeModel::setNondfResult(const OASkycopeObject &nondf_result) {
    m_nondf_result = nondf_result;
    m_nondf_result_isSet = true;
}

bool OASkycopeModel::is_nondf_result_Set() const{
    return m_nondf_result_isSet;
}

bool OASkycopeModel::is_nondf_result_Valid() const{
    return m_nondf_result_isValid;
}

bool OASkycopeModel::isOfflineMapLoaded() const {
    return m_offline_map_loaded;
}
void OASkycopeModel::setOfflineMapLoaded(const bool &offline_map_loaded) {
    m_offline_map_loaded = offline_map_loaded;
    m_offline_map_loaded_isSet = true;
}

bool OASkycopeModel::is_offline_map_loaded_Set() const{
    return m_offline_map_loaded_isSet;
}

bool OASkycopeModel::is_offline_map_loaded_Valid() const{
    return m_offline_map_loaded_isValid;
}

bool OASkycopeModel::isOnlineMapEnabled() const {
    return m_online_map_enabled;
}
void OASkycopeModel::setOnlineMapEnabled(const bool &online_map_enabled) {
    m_online_map_enabled = online_map_enabled;
    m_online_map_enabled_isSet = true;
}

bool OASkycopeModel::is_online_map_enabled_Set() const{
    return m_online_map_enabled_isSet;
}

bool OASkycopeModel::is_online_map_enabled_Valid() const{
    return m_online_map_enabled_isValid;
}

QMap<QString, OASkycopeSensor> OASkycopeModel::getSensorsInfo() const {
    return m_sensors_info;
}
void OASkycopeModel::setSensorsInfo(const QMap<QString, OASkycopeSensor> &sensors_info) {
    m_sensors_info = sensors_info;
    m_sensors_info_isSet = true;
}

bool OASkycopeModel::is_sensors_info_Set() const{
    return m_sensors_info_isSet;
}

bool OASkycopeModel::is_sensors_info_Valid() const{
    return m_sensors_info_isValid;
}

bool OASkycopeModel::isSettingMode() const {
    return m_setting_mode;
}
void OASkycopeModel::setSettingMode(const bool &setting_mode) {
    m_setting_mode = setting_mode;
    m_setting_mode_isSet = true;
}

bool OASkycopeModel::is_setting_mode_Set() const{
    return m_setting_mode_isSet;
}

bool OASkycopeModel::is_setting_mode_Valid() const{
    return m_setting_mode_isValid;
}

bool OASkycopeModel::isShowEnhancedFeatures() const {
    return m_show_enhanced_features;
}
void OASkycopeModel::setShowEnhancedFeatures(const bool &show_enhanced_features) {
    m_show_enhanced_features = show_enhanced_features;
    m_show_enhanced_features_isSet = true;
}

bool OASkycopeModel::is_show_enhanced_features_Set() const{
    return m_show_enhanced_features_isSet;
}

bool OASkycopeModel::is_show_enhanced_features_Valid() const{
    return m_show_enhanced_features_isValid;
}

qint32 OASkycopeModel::getTotalDevices() const {
    return m_total_devices;
}
void OASkycopeModel::setTotalDevices(const qint32 &total_devices) {
    m_total_devices = total_devices;
    m_total_devices_isSet = true;
}

bool OASkycopeModel::is_total_devices_Set() const{
    return m_total_devices_isSet;
}

bool OASkycopeModel::is_total_devices_Valid() const{
    return m_total_devices_isValid;
}

qint32 OASkycopeModel::getTotalRemoteIds() const {
    return m_total_remote_ids;
}
void OASkycopeModel::setTotalRemoteIds(const qint32 &total_remote_ids) {
    m_total_remote_ids = total_remote_ids;
    m_total_remote_ids_isSet = true;
}

bool OASkycopeModel::is_total_remote_ids_Set() const{
    return m_total_remote_ids_isSet;
}

bool OASkycopeModel::is_total_remote_ids_Valid() const{
    return m_total_remote_ids_isValid;
}

qint32 OASkycopeModel::getTotalWifiDevices() const {
    return m_total_wifi_devices;
}
void OASkycopeModel::setTotalWifiDevices(const qint32 &total_wifi_devices) {
    m_total_wifi_devices = total_wifi_devices;
    m_total_wifi_devices_isSet = true;
}

bool OASkycopeModel::is_total_wifi_devices_Set() const{
    return m_total_wifi_devices_isSet;
}

bool OASkycopeModel::is_total_wifi_devices_Valid() const{
    return m_total_wifi_devices_isValid;
}

QMap<QString, OASkycopeDroneWifiDevice> OASkycopeModel::getUnknownWifiDevicesInfo() const {
    return m_unknown_wifi_devices_info;
}
void OASkycopeModel::setUnknownWifiDevicesInfo(const QMap<QString, OASkycopeDroneWifiDevice> &unknown_wifi_devices_info) {
    m_unknown_wifi_devices_info = unknown_wifi_devices_info;
    m_unknown_wifi_devices_info_isSet = true;
}

bool OASkycopeModel::is_unknown_wifi_devices_info_Set() const{
    return m_unknown_wifi_devices_info_isSet;
}

bool OASkycopeModel::is_unknown_wifi_devices_info_Valid() const{
    return m_unknown_wifi_devices_info_isValid;
}

OASkycopeObject OASkycopeModel::getUpgradeStatus() const {
    return m_upgrade_status;
}
void OASkycopeModel::setUpgradeStatus(const OASkycopeObject &upgrade_status) {
    m_upgrade_status = upgrade_status;
    m_upgrade_status_isSet = true;
}

bool OASkycopeModel::is_upgrade_status_Set() const{
    return m_upgrade_status_isSet;
}

bool OASkycopeModel::is_upgrade_status_Valid() const{
    return m_upgrade_status_isValid;
}

OASkycopeObject OASkycopeModel::getUserLocations() const {
    return m_user_locations;
}
void OASkycopeModel::setUserLocations(const OASkycopeObject &user_locations) {
    m_user_locations = user_locations;
    m_user_locations_isSet = true;
}

bool OASkycopeModel::is_user_locations_Set() const{
    return m_user_locations_isSet;
}

bool OASkycopeModel::is_user_locations_Valid() const{
    return m_user_locations_isValid;
}

QString OASkycopeModel::getVersion() const {
    return m_version;
}
void OASkycopeModel::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OASkycopeModel::is_version_Set() const{
    return m_version_isSet;
}

bool OASkycopeModel::is_version_Valid() const{
    return m_version_isValid;
}

bool OASkycopeModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_center_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_migration_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defense_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_devices_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_drone_list_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gps_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_danger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_defense_features_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_detection_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_spectrum_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_all_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_anchor_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_local_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_remote_id_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_unknown_wifi_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lf_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_ai_ignorable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nondf_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_map_loaded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_map_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensors_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_setting_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_enhanced_features_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_devices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_remote_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_wifi_devices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unknown_wifi_devices_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_locations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OASkycopeModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_devices_info_isValid && m_sensors_info_isValid && m_unknown_wifi_devices_info_isValid && true;
}

} // namespace OASkycope
