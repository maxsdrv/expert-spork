/**
 * 
 * Description text
 *
 * The version of the OpenAPI document: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OASkycopeModule1.h
 *
 * 
 */

#ifndef OASkycopeModule1_H
#define OASkycopeModule1_H

#include <QJsonObject>

#include "OASkycopeDetectingFrequency.h"
#include "OASkycopeDiskIoUsage.h"
#include "OASkycopeFixedGain.h"
#include "OASkycopeNetworkUsage.h"
#include "OASkycopeSomStatus.h"
#include "OASkycopeSomTemp.h"
#include <QString>

#include "OASkycopeEnum.h"
#include "OASkycopeObject.h"

namespace OASkycope {
class OASkycopeDetectingFrequency;
class OASkycopeDiskIoUsage;
class OASkycopeFixedGain;
class OASkycopeNetworkUsage;
class OASkycopeSomStatus;
class OASkycopeSomTemp;

class OASkycopeModule1 : public OASkycopeObject {
public:
    OASkycopeModule1();
    OASkycopeModule1(QString json);
    ~OASkycopeModule1() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCpuTemp() const;
    void setCpuTemp(const double &cpu_temp);
    bool is_cpu_temp_Set() const;
    bool is_cpu_temp_Valid() const;

    double getCpuUsage() const;
    void setCpuUsage(const double &cpu_usage);
    bool is_cpu_usage_Set() const;
    bool is_cpu_usage_Valid() const;

    OASkycopeDetectingFrequency getDetectingFrequency() const;
    void setDetectingFrequency(const OASkycopeDetectingFrequency &detecting_frequency);
    bool is_detecting_frequency_Set() const;
    bool is_detecting_frequency_Valid() const;

    OASkycopeDiskIoUsage getDiskIoUsage() const;
    void setDiskIoUsage(const OASkycopeDiskIoUsage &disk_io_usage);
    bool is_disk_io_usage_Set() const;
    bool is_disk_io_usage_Valid() const;

    QString getDiskUsage() const;
    void setDiskUsage(const QString &disk_usage);
    bool is_disk_usage_Set() const;
    bool is_disk_usage_Valid() const;

    QString getEngineStatus() const;
    void setEngineStatus(const QString &engine_status);
    bool is_engine_status_Set() const;
    bool is_engine_status_Valid() const;

    OASkycopeFixedGain getFixedGain() const;
    void setFixedGain(const OASkycopeFixedGain &fixed_gain);
    bool is_fixed_gain_Set() const;
    bool is_fixed_gain_Valid() const;

    double getGpuTemp() const;
    void setGpuTemp(const double &gpu_temp);
    bool is_gpu_temp_Set() const;
    bool is_gpu_temp_Valid() const;

    double getGpuUsage() const;
    void setGpuUsage(const double &gpu_usage);
    bool is_gpu_usage_Set() const;
    bool is_gpu_usage_Valid() const;

    double getMemUsage() const;
    void setMemUsage(const double &mem_usage);
    bool is_mem_usage_Set() const;
    bool is_mem_usage_Valid() const;

    QString getMgmtStatus() const;
    void setMgmtStatus(const QString &mgmt_status);
    bool is_mgmt_status_Set() const;
    bool is_mgmt_status_Valid() const;

    OASkycopeNetworkUsage getNetworkUsage() const;
    void setNetworkUsage(const OASkycopeNetworkUsage &network_usage);
    bool is_network_usage_Set() const;
    bool is_network_usage_Valid() const;

    qint32 getPowerConsumption() const;
    void setPowerConsumption(const qint32 &power_consumption);
    bool is_power_consumption_Set() const;
    bool is_power_consumption_Valid() const;

    QString getPowerOptionsStatus() const;
    void setPowerOptionsStatus(const QString &power_options_status);
    bool is_power_options_status_Set() const;
    bool is_power_options_status_Valid() const;

    QString getSoftwareBuild() const;
    void setSoftwareBuild(const QString &software_build);
    bool is_software_build_Set() const;
    bool is_software_build_Valid() const;

    QString getSoftwareVersion() const;
    void setSoftwareVersion(const QString &software_version);
    bool is_software_version_Set() const;
    bool is_software_version_Valid() const;

    OASkycopeSomStatus getSomStatus() const;
    void setSomStatus(const OASkycopeSomStatus &som_status);
    bool is_som_status_Set() const;
    bool is_som_status_Valid() const;

    OASkycopeSomTemp getSomTemp() const;
    void setSomTemp(const OASkycopeSomTemp &som_temp);
    bool is_som_temp_Set() const;
    bool is_som_temp_Valid() const;

    double getUptime() const;
    void setUptime(const double &uptime);
    bool is_uptime_Set() const;
    bool is_uptime_Valid() const;

    double getXpuFreq() const;
    void setXpuFreq(const double &xpu_freq);
    bool is_xpu_freq_Set() const;
    bool is_xpu_freq_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_cpu_temp;
    bool m_cpu_temp_isSet;
    bool m_cpu_temp_isValid;

    double m_cpu_usage;
    bool m_cpu_usage_isSet;
    bool m_cpu_usage_isValid;

    OASkycopeDetectingFrequency m_detecting_frequency;
    bool m_detecting_frequency_isSet;
    bool m_detecting_frequency_isValid;

    OASkycopeDiskIoUsage m_disk_io_usage;
    bool m_disk_io_usage_isSet;
    bool m_disk_io_usage_isValid;

    QString m_disk_usage;
    bool m_disk_usage_isSet;
    bool m_disk_usage_isValid;

    QString m_engine_status;
    bool m_engine_status_isSet;
    bool m_engine_status_isValid;

    OASkycopeFixedGain m_fixed_gain;
    bool m_fixed_gain_isSet;
    bool m_fixed_gain_isValid;

    double m_gpu_temp;
    bool m_gpu_temp_isSet;
    bool m_gpu_temp_isValid;

    double m_gpu_usage;
    bool m_gpu_usage_isSet;
    bool m_gpu_usage_isValid;

    double m_mem_usage;
    bool m_mem_usage_isSet;
    bool m_mem_usage_isValid;

    QString m_mgmt_status;
    bool m_mgmt_status_isSet;
    bool m_mgmt_status_isValid;

    OASkycopeNetworkUsage m_network_usage;
    bool m_network_usage_isSet;
    bool m_network_usage_isValid;

    qint32 m_power_consumption;
    bool m_power_consumption_isSet;
    bool m_power_consumption_isValid;

    QString m_power_options_status;
    bool m_power_options_status_isSet;
    bool m_power_options_status_isValid;

    QString m_software_build;
    bool m_software_build_isSet;
    bool m_software_build_isValid;

    QString m_software_version;
    bool m_software_version_isSet;
    bool m_software_version_isValid;

    OASkycopeSomStatus m_som_status;
    bool m_som_status_isSet;
    bool m_som_status_isValid;

    OASkycopeSomTemp m_som_temp;
    bool m_som_temp_isSet;
    bool m_som_temp_isValid;

    double m_uptime;
    bool m_uptime_isSet;
    bool m_uptime_isValid;

    double m_xpu_freq;
    bool m_xpu_freq_isSet;
    bool m_xpu_freq_isValid;
};

} // namespace OASkycope

Q_DECLARE_METATYPE(OASkycope::OASkycopeModule1)

#endif // OASkycopeModule1_H
