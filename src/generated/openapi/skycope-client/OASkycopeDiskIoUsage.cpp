/**
 * 
 * Description text
 *
 * The version of the OpenAPI document: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OASkycopeDiskIoUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OASkycopeHelpers.h"

namespace OASkycope {

OASkycopeDiskIoUsage::OASkycopeDiskIoUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OASkycopeDiskIoUsage::OASkycopeDiskIoUsage() {
    this->initializeModel();
}

OASkycopeDiskIoUsage::~OASkycopeDiskIoUsage() {}

void OASkycopeDiskIoUsage::initializeModel() {

    m_io_read_isSet = false;
    m_io_read_isValid = false;

    m_io_write_isSet = false;
    m_io_write_isValid = false;
}

void OASkycopeDiskIoUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OASkycopeDiskIoUsage::fromJsonObject(QJsonObject json) {

    m_io_read_isValid = ::OASkycope::fromJsonValue(m_io_read, json[QString("io_read")]);
    m_io_read_isSet = !json[QString("io_read")].isNull() && m_io_read_isValid;

    m_io_write_isValid = ::OASkycope::fromJsonValue(m_io_write, json[QString("io_write")]);
    m_io_write_isSet = !json[QString("io_write")].isNull() && m_io_write_isValid;
}

QString OASkycopeDiskIoUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OASkycopeDiskIoUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_io_read_isSet) {
        obj.insert(QString("io_read"), ::OASkycope::toJsonValue(m_io_read));
    }
    if (m_io_write_isSet) {
        obj.insert(QString("io_write"), ::OASkycope::toJsonValue(m_io_write));
    }
    return obj;
}

QString OASkycopeDiskIoUsage::getIoRead() const {
    return m_io_read;
}
void OASkycopeDiskIoUsage::setIoRead(const QString &io_read) {
    m_io_read = io_read;
    m_io_read_isSet = true;
}

bool OASkycopeDiskIoUsage::is_io_read_Set() const{
    return m_io_read_isSet;
}

bool OASkycopeDiskIoUsage::is_io_read_Valid() const{
    return m_io_read_isValid;
}

QString OASkycopeDiskIoUsage::getIoWrite() const {
    return m_io_write;
}
void OASkycopeDiskIoUsage::setIoWrite(const QString &io_write) {
    m_io_write = io_write;
    m_io_write_isSet = true;
}

bool OASkycopeDiskIoUsage::is_io_write_Set() const{
    return m_io_write_isSet;
}

bool OASkycopeDiskIoUsage::is_io_write_Valid() const{
    return m_io_write_isValid;
}

bool OASkycopeDiskIoUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_io_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_io_write_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OASkycopeDiskIoUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OASkycope
