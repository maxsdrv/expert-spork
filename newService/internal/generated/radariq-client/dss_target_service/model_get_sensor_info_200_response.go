/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dss_target_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetSensorInfo200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetSensorInfo200Response{}

// GetSensorInfo200Response struct for GetSensorInfo200Response
type GetSensorInfo200Response struct {
	SensorInfo SensorInfo `json:"sensor_info"`
}

type _GetSensorInfo200Response GetSensorInfo200Response

// NewGetSensorInfo200Response instantiates a new GetSensorInfo200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetSensorInfo200Response(sensorInfo SensorInfo) *GetSensorInfo200Response {
	this := GetSensorInfo200Response{}
	this.SensorInfo = sensorInfo
	return &this
}

// NewGetSensorInfo200ResponseWithDefaults instantiates a new GetSensorInfo200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetSensorInfo200ResponseWithDefaults() *GetSensorInfo200Response {
	this := GetSensorInfo200Response{}
	return &this
}

// GetSensorInfo returns the SensorInfo field value
func (o *GetSensorInfo200Response) GetSensorInfo() SensorInfo {
	if o == nil {
		var ret SensorInfo
		return ret
	}

	return o.SensorInfo
}

// GetSensorInfoOk returns a tuple with the SensorInfo field value
// and a boolean to check if the value has been set.
func (o *GetSensorInfo200Response) GetSensorInfoOk() (*SensorInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SensorInfo, true
}

// SetSensorInfo sets field value
func (o *GetSensorInfo200Response) SetSensorInfo(v SensorInfo) {
	o.SensorInfo = v
}

func (o GetSensorInfo200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetSensorInfo200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sensor_info"] = o.SensorInfo
	return toSerialize, nil
}

func (o *GetSensorInfo200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sensor_info",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetSensorInfo200Response := _GetSensorInfo200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetSensorInfo200Response)

	if err != nil {
		return err
	}

	*o = GetSensorInfo200Response(varGetSensorInfo200Response)

	return err
}

type NullableGetSensorInfo200Response struct {
	value *GetSensorInfo200Response
	isSet bool
}

func (v NullableGetSensorInfo200Response) Get() *GetSensorInfo200Response {
	return v.value
}

func (v *NullableGetSensorInfo200Response) Set(val *GetSensorInfo200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSensorInfo200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSensorInfo200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSensorInfo200Response(val *GetSensorInfo200Response) *NullableGetSensorInfo200Response {
	return &NullableGetSensorInfo200Response{value: val, isSet: true}
}

func (v NullableGetSensorInfo200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSensorInfo200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


