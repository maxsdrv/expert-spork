/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dss_target_service

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TrackPoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackPoint{}

// TrackPoint struct for TrackPoint
type TrackPoint struct {
	Coordinate *GeoCoordinate `json:"coordinate,omitempty"`
	Direction *GeoDirection `json:"direction,omitempty"`
	// date and time in ISO 8601 format with milliseconds
	Timestamp time.Time `json:"timestamp"`
}

type _TrackPoint TrackPoint

// NewTrackPoint instantiates a new TrackPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackPoint(timestamp time.Time) *TrackPoint {
	this := TrackPoint{}
	this.Timestamp = timestamp
	return &this
}

// NewTrackPointWithDefaults instantiates a new TrackPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackPointWithDefaults() *TrackPoint {
	this := TrackPoint{}
	return &this
}

// GetCoordinate returns the Coordinate field value if set, zero value otherwise.
func (o *TrackPoint) GetCoordinate() GeoCoordinate {
	if o == nil || IsNil(o.Coordinate) {
		var ret GeoCoordinate
		return ret
	}
	return *o.Coordinate
}

// GetCoordinateOk returns a tuple with the Coordinate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackPoint) GetCoordinateOk() (*GeoCoordinate, bool) {
	if o == nil || IsNil(o.Coordinate) {
		return nil, false
	}
	return o.Coordinate, true
}

// HasCoordinate returns a boolean if a field has been set.
func (o *TrackPoint) HasCoordinate() bool {
	if o != nil && !IsNil(o.Coordinate) {
		return true
	}

	return false
}

// SetCoordinate gets a reference to the given GeoCoordinate and assigns it to the Coordinate field.
func (o *TrackPoint) SetCoordinate(v GeoCoordinate) {
	o.Coordinate = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *TrackPoint) GetDirection() GeoDirection {
	if o == nil || IsNil(o.Direction) {
		var ret GeoDirection
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackPoint) GetDirectionOk() (*GeoDirection, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *TrackPoint) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given GeoDirection and assigns it to the Direction field.
func (o *TrackPoint) SetDirection(v GeoDirection) {
	o.Direction = &v
}

// GetTimestamp returns the Timestamp field value
func (o *TrackPoint) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *TrackPoint) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *TrackPoint) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

func (o TrackPoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackPoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Coordinate) {
		toSerialize["coordinate"] = o.Coordinate
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

func (o *TrackPoint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrackPoint := _TrackPoint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrackPoint)

	if err != nil {
		return err
	}

	*o = TrackPoint(varTrackPoint)

	return err
}

type NullableTrackPoint struct {
	value *TrackPoint
	isSet bool
}

func (v NullableTrackPoint) Get() *TrackPoint {
	return v.value
}

func (v *NullableTrackPoint) Set(val *TrackPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackPoint(val *TrackPoint) *NullableTrackPoint {
	return &NullableTrackPoint{value: val, isSet: true}
}

func (v NullableTrackPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


