/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dss_target_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeviceIdMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceIdMapping{}

// DeviceIdMapping struct for DeviceIdMapping
type DeviceIdMapping struct {
	// Matching sensor ID identification string based on UUID
	Id string `json:"id"`
	Fingerprint string `json:"fingerprint"`
	Class string `json:"class"`
}

type _DeviceIdMapping DeviceIdMapping

// NewDeviceIdMapping instantiates a new DeviceIdMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceIdMapping(id string, fingerprint string, class string) *DeviceIdMapping {
	this := DeviceIdMapping{}
	this.Id = id
	this.Fingerprint = fingerprint
	this.Class = class
	return &this
}

// NewDeviceIdMappingWithDefaults instantiates a new DeviceIdMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceIdMappingWithDefaults() *DeviceIdMapping {
	this := DeviceIdMapping{}
	return &this
}

// GetId returns the Id field value
func (o *DeviceIdMapping) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeviceIdMapping) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeviceIdMapping) SetId(v string) {
	o.Id = v
}

// GetFingerprint returns the Fingerprint field value
func (o *DeviceIdMapping) GetFingerprint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value
// and a boolean to check if the value has been set.
func (o *DeviceIdMapping) GetFingerprintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fingerprint, true
}

// SetFingerprint sets field value
func (o *DeviceIdMapping) SetFingerprint(v string) {
	o.Fingerprint = v
}

// GetClass returns the Class field value
func (o *DeviceIdMapping) GetClass() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Class
}

// GetClassOk returns a tuple with the Class field value
// and a boolean to check if the value has been set.
func (o *DeviceIdMapping) GetClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Class, true
}

// SetClass sets field value
func (o *DeviceIdMapping) SetClass(v string) {
	o.Class = v
}

func (o DeviceIdMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceIdMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["fingerprint"] = o.Fingerprint
	toSerialize["class"] = o.Class
	return toSerialize, nil
}

func (o *DeviceIdMapping) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"fingerprint",
		"class",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceIdMapping := _DeviceIdMapping{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeviceIdMapping)

	if err != nil {
		return err
	}

	*o = DeviceIdMapping(varDeviceIdMapping)

	return err
}

type NullableDeviceIdMapping struct {
	value *DeviceIdMapping
	isSet bool
}

func (v NullableDeviceIdMapping) Get() *DeviceIdMapping {
	return v.value
}

func (v *NullableDeviceIdMapping) Set(val *DeviceIdMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceIdMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceIdMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceIdMapping(val *DeviceIdMapping) *NullableDeviceIdMapping {
	return &NullableDeviceIdMapping{value: val, isSet: true}
}

func (v NullableDeviceIdMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceIdMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


