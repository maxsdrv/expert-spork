/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dss_target_service

import (
	"encoding/json"
)

// checks if the TargetDataPositionDirection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetDataPositionDirection{}

// TargetDataPositionDirection struct for TargetDataPositionDirection
type TargetDataPositionDirection struct {
	// Bearing on target in decimal degrees
	Bearing *float64 `json:"bearing,omitempty"`
	// Distance to target in meters
	Distance *float64 `json:"distance,omitempty"`
	// Target elevation in decimal degrees
	Elevation *float64 `json:"elevation,omitempty"`
}

// NewTargetDataPositionDirection instantiates a new TargetDataPositionDirection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetDataPositionDirection() *TargetDataPositionDirection {
	this := TargetDataPositionDirection{}
	return &this
}

// NewTargetDataPositionDirectionWithDefaults instantiates a new TargetDataPositionDirection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetDataPositionDirectionWithDefaults() *TargetDataPositionDirection {
	this := TargetDataPositionDirection{}
	return &this
}

// GetBearing returns the Bearing field value if set, zero value otherwise.
func (o *TargetDataPositionDirection) GetBearing() float64 {
	if o == nil || IsNil(o.Bearing) {
		var ret float64
		return ret
	}
	return *o.Bearing
}

// GetBearingOk returns a tuple with the Bearing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetDataPositionDirection) GetBearingOk() (*float64, bool) {
	if o == nil || IsNil(o.Bearing) {
		return nil, false
	}
	return o.Bearing, true
}

// HasBearing returns a boolean if a field has been set.
func (o *TargetDataPositionDirection) HasBearing() bool {
	if o != nil && !IsNil(o.Bearing) {
		return true
	}

	return false
}

// SetBearing gets a reference to the given float64 and assigns it to the Bearing field.
func (o *TargetDataPositionDirection) SetBearing(v float64) {
	o.Bearing = &v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *TargetDataPositionDirection) GetDistance() float64 {
	if o == nil || IsNil(o.Distance) {
		var ret float64
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetDataPositionDirection) GetDistanceOk() (*float64, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *TargetDataPositionDirection) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given float64 and assigns it to the Distance field.
func (o *TargetDataPositionDirection) SetDistance(v float64) {
	o.Distance = &v
}

// GetElevation returns the Elevation field value if set, zero value otherwise.
func (o *TargetDataPositionDirection) GetElevation() float64 {
	if o == nil || IsNil(o.Elevation) {
		var ret float64
		return ret
	}
	return *o.Elevation
}

// GetElevationOk returns a tuple with the Elevation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetDataPositionDirection) GetElevationOk() (*float64, bool) {
	if o == nil || IsNil(o.Elevation) {
		return nil, false
	}
	return o.Elevation, true
}

// HasElevation returns a boolean if a field has been set.
func (o *TargetDataPositionDirection) HasElevation() bool {
	if o != nil && !IsNil(o.Elevation) {
		return true
	}

	return false
}

// SetElevation gets a reference to the given float64 and assigns it to the Elevation field.
func (o *TargetDataPositionDirection) SetElevation(v float64) {
	o.Elevation = &v
}

func (o TargetDataPositionDirection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetDataPositionDirection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bearing) {
		toSerialize["bearing"] = o.Bearing
	}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.Elevation) {
		toSerialize["elevation"] = o.Elevation
	}
	return toSerialize, nil
}

type NullableTargetDataPositionDirection struct {
	value *TargetDataPositionDirection
	isSet bool
}

func (v NullableTargetDataPositionDirection) Get() *TargetDataPositionDirection {
	return v.value
}

func (v *NullableTargetDataPositionDirection) Set(val *TargetDataPositionDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetDataPositionDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetDataPositionDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetDataPositionDirection(val *TargetDataPositionDirection) *NullableTargetDataPositionDirection {
	return &NullableTargetDataPositionDirection{value: val, isSet: true}
}

func (v NullableTargetDataPositionDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetDataPositionDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


