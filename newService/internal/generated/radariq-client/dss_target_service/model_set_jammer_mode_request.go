/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dss_target_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SetJammerModeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetJammerModeRequest{}

// SetJammerModeRequest struct for SetJammerModeRequest
type SetJammerModeRequest struct {
	// Matching sensor ID identification string based on UUID
	Id string `json:"id"`
	JammerMode JammerMode `json:"jammer_mode"`
	// Timeout for AUTO mode in seconds, ignored for MANUAL
	Timeout int32 `json:"timeout"`
}

type _SetJammerModeRequest SetJammerModeRequest

// NewSetJammerModeRequest instantiates a new SetJammerModeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetJammerModeRequest(id string, jammerMode JammerMode, timeout int32) *SetJammerModeRequest {
	this := SetJammerModeRequest{}
	this.Id = id
	this.JammerMode = jammerMode
	this.Timeout = timeout
	return &this
}

// NewSetJammerModeRequestWithDefaults instantiates a new SetJammerModeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetJammerModeRequestWithDefaults() *SetJammerModeRequest {
	this := SetJammerModeRequest{}
	return &this
}

// GetId returns the Id field value
func (o *SetJammerModeRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SetJammerModeRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SetJammerModeRequest) SetId(v string) {
	o.Id = v
}

// GetJammerMode returns the JammerMode field value
func (o *SetJammerModeRequest) GetJammerMode() JammerMode {
	if o == nil {
		var ret JammerMode
		return ret
	}

	return o.JammerMode
}

// GetJammerModeOk returns a tuple with the JammerMode field value
// and a boolean to check if the value has been set.
func (o *SetJammerModeRequest) GetJammerModeOk() (*JammerMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JammerMode, true
}

// SetJammerMode sets field value
func (o *SetJammerModeRequest) SetJammerMode(v JammerMode) {
	o.JammerMode = v
}

// GetTimeout returns the Timeout field value
func (o *SetJammerModeRequest) GetTimeout() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value
// and a boolean to check if the value has been set.
func (o *SetJammerModeRequest) GetTimeoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeout, true
}

// SetTimeout sets field value
func (o *SetJammerModeRequest) SetTimeout(v int32) {
	o.Timeout = v
}

func (o SetJammerModeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetJammerModeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["jammer_mode"] = o.JammerMode
	toSerialize["timeout"] = o.Timeout
	return toSerialize, nil
}

func (o *SetJammerModeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"jammer_mode",
		"timeout",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetJammerModeRequest := _SetJammerModeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetJammerModeRequest)

	if err != nil {
		return err
	}

	*o = SetJammerModeRequest(varSetJammerModeRequest)

	return err
}

type NullableSetJammerModeRequest struct {
	value *SetJammerModeRequest
	isSet bool
}

func (v NullableSetJammerModeRequest) Get() *SetJammerModeRequest {
	return v.value
}

func (v *NullableSetJammerModeRequest) Set(val *SetJammerModeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSetJammerModeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSetJammerModeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetJammerModeRequest(val *SetJammerModeRequest) *NullableSetJammerModeRequest {
	return &NullableSetJammerModeRequest{value: val, isSet: true}
}

func (v NullableSetJammerModeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetJammerModeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


