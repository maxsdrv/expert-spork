/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dss_target_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LicenseStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseStatus{}

// LicenseStatus struct for LicenseStatus
type LicenseStatus struct {
	Valid bool `json:"valid"`
	Description string `json:"description"`
	ExpiryDate string `json:"expiry_date"`
	Signature string `json:"signature"`
}

type _LicenseStatus LicenseStatus

// NewLicenseStatus instantiates a new LicenseStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseStatus(valid bool, description string, expiryDate string, signature string) *LicenseStatus {
	this := LicenseStatus{}
	this.Valid = valid
	this.Description = description
	this.ExpiryDate = expiryDate
	this.Signature = signature
	return &this
}

// NewLicenseStatusWithDefaults instantiates a new LicenseStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseStatusWithDefaults() *LicenseStatus {
	this := LicenseStatus{}
	return &this
}

// GetValid returns the Valid field value
func (o *LicenseStatus) GetValid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Valid
}

// GetValidOk returns a tuple with the Valid field value
// and a boolean to check if the value has been set.
func (o *LicenseStatus) GetValidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Valid, true
}

// SetValid sets field value
func (o *LicenseStatus) SetValid(v bool) {
	o.Valid = v
}

// GetDescription returns the Description field value
func (o *LicenseStatus) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *LicenseStatus) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *LicenseStatus) SetDescription(v string) {
	o.Description = v
}

// GetExpiryDate returns the ExpiryDate field value
func (o *LicenseStatus) GetExpiryDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value
// and a boolean to check if the value has been set.
func (o *LicenseStatus) GetExpiryDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiryDate, true
}

// SetExpiryDate sets field value
func (o *LicenseStatus) SetExpiryDate(v string) {
	o.ExpiryDate = v
}

// GetSignature returns the Signature field value
func (o *LicenseStatus) GetSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value
// and a boolean to check if the value has been set.
func (o *LicenseStatus) GetSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Signature, true
}

// SetSignature sets field value
func (o *LicenseStatus) SetSignature(v string) {
	o.Signature = v
}

func (o LicenseStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["valid"] = o.Valid
	toSerialize["description"] = o.Description
	toSerialize["expiry_date"] = o.ExpiryDate
	toSerialize["signature"] = o.Signature
	return toSerialize, nil
}

func (o *LicenseStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"valid",
		"description",
		"expiry_date",
		"signature",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLicenseStatus := _LicenseStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLicenseStatus)

	if err != nil {
		return err
	}

	*o = LicenseStatus(varLicenseStatus)

	return err
}

type NullableLicenseStatus struct {
	value *LicenseStatus
	isSet bool
}

func (v NullableLicenseStatus) Get() *LicenseStatus {
	return v.value
}

func (v *NullableLicenseStatus) Set(val *LicenseStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseStatus(val *LicenseStatus) *NullableLicenseStatus {
	return &NullableLicenseStatus{value: val, isSet: true}
}

func (v NullableLicenseStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


