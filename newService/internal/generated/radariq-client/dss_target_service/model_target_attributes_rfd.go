/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dss_target_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TargetAttributesRFD type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetAttributesRFD{}

// TargetAttributesRFD struct for TargetAttributesRFD
type TargetAttributesRFD struct {
	Digital bool `json:"digital"`
	Frequencies []int32 `json:"frequencies"`
	Description *string `json:"description,omitempty"`
	Geolocation bool `json:"geolocation"`
}

type _TargetAttributesRFD TargetAttributesRFD

// NewTargetAttributesRFD instantiates a new TargetAttributesRFD object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetAttributesRFD(digital bool, frequencies []int32, geolocation bool) *TargetAttributesRFD {
	this := TargetAttributesRFD{}
	this.Digital = digital
	this.Frequencies = frequencies
	this.Geolocation = geolocation
	return &this
}

// NewTargetAttributesRFDWithDefaults instantiates a new TargetAttributesRFD object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetAttributesRFDWithDefaults() *TargetAttributesRFD {
	this := TargetAttributesRFD{}
	return &this
}

// GetDigital returns the Digital field value
func (o *TargetAttributesRFD) GetDigital() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Digital
}

// GetDigitalOk returns a tuple with the Digital field value
// and a boolean to check if the value has been set.
func (o *TargetAttributesRFD) GetDigitalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Digital, true
}

// SetDigital sets field value
func (o *TargetAttributesRFD) SetDigital(v bool) {
	o.Digital = v
}

// GetFrequencies returns the Frequencies field value
func (o *TargetAttributesRFD) GetFrequencies() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Frequencies
}

// GetFrequenciesOk returns a tuple with the Frequencies field value
// and a boolean to check if the value has been set.
func (o *TargetAttributesRFD) GetFrequenciesOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Frequencies, true
}

// SetFrequencies sets field value
func (o *TargetAttributesRFD) SetFrequencies(v []int32) {
	o.Frequencies = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TargetAttributesRFD) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetAttributesRFD) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TargetAttributesRFD) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TargetAttributesRFD) SetDescription(v string) {
	o.Description = &v
}

// GetGeolocation returns the Geolocation field value
func (o *TargetAttributesRFD) GetGeolocation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Geolocation
}

// GetGeolocationOk returns a tuple with the Geolocation field value
// and a boolean to check if the value has been set.
func (o *TargetAttributesRFD) GetGeolocationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Geolocation, true
}

// SetGeolocation sets field value
func (o *TargetAttributesRFD) SetGeolocation(v bool) {
	o.Geolocation = v
}

func (o TargetAttributesRFD) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetAttributesRFD) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["digital"] = o.Digital
	toSerialize["frequencies"] = o.Frequencies
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["geolocation"] = o.Geolocation
	return toSerialize, nil
}

func (o *TargetAttributesRFD) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"digital",
		"frequencies",
		"geolocation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTargetAttributesRFD := _TargetAttributesRFD{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTargetAttributesRFD)

	if err != nil {
		return err
	}

	*o = TargetAttributesRFD(varTargetAttributesRFD)

	return err
}

type NullableTargetAttributesRFD struct {
	value *TargetAttributesRFD
	isSet bool
}

func (v NullableTargetAttributesRFD) Get() *TargetAttributesRFD {
	return v.value
}

func (v *NullableTargetAttributesRFD) Set(val *TargetAttributesRFD) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetAttributesRFD) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetAttributesRFD) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetAttributesRFD(val *TargetAttributesRFD) *NullableTargetAttributesRFD {
	return &NullableTargetAttributesRFD{value: val, isSet: true}
}

func (v NullableTargetAttributesRFD) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetAttributesRFD) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


