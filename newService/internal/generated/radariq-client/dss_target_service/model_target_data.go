/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dss_target_service

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TargetData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetData{}

// TargetData struct for TargetData
type TargetData struct {
	// Matching sensor ID identification string based on UUID
	TargetId string `json:"target_id"`
	// Matching sensor ID identification string based on UUID
	SensorId *string `json:"sensor_id,omitempty"`
	// Matching sensor ID identification string based on UUID
	TrackId *string `json:"track_id,omitempty"`
	CameraTrack *CameraTrack `json:"camera_track,omitempty"`
	// List of linked alarm event ids
	AlarmIds []string `json:"alarm_ids,omitempty"`
	// List of linked classification event ids
	ClsIds []string `json:"cls_ids,omitempty"`
	ClassName ClassName `json:"class_name"`
	Attributes *TargetDataAttributes `json:"attributes,omitempty"`
	AlarmStatus AlarmStatus `json:"alarm_status"`
	Position *TargetDataPosition `json:"position,omitempty"`
	// date and time in ISO 8601 format with milliseconds
	LastUpdated time.Time `json:"last_updated"`
}

type _TargetData TargetData

// NewTargetData instantiates a new TargetData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetData(targetId string, className ClassName, alarmStatus AlarmStatus, lastUpdated time.Time) *TargetData {
	this := TargetData{}
	this.TargetId = targetId
	this.ClassName = className
	this.AlarmStatus = alarmStatus
	this.LastUpdated = lastUpdated
	return &this
}

// NewTargetDataWithDefaults instantiates a new TargetData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetDataWithDefaults() *TargetData {
	this := TargetData{}
	return &this
}

// GetTargetId returns the TargetId field value
func (o *TargetData) GetTargetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value
// and a boolean to check if the value has been set.
func (o *TargetData) GetTargetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetId, true
}

// SetTargetId sets field value
func (o *TargetData) SetTargetId(v string) {
	o.TargetId = v
}

// GetSensorId returns the SensorId field value if set, zero value otherwise.
func (o *TargetData) GetSensorId() string {
	if o == nil || IsNil(o.SensorId) {
		var ret string
		return ret
	}
	return *o.SensorId
}

// GetSensorIdOk returns a tuple with the SensorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetData) GetSensorIdOk() (*string, bool) {
	if o == nil || IsNil(o.SensorId) {
		return nil, false
	}
	return o.SensorId, true
}

// HasSensorId returns a boolean if a field has been set.
func (o *TargetData) HasSensorId() bool {
	if o != nil && !IsNil(o.SensorId) {
		return true
	}

	return false
}

// SetSensorId gets a reference to the given string and assigns it to the SensorId field.
func (o *TargetData) SetSensorId(v string) {
	o.SensorId = &v
}

// GetTrackId returns the TrackId field value if set, zero value otherwise.
func (o *TargetData) GetTrackId() string {
	if o == nil || IsNil(o.TrackId) {
		var ret string
		return ret
	}
	return *o.TrackId
}

// GetTrackIdOk returns a tuple with the TrackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetData) GetTrackIdOk() (*string, bool) {
	if o == nil || IsNil(o.TrackId) {
		return nil, false
	}
	return o.TrackId, true
}

// HasTrackId returns a boolean if a field has been set.
func (o *TargetData) HasTrackId() bool {
	if o != nil && !IsNil(o.TrackId) {
		return true
	}

	return false
}

// SetTrackId gets a reference to the given string and assigns it to the TrackId field.
func (o *TargetData) SetTrackId(v string) {
	o.TrackId = &v
}

// GetCameraTrack returns the CameraTrack field value if set, zero value otherwise.
func (o *TargetData) GetCameraTrack() CameraTrack {
	if o == nil || IsNil(o.CameraTrack) {
		var ret CameraTrack
		return ret
	}
	return *o.CameraTrack
}

// GetCameraTrackOk returns a tuple with the CameraTrack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetData) GetCameraTrackOk() (*CameraTrack, bool) {
	if o == nil || IsNil(o.CameraTrack) {
		return nil, false
	}
	return o.CameraTrack, true
}

// HasCameraTrack returns a boolean if a field has been set.
func (o *TargetData) HasCameraTrack() bool {
	if o != nil && !IsNil(o.CameraTrack) {
		return true
	}

	return false
}

// SetCameraTrack gets a reference to the given CameraTrack and assigns it to the CameraTrack field.
func (o *TargetData) SetCameraTrack(v CameraTrack) {
	o.CameraTrack = &v
}

// GetAlarmIds returns the AlarmIds field value if set, zero value otherwise.
func (o *TargetData) GetAlarmIds() []string {
	if o == nil || IsNil(o.AlarmIds) {
		var ret []string
		return ret
	}
	return o.AlarmIds
}

// GetAlarmIdsOk returns a tuple with the AlarmIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetData) GetAlarmIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AlarmIds) {
		return nil, false
	}
	return o.AlarmIds, true
}

// HasAlarmIds returns a boolean if a field has been set.
func (o *TargetData) HasAlarmIds() bool {
	if o != nil && !IsNil(o.AlarmIds) {
		return true
	}

	return false
}

// SetAlarmIds gets a reference to the given []string and assigns it to the AlarmIds field.
func (o *TargetData) SetAlarmIds(v []string) {
	o.AlarmIds = v
}

// GetClsIds returns the ClsIds field value if set, zero value otherwise.
func (o *TargetData) GetClsIds() []string {
	if o == nil || IsNil(o.ClsIds) {
		var ret []string
		return ret
	}
	return o.ClsIds
}

// GetClsIdsOk returns a tuple with the ClsIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetData) GetClsIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ClsIds) {
		return nil, false
	}
	return o.ClsIds, true
}

// HasClsIds returns a boolean if a field has been set.
func (o *TargetData) HasClsIds() bool {
	if o != nil && !IsNil(o.ClsIds) {
		return true
	}

	return false
}

// SetClsIds gets a reference to the given []string and assigns it to the ClsIds field.
func (o *TargetData) SetClsIds(v []string) {
	o.ClsIds = v
}

// GetClassName returns the ClassName field value
func (o *TargetData) GetClassName() ClassName {
	if o == nil {
		var ret ClassName
		return ret
	}

	return o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value
// and a boolean to check if the value has been set.
func (o *TargetData) GetClassNameOk() (*ClassName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassName, true
}

// SetClassName sets field value
func (o *TargetData) SetClassName(v ClassName) {
	o.ClassName = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *TargetData) GetAttributes() TargetDataAttributes {
	if o == nil || IsNil(o.Attributes) {
		var ret TargetDataAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetData) GetAttributesOk() (*TargetDataAttributes, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *TargetData) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given TargetDataAttributes and assigns it to the Attributes field.
func (o *TargetData) SetAttributes(v TargetDataAttributes) {
	o.Attributes = &v
}

// GetAlarmStatus returns the AlarmStatus field value
func (o *TargetData) GetAlarmStatus() AlarmStatus {
	if o == nil {
		var ret AlarmStatus
		return ret
	}

	return o.AlarmStatus
}

// GetAlarmStatusOk returns a tuple with the AlarmStatus field value
// and a boolean to check if the value has been set.
func (o *TargetData) GetAlarmStatusOk() (*AlarmStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlarmStatus, true
}

// SetAlarmStatus sets field value
func (o *TargetData) SetAlarmStatus(v AlarmStatus) {
	o.AlarmStatus = v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *TargetData) GetPosition() TargetDataPosition {
	if o == nil || IsNil(o.Position) {
		var ret TargetDataPosition
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetData) GetPositionOk() (*TargetDataPosition, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *TargetData) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given TargetDataPosition and assigns it to the Position field.
func (o *TargetData) SetPosition(v TargetDataPosition) {
	o.Position = &v
}

// GetLastUpdated returns the LastUpdated field value
func (o *TargetData) GetLastUpdated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value
// and a boolean to check if the value has been set.
func (o *TargetData) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdated, true
}

// SetLastUpdated sets field value
func (o *TargetData) SetLastUpdated(v time.Time) {
	o.LastUpdated = v
}

func (o TargetData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["target_id"] = o.TargetId
	if !IsNil(o.SensorId) {
		toSerialize["sensor_id"] = o.SensorId
	}
	if !IsNil(o.TrackId) {
		toSerialize["track_id"] = o.TrackId
	}
	if !IsNil(o.CameraTrack) {
		toSerialize["camera_track"] = o.CameraTrack
	}
	if !IsNil(o.AlarmIds) {
		toSerialize["alarm_ids"] = o.AlarmIds
	}
	if !IsNil(o.ClsIds) {
		toSerialize["cls_ids"] = o.ClsIds
	}
	toSerialize["class_name"] = o.ClassName
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	toSerialize["alarm_status"] = o.AlarmStatus
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	toSerialize["last_updated"] = o.LastUpdated
	return toSerialize, nil
}

func (o *TargetData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"target_id",
		"class_name",
		"alarm_status",
		"last_updated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTargetData := _TargetData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTargetData)

	if err != nil {
		return err
	}

	*o = TargetData(varTargetData)

	return err
}

type NullableTargetData struct {
	value *TargetData
	isSet bool
}

func (v NullableTargetData) Get() *TargetData {
	return v.value
}

func (v *NullableTargetData) Set(val *TargetData) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetData) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetData(val *TargetData) *NullableTargetData {
	return &NullableTargetData{value: val, isSet: true}
}

func (v NullableTargetData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


