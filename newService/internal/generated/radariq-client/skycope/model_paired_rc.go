/*


Description text

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package skycope

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PairedRC type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PairedRC{}

// PairedRC struct for PairedRC
type PairedRC struct {
	Id *string `json:"id,omitempty"`
	Status *string `json:"status,omitempty"`
	Gps Gps `json:"gps"`
	Type string `json:"type"`
	LdResult map[string]DroneSensorLdResult `json:"ld_result,omitempty"`
}

type _PairedRC PairedRC

// NewPairedRC instantiates a new PairedRC object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPairedRC(gps Gps, type_ string) *PairedRC {
	this := PairedRC{}
	this.Gps = gps
	this.Type = type_
	return &this
}

// NewPairedRCWithDefaults instantiates a new PairedRC object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPairedRCWithDefaults() *PairedRC {
	this := PairedRC{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PairedRC) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PairedRC) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PairedRC) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PairedRC) SetId(v string) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PairedRC) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PairedRC) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PairedRC) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PairedRC) SetStatus(v string) {
	o.Status = &v
}

// GetGps returns the Gps field value
func (o *PairedRC) GetGps() Gps {
	if o == nil {
		var ret Gps
		return ret
	}

	return o.Gps
}

// GetGpsOk returns a tuple with the Gps field value
// and a boolean to check if the value has been set.
func (o *PairedRC) GetGpsOk() (*Gps, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gps, true
}

// SetGps sets field value
func (o *PairedRC) SetGps(v Gps) {
	o.Gps = v
}

// GetType returns the Type field value
func (o *PairedRC) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PairedRC) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PairedRC) SetType(v string) {
	o.Type = v
}

// GetLdResult returns the LdResult field value if set, zero value otherwise.
func (o *PairedRC) GetLdResult() map[string]DroneSensorLdResult {
	if o == nil || IsNil(o.LdResult) {
		var ret map[string]DroneSensorLdResult
		return ret
	}
	return o.LdResult
}

// GetLdResultOk returns a tuple with the LdResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PairedRC) GetLdResultOk() (map[string]DroneSensorLdResult, bool) {
	if o == nil || IsNil(o.LdResult) {
		return map[string]DroneSensorLdResult{}, false
	}
	return o.LdResult, true
}

// HasLdResult returns a boolean if a field has been set.
func (o *PairedRC) HasLdResult() bool {
	if o != nil && !IsNil(o.LdResult) {
		return true
	}

	return false
}

// SetLdResult gets a reference to the given map[string]DroneSensorLdResult and assigns it to the LdResult field.
func (o *PairedRC) SetLdResult(v map[string]DroneSensorLdResult) {
	o.LdResult = v
}

func (o PairedRC) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PairedRC) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["gps"] = o.Gps
	toSerialize["type"] = o.Type
	if !IsNil(o.LdResult) {
		toSerialize["ld_result"] = o.LdResult
	}
	return toSerialize, nil
}

func (o *PairedRC) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"gps",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPairedRC := _PairedRC{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPairedRC)

	if err != nil {
		return err
	}

	*o = PairedRC(varPairedRC)

	return err
}

type NullablePairedRC struct {
	value *PairedRC
	isSet bool
}

func (v NullablePairedRC) Get() *PairedRC {
	return v.value
}

func (v *NullablePairedRC) Set(val *PairedRC) {
	v.value = val
	v.isSet = true
}

func (v NullablePairedRC) IsSet() bool {
	return v.isSet
}

func (v *NullablePairedRC) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePairedRC(val *PairedRC) *NullablePairedRC {
	return &NullablePairedRC{value: val, isSet: true}
}

func (v NullablePairedRC) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePairedRC) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


