/*


Description text

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package skycope

import (
	"encoding/json"
)

// checks if the SharedNames type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedNames{}

// SharedNames struct for SharedNames
type SharedNames struct {
	Devices []interface{} `json:"devices,omitempty"`
	IgnoredDevices *string `json:"ignored_devices,omitempty"`
	Protocol *string `json:"protocol,omitempty"`
}

// NewSharedNames instantiates a new SharedNames object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedNames() *SharedNames {
	this := SharedNames{}
	return &this
}

// NewSharedNamesWithDefaults instantiates a new SharedNames object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedNamesWithDefaults() *SharedNames {
	this := SharedNames{}
	return &this
}

// GetDevices returns the Devices field value if set, zero value otherwise.
func (o *SharedNames) GetDevices() []interface{} {
	if o == nil || IsNil(o.Devices) {
		var ret []interface{}
		return ret
	}
	return o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedNames) GetDevicesOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Devices) {
		return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *SharedNames) HasDevices() bool {
	if o != nil && !IsNil(o.Devices) {
		return true
	}

	return false
}

// SetDevices gets a reference to the given []interface{} and assigns it to the Devices field.
func (o *SharedNames) SetDevices(v []interface{}) {
	o.Devices = v
}

// GetIgnoredDevices returns the IgnoredDevices field value if set, zero value otherwise.
func (o *SharedNames) GetIgnoredDevices() string {
	if o == nil || IsNil(o.IgnoredDevices) {
		var ret string
		return ret
	}
	return *o.IgnoredDevices
}

// GetIgnoredDevicesOk returns a tuple with the IgnoredDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedNames) GetIgnoredDevicesOk() (*string, bool) {
	if o == nil || IsNil(o.IgnoredDevices) {
		return nil, false
	}
	return o.IgnoredDevices, true
}

// HasIgnoredDevices returns a boolean if a field has been set.
func (o *SharedNames) HasIgnoredDevices() bool {
	if o != nil && !IsNil(o.IgnoredDevices) {
		return true
	}

	return false
}

// SetIgnoredDevices gets a reference to the given string and assigns it to the IgnoredDevices field.
func (o *SharedNames) SetIgnoredDevices(v string) {
	o.IgnoredDevices = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *SharedNames) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedNames) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *SharedNames) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *SharedNames) SetProtocol(v string) {
	o.Protocol = &v
}

func (o SharedNames) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedNames) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Devices) {
		toSerialize["devices"] = o.Devices
	}
	if !IsNil(o.IgnoredDevices) {
		toSerialize["ignored_devices"] = o.IgnoredDevices
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	return toSerialize, nil
}

type NullableSharedNames struct {
	value *SharedNames
	isSet bool
}

func (v NullableSharedNames) Get() *SharedNames {
	return v.value
}

func (v *NullableSharedNames) Set(val *SharedNames) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedNames) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedNames(val *SharedNames) *NullableSharedNames {
	return &NullableSharedNames{value: val, isSet: true}
}

func (v NullableSharedNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


