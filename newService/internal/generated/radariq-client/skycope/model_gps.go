/*


Description text

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package skycope

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Gps type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Gps{}

// Gps struct for Gps
type Gps struct {
	Lat float32 `json:"lat"`
	Lng float32 `json:"lng"`
}

type _Gps Gps

// NewGps instantiates a new Gps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGps(lat float32, lng float32) *Gps {
	this := Gps{}
	this.Lat = lat
	this.Lng = lng
	return &this
}

// NewGpsWithDefaults instantiates a new Gps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGpsWithDefaults() *Gps {
	this := Gps{}
	return &this
}

// GetLat returns the Lat field value
func (o *Gps) GetLat() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Lat
}

// GetLatOk returns a tuple with the Lat field value
// and a boolean to check if the value has been set.
func (o *Gps) GetLatOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lat, true
}

// SetLat sets field value
func (o *Gps) SetLat(v float32) {
	o.Lat = v
}

// GetLng returns the Lng field value
func (o *Gps) GetLng() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Lng
}

// GetLngOk returns a tuple with the Lng field value
// and a boolean to check if the value has been set.
func (o *Gps) GetLngOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lng, true
}

// SetLng sets field value
func (o *Gps) SetLng(v float32) {
	o.Lng = v
}

func (o Gps) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Gps) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lat"] = o.Lat
	toSerialize["lng"] = o.Lng
	return toSerialize, nil
}

func (o *Gps) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lat",
		"lng",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGps := _Gps{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGps)

	if err != nil {
		return err
	}

	*o = Gps(varGps)

	return err
}

type NullableGps struct {
	value *Gps
	isSet bool
}

func (v NullableGps) Get() *Gps {
	return v.value
}

func (v *NullableGps) Set(val *Gps) {
	v.value = val
	v.isSet = true
}

func (v NullableGps) IsSet() bool {
	return v.isSet
}

func (v *NullableGps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGps(val *Gps) *NullableGps {
	return &NullableGps{value: val, isSet: true}
}

func (v NullableGps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


