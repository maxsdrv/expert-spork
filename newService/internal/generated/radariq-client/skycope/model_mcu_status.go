/*


Description text

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package skycope

import (
	"encoding/json"
	"fmt"
)

// McuStatus the model 'McuStatus'
type McuStatus string

// List of McuStatus
const (
	MCUSTATUS_CONNECTED McuStatus = "CONNECTED"
)

// All allowed values of McuStatus enum
var AllowedMcuStatusEnumValues = []McuStatus{
	"CONNECTED",
}

func (v *McuStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := McuStatus(value)
	for _, existing := range AllowedMcuStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid McuStatus", value)
}

// NewMcuStatusFromValue returns a pointer to a valid McuStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMcuStatusFromValue(v string) (*McuStatus, error) {
	ev := McuStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for McuStatus: valid values are %v", v, AllowedMcuStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v McuStatus) IsValid() bool {
	for _, existing := range AllowedMcuStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to McuStatus value
func (v McuStatus) Ptr() *McuStatus {
	return &v
}

type NullableMcuStatus struct {
	value *McuStatus
	isSet bool
}

func (v NullableMcuStatus) Get() *McuStatus {
	return v.value
}

func (v *NullableMcuStatus) Set(val *McuStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMcuStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMcuStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcuStatus(val *McuStatus) *NullableMcuStatus {
	return &NullableMcuStatus{value: val, isSet: true}
}

func (v NullableMcuStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcuStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

