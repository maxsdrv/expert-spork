/*


Description text

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package skycope

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Sensor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sensor{}

// Sensor struct for Sensor
type Sensor struct {
	AiEnabled *bool `json:"ai_enabled,omitempty"`
	Antenna *string `json:"antenna,omitempty"`
	AutoDefenseStatus bool `json:"auto_defense_status"`
	CaptureStatus *bool `json:"capture_status,omitempty"`
	Compass int32 `json:"compass"`
	CompassEnabled *bool `json:"compass_enabled,omitempty"`
	ConfiguredGps *bool `json:"configured_gps,omitempty"`
	CoreProtectionRadius *int32 `json:"core_protection_radius,omitempty"`
	DefenseRadius int32 `json:"defense_radius"`
	DetectionRadius *int32 `json:"detection_radius,omitempty"`
	DfConeSectors map[string]interface{} `json:"df_cone_sectors,omitempty"`
	DiskHasSpace *bool `json:"disk_has_space,omitempty"`
	DvStatus *bool `json:"dv_status,omitempty"`
	Gps Gps `json:"gps"`
	GpsSignal []int32 `json:"gps_signal,omitempty"`
	GpsSignalGood *bool `json:"gps_signal_good,omitempty"`
	HasTddPa *bool `json:"has_tdd_pa,omitempty"`
	Ip *string `json:"ip,omitempty"`
	IsAnchorServer *bool `json:"is_anchor_server,omitempty"`
	IsDfEnabled *bool `json:"is_df_enabled,omitempty"`
	IsRmserviceOn *bool `json:"is_rmservice_on,omitempty"`
	IsWidebandEnabled *bool `json:"is_wideband_enabled,omitempty"`
	LicenseLanguage *string `json:"license_language,omitempty"`
	MassDefenseStatus *bool `json:"mass_defense_status,omitempty"`
	McuStatus McuStatus `json:"mcu_status"`
	MgmtDetails *MgmtDetails `json:"mgmt_details,omitempty"`
	NfzSpoofStatus *NfzSpoofStatus `json:"nfz_spoof_status,omitempty"`
	NoiseList []interface{} `json:"noise_list,omitempty"`
	Ou *string `json:"ou,omitempty"`
	RmserviceMgmtPort *string `json:"rmservice_mgmt_port,omitempty"`
	RmservicePort *string `json:"rmservice_port,omitempty"`
	SanityTestStatus *bool `json:"sanity_test_status,omitempty"`
	Sectors *string `json:"sectors,omitempty"`
	SectorsLabel *string `json:"sectors_label,omitempty"`
	SensorName *string `json:"sensor_name,omitempty"`
	Status Status `json:"status"`
	Termdate *int32 `json:"termdate,omitempty"`
	WifiStatus WifiStatus `json:"wifi_status"`
}

type _Sensor Sensor

// NewSensor instantiates a new Sensor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensor(autoDefenseStatus bool, compass int32, defenseRadius int32, gps Gps, mcuStatus McuStatus, status Status, wifiStatus WifiStatus) *Sensor {
	this := Sensor{}
	this.AutoDefenseStatus = autoDefenseStatus
	this.Compass = compass
	this.DefenseRadius = defenseRadius
	this.Gps = gps
	this.McuStatus = mcuStatus
	this.Status = status
	this.WifiStatus = wifiStatus
	return &this
}

// NewSensorWithDefaults instantiates a new Sensor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensorWithDefaults() *Sensor {
	this := Sensor{}
	return &this
}

// GetAiEnabled returns the AiEnabled field value if set, zero value otherwise.
func (o *Sensor) GetAiEnabled() bool {
	if o == nil || IsNil(o.AiEnabled) {
		var ret bool
		return ret
	}
	return *o.AiEnabled
}

// GetAiEnabledOk returns a tuple with the AiEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetAiEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AiEnabled) {
		return nil, false
	}
	return o.AiEnabled, true
}

// HasAiEnabled returns a boolean if a field has been set.
func (o *Sensor) HasAiEnabled() bool {
	if o != nil && !IsNil(o.AiEnabled) {
		return true
	}

	return false
}

// SetAiEnabled gets a reference to the given bool and assigns it to the AiEnabled field.
func (o *Sensor) SetAiEnabled(v bool) {
	o.AiEnabled = &v
}

// GetAntenna returns the Antenna field value if set, zero value otherwise.
func (o *Sensor) GetAntenna() string {
	if o == nil || IsNil(o.Antenna) {
		var ret string
		return ret
	}
	return *o.Antenna
}

// GetAntennaOk returns a tuple with the Antenna field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetAntennaOk() (*string, bool) {
	if o == nil || IsNil(o.Antenna) {
		return nil, false
	}
	return o.Antenna, true
}

// HasAntenna returns a boolean if a field has been set.
func (o *Sensor) HasAntenna() bool {
	if o != nil && !IsNil(o.Antenna) {
		return true
	}

	return false
}

// SetAntenna gets a reference to the given string and assigns it to the Antenna field.
func (o *Sensor) SetAntenna(v string) {
	o.Antenna = &v
}

// GetAutoDefenseStatus returns the AutoDefenseStatus field value
func (o *Sensor) GetAutoDefenseStatus() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutoDefenseStatus
}

// GetAutoDefenseStatusOk returns a tuple with the AutoDefenseStatus field value
// and a boolean to check if the value has been set.
func (o *Sensor) GetAutoDefenseStatusOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoDefenseStatus, true
}

// SetAutoDefenseStatus sets field value
func (o *Sensor) SetAutoDefenseStatus(v bool) {
	o.AutoDefenseStatus = v
}

// GetCaptureStatus returns the CaptureStatus field value if set, zero value otherwise.
func (o *Sensor) GetCaptureStatus() bool {
	if o == nil || IsNil(o.CaptureStatus) {
		var ret bool
		return ret
	}
	return *o.CaptureStatus
}

// GetCaptureStatusOk returns a tuple with the CaptureStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetCaptureStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.CaptureStatus) {
		return nil, false
	}
	return o.CaptureStatus, true
}

// HasCaptureStatus returns a boolean if a field has been set.
func (o *Sensor) HasCaptureStatus() bool {
	if o != nil && !IsNil(o.CaptureStatus) {
		return true
	}

	return false
}

// SetCaptureStatus gets a reference to the given bool and assigns it to the CaptureStatus field.
func (o *Sensor) SetCaptureStatus(v bool) {
	o.CaptureStatus = &v
}

// GetCompass returns the Compass field value
func (o *Sensor) GetCompass() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Compass
}

// GetCompassOk returns a tuple with the Compass field value
// and a boolean to check if the value has been set.
func (o *Sensor) GetCompassOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Compass, true
}

// SetCompass sets field value
func (o *Sensor) SetCompass(v int32) {
	o.Compass = v
}

// GetCompassEnabled returns the CompassEnabled field value if set, zero value otherwise.
func (o *Sensor) GetCompassEnabled() bool {
	if o == nil || IsNil(o.CompassEnabled) {
		var ret bool
		return ret
	}
	return *o.CompassEnabled
}

// GetCompassEnabledOk returns a tuple with the CompassEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetCompassEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CompassEnabled) {
		return nil, false
	}
	return o.CompassEnabled, true
}

// HasCompassEnabled returns a boolean if a field has been set.
func (o *Sensor) HasCompassEnabled() bool {
	if o != nil && !IsNil(o.CompassEnabled) {
		return true
	}

	return false
}

// SetCompassEnabled gets a reference to the given bool and assigns it to the CompassEnabled field.
func (o *Sensor) SetCompassEnabled(v bool) {
	o.CompassEnabled = &v
}

// GetConfiguredGps returns the ConfiguredGps field value if set, zero value otherwise.
func (o *Sensor) GetConfiguredGps() bool {
	if o == nil || IsNil(o.ConfiguredGps) {
		var ret bool
		return ret
	}
	return *o.ConfiguredGps
}

// GetConfiguredGpsOk returns a tuple with the ConfiguredGps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetConfiguredGpsOk() (*bool, bool) {
	if o == nil || IsNil(o.ConfiguredGps) {
		return nil, false
	}
	return o.ConfiguredGps, true
}

// HasConfiguredGps returns a boolean if a field has been set.
func (o *Sensor) HasConfiguredGps() bool {
	if o != nil && !IsNil(o.ConfiguredGps) {
		return true
	}

	return false
}

// SetConfiguredGps gets a reference to the given bool and assigns it to the ConfiguredGps field.
func (o *Sensor) SetConfiguredGps(v bool) {
	o.ConfiguredGps = &v
}

// GetCoreProtectionRadius returns the CoreProtectionRadius field value if set, zero value otherwise.
func (o *Sensor) GetCoreProtectionRadius() int32 {
	if o == nil || IsNil(o.CoreProtectionRadius) {
		var ret int32
		return ret
	}
	return *o.CoreProtectionRadius
}

// GetCoreProtectionRadiusOk returns a tuple with the CoreProtectionRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetCoreProtectionRadiusOk() (*int32, bool) {
	if o == nil || IsNil(o.CoreProtectionRadius) {
		return nil, false
	}
	return o.CoreProtectionRadius, true
}

// HasCoreProtectionRadius returns a boolean if a field has been set.
func (o *Sensor) HasCoreProtectionRadius() bool {
	if o != nil && !IsNil(o.CoreProtectionRadius) {
		return true
	}

	return false
}

// SetCoreProtectionRadius gets a reference to the given int32 and assigns it to the CoreProtectionRadius field.
func (o *Sensor) SetCoreProtectionRadius(v int32) {
	o.CoreProtectionRadius = &v
}

// GetDefenseRadius returns the DefenseRadius field value
func (o *Sensor) GetDefenseRadius() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DefenseRadius
}

// GetDefenseRadiusOk returns a tuple with the DefenseRadius field value
// and a boolean to check if the value has been set.
func (o *Sensor) GetDefenseRadiusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefenseRadius, true
}

// SetDefenseRadius sets field value
func (o *Sensor) SetDefenseRadius(v int32) {
	o.DefenseRadius = v
}

// GetDetectionRadius returns the DetectionRadius field value if set, zero value otherwise.
func (o *Sensor) GetDetectionRadius() int32 {
	if o == nil || IsNil(o.DetectionRadius) {
		var ret int32
		return ret
	}
	return *o.DetectionRadius
}

// GetDetectionRadiusOk returns a tuple with the DetectionRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetDetectionRadiusOk() (*int32, bool) {
	if o == nil || IsNil(o.DetectionRadius) {
		return nil, false
	}
	return o.DetectionRadius, true
}

// HasDetectionRadius returns a boolean if a field has been set.
func (o *Sensor) HasDetectionRadius() bool {
	if o != nil && !IsNil(o.DetectionRadius) {
		return true
	}

	return false
}

// SetDetectionRadius gets a reference to the given int32 and assigns it to the DetectionRadius field.
func (o *Sensor) SetDetectionRadius(v int32) {
	o.DetectionRadius = &v
}

// GetDfConeSectors returns the DfConeSectors field value if set, zero value otherwise.
func (o *Sensor) GetDfConeSectors() map[string]interface{} {
	if o == nil || IsNil(o.DfConeSectors) {
		var ret map[string]interface{}
		return ret
	}
	return o.DfConeSectors
}

// GetDfConeSectorsOk returns a tuple with the DfConeSectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetDfConeSectorsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DfConeSectors) {
		return map[string]interface{}{}, false
	}
	return o.DfConeSectors, true
}

// HasDfConeSectors returns a boolean if a field has been set.
func (o *Sensor) HasDfConeSectors() bool {
	if o != nil && !IsNil(o.DfConeSectors) {
		return true
	}

	return false
}

// SetDfConeSectors gets a reference to the given map[string]interface{} and assigns it to the DfConeSectors field.
func (o *Sensor) SetDfConeSectors(v map[string]interface{}) {
	o.DfConeSectors = v
}

// GetDiskHasSpace returns the DiskHasSpace field value if set, zero value otherwise.
func (o *Sensor) GetDiskHasSpace() bool {
	if o == nil || IsNil(o.DiskHasSpace) {
		var ret bool
		return ret
	}
	return *o.DiskHasSpace
}

// GetDiskHasSpaceOk returns a tuple with the DiskHasSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetDiskHasSpaceOk() (*bool, bool) {
	if o == nil || IsNil(o.DiskHasSpace) {
		return nil, false
	}
	return o.DiskHasSpace, true
}

// HasDiskHasSpace returns a boolean if a field has been set.
func (o *Sensor) HasDiskHasSpace() bool {
	if o != nil && !IsNil(o.DiskHasSpace) {
		return true
	}

	return false
}

// SetDiskHasSpace gets a reference to the given bool and assigns it to the DiskHasSpace field.
func (o *Sensor) SetDiskHasSpace(v bool) {
	o.DiskHasSpace = &v
}

// GetDvStatus returns the DvStatus field value if set, zero value otherwise.
func (o *Sensor) GetDvStatus() bool {
	if o == nil || IsNil(o.DvStatus) {
		var ret bool
		return ret
	}
	return *o.DvStatus
}

// GetDvStatusOk returns a tuple with the DvStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetDvStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.DvStatus) {
		return nil, false
	}
	return o.DvStatus, true
}

// HasDvStatus returns a boolean if a field has been set.
func (o *Sensor) HasDvStatus() bool {
	if o != nil && !IsNil(o.DvStatus) {
		return true
	}

	return false
}

// SetDvStatus gets a reference to the given bool and assigns it to the DvStatus field.
func (o *Sensor) SetDvStatus(v bool) {
	o.DvStatus = &v
}

// GetGps returns the Gps field value
func (o *Sensor) GetGps() Gps {
	if o == nil {
		var ret Gps
		return ret
	}

	return o.Gps
}

// GetGpsOk returns a tuple with the Gps field value
// and a boolean to check if the value has been set.
func (o *Sensor) GetGpsOk() (*Gps, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gps, true
}

// SetGps sets field value
func (o *Sensor) SetGps(v Gps) {
	o.Gps = v
}

// GetGpsSignal returns the GpsSignal field value if set, zero value otherwise.
func (o *Sensor) GetGpsSignal() []int32 {
	if o == nil || IsNil(o.GpsSignal) {
		var ret []int32
		return ret
	}
	return o.GpsSignal
}

// GetGpsSignalOk returns a tuple with the GpsSignal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetGpsSignalOk() ([]int32, bool) {
	if o == nil || IsNil(o.GpsSignal) {
		return nil, false
	}
	return o.GpsSignal, true
}

// HasGpsSignal returns a boolean if a field has been set.
func (o *Sensor) HasGpsSignal() bool {
	if o != nil && !IsNil(o.GpsSignal) {
		return true
	}

	return false
}

// SetGpsSignal gets a reference to the given []int32 and assigns it to the GpsSignal field.
func (o *Sensor) SetGpsSignal(v []int32) {
	o.GpsSignal = v
}

// GetGpsSignalGood returns the GpsSignalGood field value if set, zero value otherwise.
func (o *Sensor) GetGpsSignalGood() bool {
	if o == nil || IsNil(o.GpsSignalGood) {
		var ret bool
		return ret
	}
	return *o.GpsSignalGood
}

// GetGpsSignalGoodOk returns a tuple with the GpsSignalGood field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetGpsSignalGoodOk() (*bool, bool) {
	if o == nil || IsNil(o.GpsSignalGood) {
		return nil, false
	}
	return o.GpsSignalGood, true
}

// HasGpsSignalGood returns a boolean if a field has been set.
func (o *Sensor) HasGpsSignalGood() bool {
	if o != nil && !IsNil(o.GpsSignalGood) {
		return true
	}

	return false
}

// SetGpsSignalGood gets a reference to the given bool and assigns it to the GpsSignalGood field.
func (o *Sensor) SetGpsSignalGood(v bool) {
	o.GpsSignalGood = &v
}

// GetHasTddPa returns the HasTddPa field value if set, zero value otherwise.
func (o *Sensor) GetHasTddPa() bool {
	if o == nil || IsNil(o.HasTddPa) {
		var ret bool
		return ret
	}
	return *o.HasTddPa
}

// GetHasTddPaOk returns a tuple with the HasTddPa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetHasTddPaOk() (*bool, bool) {
	if o == nil || IsNil(o.HasTddPa) {
		return nil, false
	}
	return o.HasTddPa, true
}

// HasHasTddPa returns a boolean if a field has been set.
func (o *Sensor) HasHasTddPa() bool {
	if o != nil && !IsNil(o.HasTddPa) {
		return true
	}

	return false
}

// SetHasTddPa gets a reference to the given bool and assigns it to the HasTddPa field.
func (o *Sensor) SetHasTddPa(v bool) {
	o.HasTddPa = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *Sensor) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *Sensor) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *Sensor) SetIp(v string) {
	o.Ip = &v
}

// GetIsAnchorServer returns the IsAnchorServer field value if set, zero value otherwise.
func (o *Sensor) GetIsAnchorServer() bool {
	if o == nil || IsNil(o.IsAnchorServer) {
		var ret bool
		return ret
	}
	return *o.IsAnchorServer
}

// GetIsAnchorServerOk returns a tuple with the IsAnchorServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetIsAnchorServerOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAnchorServer) {
		return nil, false
	}
	return o.IsAnchorServer, true
}

// HasIsAnchorServer returns a boolean if a field has been set.
func (o *Sensor) HasIsAnchorServer() bool {
	if o != nil && !IsNil(o.IsAnchorServer) {
		return true
	}

	return false
}

// SetIsAnchorServer gets a reference to the given bool and assigns it to the IsAnchorServer field.
func (o *Sensor) SetIsAnchorServer(v bool) {
	o.IsAnchorServer = &v
}

// GetIsDfEnabled returns the IsDfEnabled field value if set, zero value otherwise.
func (o *Sensor) GetIsDfEnabled() bool {
	if o == nil || IsNil(o.IsDfEnabled) {
		var ret bool
		return ret
	}
	return *o.IsDfEnabled
}

// GetIsDfEnabledOk returns a tuple with the IsDfEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetIsDfEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDfEnabled) {
		return nil, false
	}
	return o.IsDfEnabled, true
}

// HasIsDfEnabled returns a boolean if a field has been set.
func (o *Sensor) HasIsDfEnabled() bool {
	if o != nil && !IsNil(o.IsDfEnabled) {
		return true
	}

	return false
}

// SetIsDfEnabled gets a reference to the given bool and assigns it to the IsDfEnabled field.
func (o *Sensor) SetIsDfEnabled(v bool) {
	o.IsDfEnabled = &v
}

// GetIsRmserviceOn returns the IsRmserviceOn field value if set, zero value otherwise.
func (o *Sensor) GetIsRmserviceOn() bool {
	if o == nil || IsNil(o.IsRmserviceOn) {
		var ret bool
		return ret
	}
	return *o.IsRmserviceOn
}

// GetIsRmserviceOnOk returns a tuple with the IsRmserviceOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetIsRmserviceOnOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRmserviceOn) {
		return nil, false
	}
	return o.IsRmserviceOn, true
}

// HasIsRmserviceOn returns a boolean if a field has been set.
func (o *Sensor) HasIsRmserviceOn() bool {
	if o != nil && !IsNil(o.IsRmserviceOn) {
		return true
	}

	return false
}

// SetIsRmserviceOn gets a reference to the given bool and assigns it to the IsRmserviceOn field.
func (o *Sensor) SetIsRmserviceOn(v bool) {
	o.IsRmserviceOn = &v
}

// GetIsWidebandEnabled returns the IsWidebandEnabled field value if set, zero value otherwise.
func (o *Sensor) GetIsWidebandEnabled() bool {
	if o == nil || IsNil(o.IsWidebandEnabled) {
		var ret bool
		return ret
	}
	return *o.IsWidebandEnabled
}

// GetIsWidebandEnabledOk returns a tuple with the IsWidebandEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetIsWidebandEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsWidebandEnabled) {
		return nil, false
	}
	return o.IsWidebandEnabled, true
}

// HasIsWidebandEnabled returns a boolean if a field has been set.
func (o *Sensor) HasIsWidebandEnabled() bool {
	if o != nil && !IsNil(o.IsWidebandEnabled) {
		return true
	}

	return false
}

// SetIsWidebandEnabled gets a reference to the given bool and assigns it to the IsWidebandEnabled field.
func (o *Sensor) SetIsWidebandEnabled(v bool) {
	o.IsWidebandEnabled = &v
}

// GetLicenseLanguage returns the LicenseLanguage field value if set, zero value otherwise.
func (o *Sensor) GetLicenseLanguage() string {
	if o == nil || IsNil(o.LicenseLanguage) {
		var ret string
		return ret
	}
	return *o.LicenseLanguage
}

// GetLicenseLanguageOk returns a tuple with the LicenseLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetLicenseLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseLanguage) {
		return nil, false
	}
	return o.LicenseLanguage, true
}

// HasLicenseLanguage returns a boolean if a field has been set.
func (o *Sensor) HasLicenseLanguage() bool {
	if o != nil && !IsNil(o.LicenseLanguage) {
		return true
	}

	return false
}

// SetLicenseLanguage gets a reference to the given string and assigns it to the LicenseLanguage field.
func (o *Sensor) SetLicenseLanguage(v string) {
	o.LicenseLanguage = &v
}

// GetMassDefenseStatus returns the MassDefenseStatus field value if set, zero value otherwise.
func (o *Sensor) GetMassDefenseStatus() bool {
	if o == nil || IsNil(o.MassDefenseStatus) {
		var ret bool
		return ret
	}
	return *o.MassDefenseStatus
}

// GetMassDefenseStatusOk returns a tuple with the MassDefenseStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetMassDefenseStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.MassDefenseStatus) {
		return nil, false
	}
	return o.MassDefenseStatus, true
}

// HasMassDefenseStatus returns a boolean if a field has been set.
func (o *Sensor) HasMassDefenseStatus() bool {
	if o != nil && !IsNil(o.MassDefenseStatus) {
		return true
	}

	return false
}

// SetMassDefenseStatus gets a reference to the given bool and assigns it to the MassDefenseStatus field.
func (o *Sensor) SetMassDefenseStatus(v bool) {
	o.MassDefenseStatus = &v
}

// GetMcuStatus returns the McuStatus field value
func (o *Sensor) GetMcuStatus() McuStatus {
	if o == nil {
		var ret McuStatus
		return ret
	}

	return o.McuStatus
}

// GetMcuStatusOk returns a tuple with the McuStatus field value
// and a boolean to check if the value has been set.
func (o *Sensor) GetMcuStatusOk() (*McuStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.McuStatus, true
}

// SetMcuStatus sets field value
func (o *Sensor) SetMcuStatus(v McuStatus) {
	o.McuStatus = v
}

// GetMgmtDetails returns the MgmtDetails field value if set, zero value otherwise.
func (o *Sensor) GetMgmtDetails() MgmtDetails {
	if o == nil || IsNil(o.MgmtDetails) {
		var ret MgmtDetails
		return ret
	}
	return *o.MgmtDetails
}

// GetMgmtDetailsOk returns a tuple with the MgmtDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetMgmtDetailsOk() (*MgmtDetails, bool) {
	if o == nil || IsNil(o.MgmtDetails) {
		return nil, false
	}
	return o.MgmtDetails, true
}

// HasMgmtDetails returns a boolean if a field has been set.
func (o *Sensor) HasMgmtDetails() bool {
	if o != nil && !IsNil(o.MgmtDetails) {
		return true
	}

	return false
}

// SetMgmtDetails gets a reference to the given MgmtDetails and assigns it to the MgmtDetails field.
func (o *Sensor) SetMgmtDetails(v MgmtDetails) {
	o.MgmtDetails = &v
}

// GetNfzSpoofStatus returns the NfzSpoofStatus field value if set, zero value otherwise.
func (o *Sensor) GetNfzSpoofStatus() NfzSpoofStatus {
	if o == nil || IsNil(o.NfzSpoofStatus) {
		var ret NfzSpoofStatus
		return ret
	}
	return *o.NfzSpoofStatus
}

// GetNfzSpoofStatusOk returns a tuple with the NfzSpoofStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetNfzSpoofStatusOk() (*NfzSpoofStatus, bool) {
	if o == nil || IsNil(o.NfzSpoofStatus) {
		return nil, false
	}
	return o.NfzSpoofStatus, true
}

// HasNfzSpoofStatus returns a boolean if a field has been set.
func (o *Sensor) HasNfzSpoofStatus() bool {
	if o != nil && !IsNil(o.NfzSpoofStatus) {
		return true
	}

	return false
}

// SetNfzSpoofStatus gets a reference to the given NfzSpoofStatus and assigns it to the NfzSpoofStatus field.
func (o *Sensor) SetNfzSpoofStatus(v NfzSpoofStatus) {
	o.NfzSpoofStatus = &v
}

// GetNoiseList returns the NoiseList field value if set, zero value otherwise.
func (o *Sensor) GetNoiseList() []interface{} {
	if o == nil || IsNil(o.NoiseList) {
		var ret []interface{}
		return ret
	}
	return o.NoiseList
}

// GetNoiseListOk returns a tuple with the NoiseList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetNoiseListOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.NoiseList) {
		return nil, false
	}
	return o.NoiseList, true
}

// HasNoiseList returns a boolean if a field has been set.
func (o *Sensor) HasNoiseList() bool {
	if o != nil && !IsNil(o.NoiseList) {
		return true
	}

	return false
}

// SetNoiseList gets a reference to the given []interface{} and assigns it to the NoiseList field.
func (o *Sensor) SetNoiseList(v []interface{}) {
	o.NoiseList = v
}

// GetOu returns the Ou field value if set, zero value otherwise.
func (o *Sensor) GetOu() string {
	if o == nil || IsNil(o.Ou) {
		var ret string
		return ret
	}
	return *o.Ou
}

// GetOuOk returns a tuple with the Ou field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetOuOk() (*string, bool) {
	if o == nil || IsNil(o.Ou) {
		return nil, false
	}
	return o.Ou, true
}

// HasOu returns a boolean if a field has been set.
func (o *Sensor) HasOu() bool {
	if o != nil && !IsNil(o.Ou) {
		return true
	}

	return false
}

// SetOu gets a reference to the given string and assigns it to the Ou field.
func (o *Sensor) SetOu(v string) {
	o.Ou = &v
}

// GetRmserviceMgmtPort returns the RmserviceMgmtPort field value if set, zero value otherwise.
func (o *Sensor) GetRmserviceMgmtPort() string {
	if o == nil || IsNil(o.RmserviceMgmtPort) {
		var ret string
		return ret
	}
	return *o.RmserviceMgmtPort
}

// GetRmserviceMgmtPortOk returns a tuple with the RmserviceMgmtPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetRmserviceMgmtPortOk() (*string, bool) {
	if o == nil || IsNil(o.RmserviceMgmtPort) {
		return nil, false
	}
	return o.RmserviceMgmtPort, true
}

// HasRmserviceMgmtPort returns a boolean if a field has been set.
func (o *Sensor) HasRmserviceMgmtPort() bool {
	if o != nil && !IsNil(o.RmserviceMgmtPort) {
		return true
	}

	return false
}

// SetRmserviceMgmtPort gets a reference to the given string and assigns it to the RmserviceMgmtPort field.
func (o *Sensor) SetRmserviceMgmtPort(v string) {
	o.RmserviceMgmtPort = &v
}

// GetRmservicePort returns the RmservicePort field value if set, zero value otherwise.
func (o *Sensor) GetRmservicePort() string {
	if o == nil || IsNil(o.RmservicePort) {
		var ret string
		return ret
	}
	return *o.RmservicePort
}

// GetRmservicePortOk returns a tuple with the RmservicePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetRmservicePortOk() (*string, bool) {
	if o == nil || IsNil(o.RmservicePort) {
		return nil, false
	}
	return o.RmservicePort, true
}

// HasRmservicePort returns a boolean if a field has been set.
func (o *Sensor) HasRmservicePort() bool {
	if o != nil && !IsNil(o.RmservicePort) {
		return true
	}

	return false
}

// SetRmservicePort gets a reference to the given string and assigns it to the RmservicePort field.
func (o *Sensor) SetRmservicePort(v string) {
	o.RmservicePort = &v
}

// GetSanityTestStatus returns the SanityTestStatus field value if set, zero value otherwise.
func (o *Sensor) GetSanityTestStatus() bool {
	if o == nil || IsNil(o.SanityTestStatus) {
		var ret bool
		return ret
	}
	return *o.SanityTestStatus
}

// GetSanityTestStatusOk returns a tuple with the SanityTestStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetSanityTestStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.SanityTestStatus) {
		return nil, false
	}
	return o.SanityTestStatus, true
}

// HasSanityTestStatus returns a boolean if a field has been set.
func (o *Sensor) HasSanityTestStatus() bool {
	if o != nil && !IsNil(o.SanityTestStatus) {
		return true
	}

	return false
}

// SetSanityTestStatus gets a reference to the given bool and assigns it to the SanityTestStatus field.
func (o *Sensor) SetSanityTestStatus(v bool) {
	o.SanityTestStatus = &v
}

// GetSectors returns the Sectors field value if set, zero value otherwise.
func (o *Sensor) GetSectors() string {
	if o == nil || IsNil(o.Sectors) {
		var ret string
		return ret
	}
	return *o.Sectors
}

// GetSectorsOk returns a tuple with the Sectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetSectorsOk() (*string, bool) {
	if o == nil || IsNil(o.Sectors) {
		return nil, false
	}
	return o.Sectors, true
}

// HasSectors returns a boolean if a field has been set.
func (o *Sensor) HasSectors() bool {
	if o != nil && !IsNil(o.Sectors) {
		return true
	}

	return false
}

// SetSectors gets a reference to the given string and assigns it to the Sectors field.
func (o *Sensor) SetSectors(v string) {
	o.Sectors = &v
}

// GetSectorsLabel returns the SectorsLabel field value if set, zero value otherwise.
func (o *Sensor) GetSectorsLabel() string {
	if o == nil || IsNil(o.SectorsLabel) {
		var ret string
		return ret
	}
	return *o.SectorsLabel
}

// GetSectorsLabelOk returns a tuple with the SectorsLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetSectorsLabelOk() (*string, bool) {
	if o == nil || IsNil(o.SectorsLabel) {
		return nil, false
	}
	return o.SectorsLabel, true
}

// HasSectorsLabel returns a boolean if a field has been set.
func (o *Sensor) HasSectorsLabel() bool {
	if o != nil && !IsNil(o.SectorsLabel) {
		return true
	}

	return false
}

// SetSectorsLabel gets a reference to the given string and assigns it to the SectorsLabel field.
func (o *Sensor) SetSectorsLabel(v string) {
	o.SectorsLabel = &v
}

// GetSensorName returns the SensorName field value if set, zero value otherwise.
func (o *Sensor) GetSensorName() string {
	if o == nil || IsNil(o.SensorName) {
		var ret string
		return ret
	}
	return *o.SensorName
}

// GetSensorNameOk returns a tuple with the SensorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetSensorNameOk() (*string, bool) {
	if o == nil || IsNil(o.SensorName) {
		return nil, false
	}
	return o.SensorName, true
}

// HasSensorName returns a boolean if a field has been set.
func (o *Sensor) HasSensorName() bool {
	if o != nil && !IsNil(o.SensorName) {
		return true
	}

	return false
}

// SetSensorName gets a reference to the given string and assigns it to the SensorName field.
func (o *Sensor) SetSensorName(v string) {
	o.SensorName = &v
}

// GetStatus returns the Status field value
func (o *Sensor) GetStatus() Status {
	if o == nil {
		var ret Status
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Sensor) GetStatusOk() (*Status, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Sensor) SetStatus(v Status) {
	o.Status = v
}

// GetTermdate returns the Termdate field value if set, zero value otherwise.
func (o *Sensor) GetTermdate() int32 {
	if o == nil || IsNil(o.Termdate) {
		var ret int32
		return ret
	}
	return *o.Termdate
}

// GetTermdateOk returns a tuple with the Termdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sensor) GetTermdateOk() (*int32, bool) {
	if o == nil || IsNil(o.Termdate) {
		return nil, false
	}
	return o.Termdate, true
}

// HasTermdate returns a boolean if a field has been set.
func (o *Sensor) HasTermdate() bool {
	if o != nil && !IsNil(o.Termdate) {
		return true
	}

	return false
}

// SetTermdate gets a reference to the given int32 and assigns it to the Termdate field.
func (o *Sensor) SetTermdate(v int32) {
	o.Termdate = &v
}

// GetWifiStatus returns the WifiStatus field value
func (o *Sensor) GetWifiStatus() WifiStatus {
	if o == nil {
		var ret WifiStatus
		return ret
	}

	return o.WifiStatus
}

// GetWifiStatusOk returns a tuple with the WifiStatus field value
// and a boolean to check if the value has been set.
func (o *Sensor) GetWifiStatusOk() (*WifiStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WifiStatus, true
}

// SetWifiStatus sets field value
func (o *Sensor) SetWifiStatus(v WifiStatus) {
	o.WifiStatus = v
}

func (o Sensor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sensor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AiEnabled) {
		toSerialize["ai_enabled"] = o.AiEnabled
	}
	if !IsNil(o.Antenna) {
		toSerialize["antenna"] = o.Antenna
	}
	toSerialize["auto_defense_status"] = o.AutoDefenseStatus
	if !IsNil(o.CaptureStatus) {
		toSerialize["capture_status"] = o.CaptureStatus
	}
	toSerialize["compass"] = o.Compass
	if !IsNil(o.CompassEnabled) {
		toSerialize["compass_enabled"] = o.CompassEnabled
	}
	if !IsNil(o.ConfiguredGps) {
		toSerialize["configured_gps"] = o.ConfiguredGps
	}
	if !IsNil(o.CoreProtectionRadius) {
		toSerialize["core_protection_radius"] = o.CoreProtectionRadius
	}
	toSerialize["defense_radius"] = o.DefenseRadius
	if !IsNil(o.DetectionRadius) {
		toSerialize["detection_radius"] = o.DetectionRadius
	}
	if !IsNil(o.DfConeSectors) {
		toSerialize["df_cone_sectors"] = o.DfConeSectors
	}
	if !IsNil(o.DiskHasSpace) {
		toSerialize["disk_has_space"] = o.DiskHasSpace
	}
	if !IsNil(o.DvStatus) {
		toSerialize["dv_status"] = o.DvStatus
	}
	toSerialize["gps"] = o.Gps
	if !IsNil(o.GpsSignal) {
		toSerialize["gps_signal"] = o.GpsSignal
	}
	if !IsNil(o.GpsSignalGood) {
		toSerialize["gps_signal_good"] = o.GpsSignalGood
	}
	if !IsNil(o.HasTddPa) {
		toSerialize["has_tdd_pa"] = o.HasTddPa
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.IsAnchorServer) {
		toSerialize["is_anchor_server"] = o.IsAnchorServer
	}
	if !IsNil(o.IsDfEnabled) {
		toSerialize["is_df_enabled"] = o.IsDfEnabled
	}
	if !IsNil(o.IsRmserviceOn) {
		toSerialize["is_rmservice_on"] = o.IsRmserviceOn
	}
	if !IsNil(o.IsWidebandEnabled) {
		toSerialize["is_wideband_enabled"] = o.IsWidebandEnabled
	}
	if !IsNil(o.LicenseLanguage) {
		toSerialize["license_language"] = o.LicenseLanguage
	}
	if !IsNil(o.MassDefenseStatus) {
		toSerialize["mass_defense_status"] = o.MassDefenseStatus
	}
	toSerialize["mcu_status"] = o.McuStatus
	if !IsNil(o.MgmtDetails) {
		toSerialize["mgmt_details"] = o.MgmtDetails
	}
	if !IsNil(o.NfzSpoofStatus) {
		toSerialize["nfz_spoof_status"] = o.NfzSpoofStatus
	}
	if !IsNil(o.NoiseList) {
		toSerialize["noise_list"] = o.NoiseList
	}
	if !IsNil(o.Ou) {
		toSerialize["ou"] = o.Ou
	}
	if !IsNil(o.RmserviceMgmtPort) {
		toSerialize["rmservice_mgmt_port"] = o.RmserviceMgmtPort
	}
	if !IsNil(o.RmservicePort) {
		toSerialize["rmservice_port"] = o.RmservicePort
	}
	if !IsNil(o.SanityTestStatus) {
		toSerialize["sanity_test_status"] = o.SanityTestStatus
	}
	if !IsNil(o.Sectors) {
		toSerialize["sectors"] = o.Sectors
	}
	if !IsNil(o.SectorsLabel) {
		toSerialize["sectors_label"] = o.SectorsLabel
	}
	if !IsNil(o.SensorName) {
		toSerialize["sensor_name"] = o.SensorName
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.Termdate) {
		toSerialize["termdate"] = o.Termdate
	}
	toSerialize["wifi_status"] = o.WifiStatus
	return toSerialize, nil
}

func (o *Sensor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"auto_defense_status",
		"compass",
		"defense_radius",
		"gps",
		"mcu_status",
		"status",
		"wifi_status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSensor := _Sensor{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSensor)

	if err != nil {
		return err
	}

	*o = Sensor(varSensor)

	return err
}

type NullableSensor struct {
	value *Sensor
	isSet bool
}

func (v NullableSensor) Get() *Sensor {
	return v.value
}

func (v *NullableSensor) Set(val *Sensor) {
	v.value = val
	v.isSet = true
}

func (v NullableSensor) IsSet() bool {
	return v.isSet
}

func (v *NullableSensor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensor(val *Sensor) *NullableSensor {
	return &NullableSensor{value: val, isSet: true}
}

func (v NullableSensor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


