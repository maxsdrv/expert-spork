/*


Description text

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package skycope

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Module1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Module1{}

// Module1 struct for Module1
type Module1 struct {
	CpuTemp *float32 `json:"cpu_temp,omitempty"`
	CpuUsage *float32 `json:"cpu_usage,omitempty"`
	DetectingFrequency *DetectingFrequency `json:"detecting_frequency,omitempty"`
	DiskIoUsage *DiskIoUsage `json:"disk_io_usage,omitempty"`
	DiskUsage *string `json:"disk_usage,omitempty"`
	EngineStatus *string `json:"engine_status,omitempty"`
	FixedGain *FixedGain `json:"fixed_gain,omitempty"`
	GpuTemp *float32 `json:"gpu_temp,omitempty"`
	GpuUsage *float32 `json:"gpu_usage,omitempty"`
	MemUsage *float32 `json:"mem_usage,omitempty"`
	MgmtStatus *string `json:"mgmt_status,omitempty"`
	NetworkUsage *NetworkUsage `json:"network_usage,omitempty"`
	PowerConsumption *int32 `json:"power_consumption,omitempty"`
	PowerOptionsStatus *string `json:"power_options_status,omitempty"`
	SoftwareBuild string `json:"software_build"`
	SoftwareVersion string `json:"software_version"`
	SomStatus *SomStatus `json:"som_status,omitempty"`
	SomTemp *SomTemp `json:"som_temp,omitempty"`
	Uptime *float32 `json:"uptime,omitempty"`
	XpuFreq *float32 `json:"xpu_freq,omitempty"`
}

type _Module1 Module1

// NewModule1 instantiates a new Module1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModule1(softwareBuild string, softwareVersion string) *Module1 {
	this := Module1{}
	this.SoftwareBuild = softwareBuild
	this.SoftwareVersion = softwareVersion
	return &this
}

// NewModule1WithDefaults instantiates a new Module1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModule1WithDefaults() *Module1 {
	this := Module1{}
	return &this
}

// GetCpuTemp returns the CpuTemp field value if set, zero value otherwise.
func (o *Module1) GetCpuTemp() float32 {
	if o == nil || IsNil(o.CpuTemp) {
		var ret float32
		return ret
	}
	return *o.CpuTemp
}

// GetCpuTempOk returns a tuple with the CpuTemp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module1) GetCpuTempOk() (*float32, bool) {
	if o == nil || IsNil(o.CpuTemp) {
		return nil, false
	}
	return o.CpuTemp, true
}

// HasCpuTemp returns a boolean if a field has been set.
func (o *Module1) HasCpuTemp() bool {
	if o != nil && !IsNil(o.CpuTemp) {
		return true
	}

	return false
}

// SetCpuTemp gets a reference to the given float32 and assigns it to the CpuTemp field.
func (o *Module1) SetCpuTemp(v float32) {
	o.CpuTemp = &v
}

// GetCpuUsage returns the CpuUsage field value if set, zero value otherwise.
func (o *Module1) GetCpuUsage() float32 {
	if o == nil || IsNil(o.CpuUsage) {
		var ret float32
		return ret
	}
	return *o.CpuUsage
}

// GetCpuUsageOk returns a tuple with the CpuUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module1) GetCpuUsageOk() (*float32, bool) {
	if o == nil || IsNil(o.CpuUsage) {
		return nil, false
	}
	return o.CpuUsage, true
}

// HasCpuUsage returns a boolean if a field has been set.
func (o *Module1) HasCpuUsage() bool {
	if o != nil && !IsNil(o.CpuUsage) {
		return true
	}

	return false
}

// SetCpuUsage gets a reference to the given float32 and assigns it to the CpuUsage field.
func (o *Module1) SetCpuUsage(v float32) {
	o.CpuUsage = &v
}

// GetDetectingFrequency returns the DetectingFrequency field value if set, zero value otherwise.
func (o *Module1) GetDetectingFrequency() DetectingFrequency {
	if o == nil || IsNil(o.DetectingFrequency) {
		var ret DetectingFrequency
		return ret
	}
	return *o.DetectingFrequency
}

// GetDetectingFrequencyOk returns a tuple with the DetectingFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module1) GetDetectingFrequencyOk() (*DetectingFrequency, bool) {
	if o == nil || IsNil(o.DetectingFrequency) {
		return nil, false
	}
	return o.DetectingFrequency, true
}

// HasDetectingFrequency returns a boolean if a field has been set.
func (o *Module1) HasDetectingFrequency() bool {
	if o != nil && !IsNil(o.DetectingFrequency) {
		return true
	}

	return false
}

// SetDetectingFrequency gets a reference to the given DetectingFrequency and assigns it to the DetectingFrequency field.
func (o *Module1) SetDetectingFrequency(v DetectingFrequency) {
	o.DetectingFrequency = &v
}

// GetDiskIoUsage returns the DiskIoUsage field value if set, zero value otherwise.
func (o *Module1) GetDiskIoUsage() DiskIoUsage {
	if o == nil || IsNil(o.DiskIoUsage) {
		var ret DiskIoUsage
		return ret
	}
	return *o.DiskIoUsage
}

// GetDiskIoUsageOk returns a tuple with the DiskIoUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module1) GetDiskIoUsageOk() (*DiskIoUsage, bool) {
	if o == nil || IsNil(o.DiskIoUsage) {
		return nil, false
	}
	return o.DiskIoUsage, true
}

// HasDiskIoUsage returns a boolean if a field has been set.
func (o *Module1) HasDiskIoUsage() bool {
	if o != nil && !IsNil(o.DiskIoUsage) {
		return true
	}

	return false
}

// SetDiskIoUsage gets a reference to the given DiskIoUsage and assigns it to the DiskIoUsage field.
func (o *Module1) SetDiskIoUsage(v DiskIoUsage) {
	o.DiskIoUsage = &v
}

// GetDiskUsage returns the DiskUsage field value if set, zero value otherwise.
func (o *Module1) GetDiskUsage() string {
	if o == nil || IsNil(o.DiskUsage) {
		var ret string
		return ret
	}
	return *o.DiskUsage
}

// GetDiskUsageOk returns a tuple with the DiskUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module1) GetDiskUsageOk() (*string, bool) {
	if o == nil || IsNil(o.DiskUsage) {
		return nil, false
	}
	return o.DiskUsage, true
}

// HasDiskUsage returns a boolean if a field has been set.
func (o *Module1) HasDiskUsage() bool {
	if o != nil && !IsNil(o.DiskUsage) {
		return true
	}

	return false
}

// SetDiskUsage gets a reference to the given string and assigns it to the DiskUsage field.
func (o *Module1) SetDiskUsage(v string) {
	o.DiskUsage = &v
}

// GetEngineStatus returns the EngineStatus field value if set, zero value otherwise.
func (o *Module1) GetEngineStatus() string {
	if o == nil || IsNil(o.EngineStatus) {
		var ret string
		return ret
	}
	return *o.EngineStatus
}

// GetEngineStatusOk returns a tuple with the EngineStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module1) GetEngineStatusOk() (*string, bool) {
	if o == nil || IsNil(o.EngineStatus) {
		return nil, false
	}
	return o.EngineStatus, true
}

// HasEngineStatus returns a boolean if a field has been set.
func (o *Module1) HasEngineStatus() bool {
	if o != nil && !IsNil(o.EngineStatus) {
		return true
	}

	return false
}

// SetEngineStatus gets a reference to the given string and assigns it to the EngineStatus field.
func (o *Module1) SetEngineStatus(v string) {
	o.EngineStatus = &v
}

// GetFixedGain returns the FixedGain field value if set, zero value otherwise.
func (o *Module1) GetFixedGain() FixedGain {
	if o == nil || IsNil(o.FixedGain) {
		var ret FixedGain
		return ret
	}
	return *o.FixedGain
}

// GetFixedGainOk returns a tuple with the FixedGain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module1) GetFixedGainOk() (*FixedGain, bool) {
	if o == nil || IsNil(o.FixedGain) {
		return nil, false
	}
	return o.FixedGain, true
}

// HasFixedGain returns a boolean if a field has been set.
func (o *Module1) HasFixedGain() bool {
	if o != nil && !IsNil(o.FixedGain) {
		return true
	}

	return false
}

// SetFixedGain gets a reference to the given FixedGain and assigns it to the FixedGain field.
func (o *Module1) SetFixedGain(v FixedGain) {
	o.FixedGain = &v
}

// GetGpuTemp returns the GpuTemp field value if set, zero value otherwise.
func (o *Module1) GetGpuTemp() float32 {
	if o == nil || IsNil(o.GpuTemp) {
		var ret float32
		return ret
	}
	return *o.GpuTemp
}

// GetGpuTempOk returns a tuple with the GpuTemp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module1) GetGpuTempOk() (*float32, bool) {
	if o == nil || IsNil(o.GpuTemp) {
		return nil, false
	}
	return o.GpuTemp, true
}

// HasGpuTemp returns a boolean if a field has been set.
func (o *Module1) HasGpuTemp() bool {
	if o != nil && !IsNil(o.GpuTemp) {
		return true
	}

	return false
}

// SetGpuTemp gets a reference to the given float32 and assigns it to the GpuTemp field.
func (o *Module1) SetGpuTemp(v float32) {
	o.GpuTemp = &v
}

// GetGpuUsage returns the GpuUsage field value if set, zero value otherwise.
func (o *Module1) GetGpuUsage() float32 {
	if o == nil || IsNil(o.GpuUsage) {
		var ret float32
		return ret
	}
	return *o.GpuUsage
}

// GetGpuUsageOk returns a tuple with the GpuUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module1) GetGpuUsageOk() (*float32, bool) {
	if o == nil || IsNil(o.GpuUsage) {
		return nil, false
	}
	return o.GpuUsage, true
}

// HasGpuUsage returns a boolean if a field has been set.
func (o *Module1) HasGpuUsage() bool {
	if o != nil && !IsNil(o.GpuUsage) {
		return true
	}

	return false
}

// SetGpuUsage gets a reference to the given float32 and assigns it to the GpuUsage field.
func (o *Module1) SetGpuUsage(v float32) {
	o.GpuUsage = &v
}

// GetMemUsage returns the MemUsage field value if set, zero value otherwise.
func (o *Module1) GetMemUsage() float32 {
	if o == nil || IsNil(o.MemUsage) {
		var ret float32
		return ret
	}
	return *o.MemUsage
}

// GetMemUsageOk returns a tuple with the MemUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module1) GetMemUsageOk() (*float32, bool) {
	if o == nil || IsNil(o.MemUsage) {
		return nil, false
	}
	return o.MemUsage, true
}

// HasMemUsage returns a boolean if a field has been set.
func (o *Module1) HasMemUsage() bool {
	if o != nil && !IsNil(o.MemUsage) {
		return true
	}

	return false
}

// SetMemUsage gets a reference to the given float32 and assigns it to the MemUsage field.
func (o *Module1) SetMemUsage(v float32) {
	o.MemUsage = &v
}

// GetMgmtStatus returns the MgmtStatus field value if set, zero value otherwise.
func (o *Module1) GetMgmtStatus() string {
	if o == nil || IsNil(o.MgmtStatus) {
		var ret string
		return ret
	}
	return *o.MgmtStatus
}

// GetMgmtStatusOk returns a tuple with the MgmtStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module1) GetMgmtStatusOk() (*string, bool) {
	if o == nil || IsNil(o.MgmtStatus) {
		return nil, false
	}
	return o.MgmtStatus, true
}

// HasMgmtStatus returns a boolean if a field has been set.
func (o *Module1) HasMgmtStatus() bool {
	if o != nil && !IsNil(o.MgmtStatus) {
		return true
	}

	return false
}

// SetMgmtStatus gets a reference to the given string and assigns it to the MgmtStatus field.
func (o *Module1) SetMgmtStatus(v string) {
	o.MgmtStatus = &v
}

// GetNetworkUsage returns the NetworkUsage field value if set, zero value otherwise.
func (o *Module1) GetNetworkUsage() NetworkUsage {
	if o == nil || IsNil(o.NetworkUsage) {
		var ret NetworkUsage
		return ret
	}
	return *o.NetworkUsage
}

// GetNetworkUsageOk returns a tuple with the NetworkUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module1) GetNetworkUsageOk() (*NetworkUsage, bool) {
	if o == nil || IsNil(o.NetworkUsage) {
		return nil, false
	}
	return o.NetworkUsage, true
}

// HasNetworkUsage returns a boolean if a field has been set.
func (o *Module1) HasNetworkUsage() bool {
	if o != nil && !IsNil(o.NetworkUsage) {
		return true
	}

	return false
}

// SetNetworkUsage gets a reference to the given NetworkUsage and assigns it to the NetworkUsage field.
func (o *Module1) SetNetworkUsage(v NetworkUsage) {
	o.NetworkUsage = &v
}

// GetPowerConsumption returns the PowerConsumption field value if set, zero value otherwise.
func (o *Module1) GetPowerConsumption() int32 {
	if o == nil || IsNil(o.PowerConsumption) {
		var ret int32
		return ret
	}
	return *o.PowerConsumption
}

// GetPowerConsumptionOk returns a tuple with the PowerConsumption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module1) GetPowerConsumptionOk() (*int32, bool) {
	if o == nil || IsNil(o.PowerConsumption) {
		return nil, false
	}
	return o.PowerConsumption, true
}

// HasPowerConsumption returns a boolean if a field has been set.
func (o *Module1) HasPowerConsumption() bool {
	if o != nil && !IsNil(o.PowerConsumption) {
		return true
	}

	return false
}

// SetPowerConsumption gets a reference to the given int32 and assigns it to the PowerConsumption field.
func (o *Module1) SetPowerConsumption(v int32) {
	o.PowerConsumption = &v
}

// GetPowerOptionsStatus returns the PowerOptionsStatus field value if set, zero value otherwise.
func (o *Module1) GetPowerOptionsStatus() string {
	if o == nil || IsNil(o.PowerOptionsStatus) {
		var ret string
		return ret
	}
	return *o.PowerOptionsStatus
}

// GetPowerOptionsStatusOk returns a tuple with the PowerOptionsStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module1) GetPowerOptionsStatusOk() (*string, bool) {
	if o == nil || IsNil(o.PowerOptionsStatus) {
		return nil, false
	}
	return o.PowerOptionsStatus, true
}

// HasPowerOptionsStatus returns a boolean if a field has been set.
func (o *Module1) HasPowerOptionsStatus() bool {
	if o != nil && !IsNil(o.PowerOptionsStatus) {
		return true
	}

	return false
}

// SetPowerOptionsStatus gets a reference to the given string and assigns it to the PowerOptionsStatus field.
func (o *Module1) SetPowerOptionsStatus(v string) {
	o.PowerOptionsStatus = &v
}

// GetSoftwareBuild returns the SoftwareBuild field value
func (o *Module1) GetSoftwareBuild() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SoftwareBuild
}

// GetSoftwareBuildOk returns a tuple with the SoftwareBuild field value
// and a boolean to check if the value has been set.
func (o *Module1) GetSoftwareBuildOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoftwareBuild, true
}

// SetSoftwareBuild sets field value
func (o *Module1) SetSoftwareBuild(v string) {
	o.SoftwareBuild = v
}

// GetSoftwareVersion returns the SoftwareVersion field value
func (o *Module1) GetSoftwareVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SoftwareVersion
}

// GetSoftwareVersionOk returns a tuple with the SoftwareVersion field value
// and a boolean to check if the value has been set.
func (o *Module1) GetSoftwareVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoftwareVersion, true
}

// SetSoftwareVersion sets field value
func (o *Module1) SetSoftwareVersion(v string) {
	o.SoftwareVersion = v
}

// GetSomStatus returns the SomStatus field value if set, zero value otherwise.
func (o *Module1) GetSomStatus() SomStatus {
	if o == nil || IsNil(o.SomStatus) {
		var ret SomStatus
		return ret
	}
	return *o.SomStatus
}

// GetSomStatusOk returns a tuple with the SomStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module1) GetSomStatusOk() (*SomStatus, bool) {
	if o == nil || IsNil(o.SomStatus) {
		return nil, false
	}
	return o.SomStatus, true
}

// HasSomStatus returns a boolean if a field has been set.
func (o *Module1) HasSomStatus() bool {
	if o != nil && !IsNil(o.SomStatus) {
		return true
	}

	return false
}

// SetSomStatus gets a reference to the given SomStatus and assigns it to the SomStatus field.
func (o *Module1) SetSomStatus(v SomStatus) {
	o.SomStatus = &v
}

// GetSomTemp returns the SomTemp field value if set, zero value otherwise.
func (o *Module1) GetSomTemp() SomTemp {
	if o == nil || IsNil(o.SomTemp) {
		var ret SomTemp
		return ret
	}
	return *o.SomTemp
}

// GetSomTempOk returns a tuple with the SomTemp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module1) GetSomTempOk() (*SomTemp, bool) {
	if o == nil || IsNil(o.SomTemp) {
		return nil, false
	}
	return o.SomTemp, true
}

// HasSomTemp returns a boolean if a field has been set.
func (o *Module1) HasSomTemp() bool {
	if o != nil && !IsNil(o.SomTemp) {
		return true
	}

	return false
}

// SetSomTemp gets a reference to the given SomTemp and assigns it to the SomTemp field.
func (o *Module1) SetSomTemp(v SomTemp) {
	o.SomTemp = &v
}

// GetUptime returns the Uptime field value if set, zero value otherwise.
func (o *Module1) GetUptime() float32 {
	if o == nil || IsNil(o.Uptime) {
		var ret float32
		return ret
	}
	return *o.Uptime
}

// GetUptimeOk returns a tuple with the Uptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module1) GetUptimeOk() (*float32, bool) {
	if o == nil || IsNil(o.Uptime) {
		return nil, false
	}
	return o.Uptime, true
}

// HasUptime returns a boolean if a field has been set.
func (o *Module1) HasUptime() bool {
	if o != nil && !IsNil(o.Uptime) {
		return true
	}

	return false
}

// SetUptime gets a reference to the given float32 and assigns it to the Uptime field.
func (o *Module1) SetUptime(v float32) {
	o.Uptime = &v
}

// GetXpuFreq returns the XpuFreq field value if set, zero value otherwise.
func (o *Module1) GetXpuFreq() float32 {
	if o == nil || IsNil(o.XpuFreq) {
		var ret float32
		return ret
	}
	return *o.XpuFreq
}

// GetXpuFreqOk returns a tuple with the XpuFreq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module1) GetXpuFreqOk() (*float32, bool) {
	if o == nil || IsNil(o.XpuFreq) {
		return nil, false
	}
	return o.XpuFreq, true
}

// HasXpuFreq returns a boolean if a field has been set.
func (o *Module1) HasXpuFreq() bool {
	if o != nil && !IsNil(o.XpuFreq) {
		return true
	}

	return false
}

// SetXpuFreq gets a reference to the given float32 and assigns it to the XpuFreq field.
func (o *Module1) SetXpuFreq(v float32) {
	o.XpuFreq = &v
}

func (o Module1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Module1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CpuTemp) {
		toSerialize["cpu_temp"] = o.CpuTemp
	}
	if !IsNil(o.CpuUsage) {
		toSerialize["cpu_usage"] = o.CpuUsage
	}
	if !IsNil(o.DetectingFrequency) {
		toSerialize["detecting_frequency"] = o.DetectingFrequency
	}
	if !IsNil(o.DiskIoUsage) {
		toSerialize["disk_io_usage"] = o.DiskIoUsage
	}
	if !IsNil(o.DiskUsage) {
		toSerialize["disk_usage"] = o.DiskUsage
	}
	if !IsNil(o.EngineStatus) {
		toSerialize["engine_status"] = o.EngineStatus
	}
	if !IsNil(o.FixedGain) {
		toSerialize["fixed_gain"] = o.FixedGain
	}
	if !IsNil(o.GpuTemp) {
		toSerialize["gpu_temp"] = o.GpuTemp
	}
	if !IsNil(o.GpuUsage) {
		toSerialize["gpu_usage"] = o.GpuUsage
	}
	if !IsNil(o.MemUsage) {
		toSerialize["mem_usage"] = o.MemUsage
	}
	if !IsNil(o.MgmtStatus) {
		toSerialize["mgmt_status"] = o.MgmtStatus
	}
	if !IsNil(o.NetworkUsage) {
		toSerialize["network_usage"] = o.NetworkUsage
	}
	if !IsNil(o.PowerConsumption) {
		toSerialize["power_consumption"] = o.PowerConsumption
	}
	if !IsNil(o.PowerOptionsStatus) {
		toSerialize["power_options_status"] = o.PowerOptionsStatus
	}
	toSerialize["software_build"] = o.SoftwareBuild
	toSerialize["software_version"] = o.SoftwareVersion
	if !IsNil(o.SomStatus) {
		toSerialize["som_status"] = o.SomStatus
	}
	if !IsNil(o.SomTemp) {
		toSerialize["som_temp"] = o.SomTemp
	}
	if !IsNil(o.Uptime) {
		toSerialize["uptime"] = o.Uptime
	}
	if !IsNil(o.XpuFreq) {
		toSerialize["xpu_freq"] = o.XpuFreq
	}
	return toSerialize, nil
}

func (o *Module1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"software_build",
		"software_version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModule1 := _Module1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModule1)

	if err != nil {
		return err
	}

	*o = Module1(varModule1)

	return err
}

type NullableModule1 struct {
	value *Module1
	isSet bool
}

func (v NullableModule1) Get() *Module1 {
	return v.value
}

func (v *NullableModule1) Set(val *Module1) {
	v.value = val
	v.isSet = true
}

func (v NullableModule1) IsSet() bool {
	return v.isSet
}

func (v *NullableModule1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModule1(val *Module1) *NullableModule1 {
	return &NullableModule1{value: val, isSet: true}
}

func (v NullableModule1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModule1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


