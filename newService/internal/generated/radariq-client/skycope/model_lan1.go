/*


Description text

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package skycope

import (
	"encoding/json"
)

// checks if the LAN1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LAN1{}

// LAN1 struct for LAN1
type LAN1 struct {
	Rx *float32 `json:"rx,omitempty"`
	Tx *float32 `json:"tx,omitempty"`
}

// NewLAN1 instantiates a new LAN1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLAN1() *LAN1 {
	this := LAN1{}
	return &this
}

// NewLAN1WithDefaults instantiates a new LAN1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLAN1WithDefaults() *LAN1 {
	this := LAN1{}
	return &this
}

// GetRx returns the Rx field value if set, zero value otherwise.
func (o *LAN1) GetRx() float32 {
	if o == nil || IsNil(o.Rx) {
		var ret float32
		return ret
	}
	return *o.Rx
}

// GetRxOk returns a tuple with the Rx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LAN1) GetRxOk() (*float32, bool) {
	if o == nil || IsNil(o.Rx) {
		return nil, false
	}
	return o.Rx, true
}

// HasRx returns a boolean if a field has been set.
func (o *LAN1) HasRx() bool {
	if o != nil && !IsNil(o.Rx) {
		return true
	}

	return false
}

// SetRx gets a reference to the given float32 and assigns it to the Rx field.
func (o *LAN1) SetRx(v float32) {
	o.Rx = &v
}

// GetTx returns the Tx field value if set, zero value otherwise.
func (o *LAN1) GetTx() float32 {
	if o == nil || IsNil(o.Tx) {
		var ret float32
		return ret
	}
	return *o.Tx
}

// GetTxOk returns a tuple with the Tx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LAN1) GetTxOk() (*float32, bool) {
	if o == nil || IsNil(o.Tx) {
		return nil, false
	}
	return o.Tx, true
}

// HasTx returns a boolean if a field has been set.
func (o *LAN1) HasTx() bool {
	if o != nil && !IsNil(o.Tx) {
		return true
	}

	return false
}

// SetTx gets a reference to the given float32 and assigns it to the Tx field.
func (o *LAN1) SetTx(v float32) {
	o.Tx = &v
}

func (o LAN1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LAN1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rx) {
		toSerialize["rx"] = o.Rx
	}
	if !IsNil(o.Tx) {
		toSerialize["tx"] = o.Tx
	}
	return toSerialize, nil
}

type NullableLAN1 struct {
	value *LAN1
	isSet bool
}

func (v NullableLAN1) Get() *LAN1 {
	return v.value
}

func (v *NullableLAN1) Set(val *LAN1) {
	v.value = val
	v.isSet = true
}

func (v NullableLAN1) IsSet() bool {
	return v.isSet
}

func (v *NullableLAN1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLAN1(val *LAN1) *NullableLAN1 {
	return &NullableLAN1{value: val, isSet: true}
}

func (v NullableLAN1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLAN1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


