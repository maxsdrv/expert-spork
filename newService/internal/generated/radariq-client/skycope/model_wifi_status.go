/*


Description text

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package skycope

import (
	"encoding/json"
	"fmt"
)

// WifiStatus the model 'WifiStatus'
type WifiStatus string

// List of WifiStatus
const (
	WIFISTATUS_CONNECTED WifiStatus = "CONNECTED"
)

// All allowed values of WifiStatus enum
var AllowedWifiStatusEnumValues = []WifiStatus{
	"CONNECTED",
}

func (v *WifiStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WifiStatus(value)
	for _, existing := range AllowedWifiStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WifiStatus", value)
}

// NewWifiStatusFromValue returns a pointer to a valid WifiStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWifiStatusFromValue(v string) (*WifiStatus, error) {
	ev := WifiStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WifiStatus: valid values are %v", v, AllowedWifiStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WifiStatus) IsValid() bool {
	for _, existing := range AllowedWifiStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WifiStatus value
func (v WifiStatus) Ptr() *WifiStatus {
	return &v
}

type NullableWifiStatus struct {
	value *WifiStatus
	isSet bool
}

func (v NullableWifiStatus) Get() *WifiStatus {
	return v.value
}

func (v *NullableWifiStatus) Set(val *WifiStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableWifiStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableWifiStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWifiStatus(val *WifiStatus) *NullableWifiStatus {
	return &NullableWifiStatus{value: val, isSet: true}
}

func (v NullableWifiStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWifiStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

