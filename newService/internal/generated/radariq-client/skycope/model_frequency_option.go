/*


Description text

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package skycope

import (
	"encoding/json"
)

// checks if the FrequencyOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrequencyOption{}

// FrequencyOption struct for FrequencyOption
type FrequencyOption struct {
	Freq []string `json:"freq,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewFrequencyOption instantiates a new FrequencyOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrequencyOption() *FrequencyOption {
	this := FrequencyOption{}
	return &this
}

// NewFrequencyOptionWithDefaults instantiates a new FrequencyOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrequencyOptionWithDefaults() *FrequencyOption {
	this := FrequencyOption{}
	return &this
}

// GetFreq returns the Freq field value if set, zero value otherwise.
func (o *FrequencyOption) GetFreq() []string {
	if o == nil || IsNil(o.Freq) {
		var ret []string
		return ret
	}
	return o.Freq
}

// GetFreqOk returns a tuple with the Freq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrequencyOption) GetFreqOk() ([]string, bool) {
	if o == nil || IsNil(o.Freq) {
		return nil, false
	}
	return o.Freq, true
}

// HasFreq returns a boolean if a field has been set.
func (o *FrequencyOption) HasFreq() bool {
	if o != nil && !IsNil(o.Freq) {
		return true
	}

	return false
}

// SetFreq gets a reference to the given []string and assigns it to the Freq field.
func (o *FrequencyOption) SetFreq(v []string) {
	o.Freq = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FrequencyOption) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrequencyOption) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FrequencyOption) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FrequencyOption) SetName(v string) {
	o.Name = &v
}

func (o FrequencyOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrequencyOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Freq) {
		toSerialize["freq"] = o.Freq
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableFrequencyOption struct {
	value *FrequencyOption
	isSet bool
}

func (v NullableFrequencyOption) Get() *FrequencyOption {
	return v.value
}

func (v *NullableFrequencyOption) Set(val *FrequencyOption) {
	v.value = val
	v.isSet = true
}

func (v NullableFrequencyOption) IsSet() bool {
	return v.isSet
}

func (v *NullableFrequencyOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrequencyOption(val *FrequencyOption) *NullableFrequencyOption {
	return &NullableFrequencyOption{value: val, isSet: true}
}

func (v NullableFrequencyOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrequencyOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


