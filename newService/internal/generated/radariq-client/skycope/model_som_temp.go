/*


Description text

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package skycope

import (
	"encoding/json"
)

// checks if the SomTemp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SomTemp{}

// SomTemp struct for SomTemp
type SomTemp struct {
	Var1 *float32 `json:"1,omitempty"`
}

// NewSomTemp instantiates a new SomTemp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSomTemp() *SomTemp {
	this := SomTemp{}
	return &this
}

// NewSomTempWithDefaults instantiates a new SomTemp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSomTempWithDefaults() *SomTemp {
	this := SomTemp{}
	return &this
}

// GetVar1 returns the Var1 field value if set, zero value otherwise.
func (o *SomTemp) GetVar1() float32 {
	if o == nil || IsNil(o.Var1) {
		var ret float32
		return ret
	}
	return *o.Var1
}

// GetVar1Ok returns a tuple with the Var1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SomTemp) GetVar1Ok() (*float32, bool) {
	if o == nil || IsNil(o.Var1) {
		return nil, false
	}
	return o.Var1, true
}

// HasVar1 returns a boolean if a field has been set.
func (o *SomTemp) HasVar1() bool {
	if o != nil && !IsNil(o.Var1) {
		return true
	}

	return false
}

// SetVar1 gets a reference to the given float32 and assigns it to the Var1 field.
func (o *SomTemp) SetVar1(v float32) {
	o.Var1 = &v
}

func (o SomTemp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SomTemp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Var1) {
		toSerialize["1"] = o.Var1
	}
	return toSerialize, nil
}

type NullableSomTemp struct {
	value *SomTemp
	isSet bool
}

func (v NullableSomTemp) Get() *SomTemp {
	return v.value
}

func (v *NullableSomTemp) Set(val *SomTemp) {
	v.value = val
	v.isSet = true
}

func (v NullableSomTemp) IsSet() bool {
	return v.isSet
}

func (v *NullableSomTemp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSomTemp(val *SomTemp) *NullableSomTemp {
	return &NullableSomTemp{value: val, isSet: true}
}

func (v NullableSomTemp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSomTemp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


