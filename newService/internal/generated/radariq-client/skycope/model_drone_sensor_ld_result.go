/*


Description text

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package skycope

import (
	"encoding/json"
)

// checks if the DroneSensorLdResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DroneSensorLdResult{}

// DroneSensorLdResult struct for DroneSensorLdResult
type DroneSensorLdResult struct {
	Azimuth *float32 `json:"azimuth,omitempty"`
	Distance *string `json:"distance,omitempty"`
	SensorId *string `json:"sensor_id,omitempty"`
}

// NewDroneSensorLdResult instantiates a new DroneSensorLdResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDroneSensorLdResult() *DroneSensorLdResult {
	this := DroneSensorLdResult{}
	return &this
}

// NewDroneSensorLdResultWithDefaults instantiates a new DroneSensorLdResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDroneSensorLdResultWithDefaults() *DroneSensorLdResult {
	this := DroneSensorLdResult{}
	return &this
}

// GetAzimuth returns the Azimuth field value if set, zero value otherwise.
func (o *DroneSensorLdResult) GetAzimuth() float32 {
	if o == nil || IsNil(o.Azimuth) {
		var ret float32
		return ret
	}
	return *o.Azimuth
}

// GetAzimuthOk returns a tuple with the Azimuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DroneSensorLdResult) GetAzimuthOk() (*float32, bool) {
	if o == nil || IsNil(o.Azimuth) {
		return nil, false
	}
	return o.Azimuth, true
}

// HasAzimuth returns a boolean if a field has been set.
func (o *DroneSensorLdResult) HasAzimuth() bool {
	if o != nil && !IsNil(o.Azimuth) {
		return true
	}

	return false
}

// SetAzimuth gets a reference to the given float32 and assigns it to the Azimuth field.
func (o *DroneSensorLdResult) SetAzimuth(v float32) {
	o.Azimuth = &v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *DroneSensorLdResult) GetDistance() string {
	if o == nil || IsNil(o.Distance) {
		var ret string
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DroneSensorLdResult) GetDistanceOk() (*string, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *DroneSensorLdResult) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given string and assigns it to the Distance field.
func (o *DroneSensorLdResult) SetDistance(v string) {
	o.Distance = &v
}

// GetSensorId returns the SensorId field value if set, zero value otherwise.
func (o *DroneSensorLdResult) GetSensorId() string {
	if o == nil || IsNil(o.SensorId) {
		var ret string
		return ret
	}
	return *o.SensorId
}

// GetSensorIdOk returns a tuple with the SensorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DroneSensorLdResult) GetSensorIdOk() (*string, bool) {
	if o == nil || IsNil(o.SensorId) {
		return nil, false
	}
	return o.SensorId, true
}

// HasSensorId returns a boolean if a field has been set.
func (o *DroneSensorLdResult) HasSensorId() bool {
	if o != nil && !IsNil(o.SensorId) {
		return true
	}

	return false
}

// SetSensorId gets a reference to the given string and assigns it to the SensorId field.
func (o *DroneSensorLdResult) SetSensorId(v string) {
	o.SensorId = &v
}

func (o DroneSensorLdResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DroneSensorLdResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Azimuth) {
		toSerialize["azimuth"] = o.Azimuth
	}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.SensorId) {
		toSerialize["sensor_id"] = o.SensorId
	}
	return toSerialize, nil
}

type NullableDroneSensorLdResult struct {
	value *DroneSensorLdResult
	isSet bool
}

func (v NullableDroneSensorLdResult) Get() *DroneSensorLdResult {
	return v.value
}

func (v *NullableDroneSensorLdResult) Set(val *DroneSensorLdResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDroneSensorLdResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDroneSensorLdResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDroneSensorLdResult(val *DroneSensorLdResult) *NullableDroneSensorLdResult {
	return &NullableDroneSensorLdResult{value: val, isSet: true}
}

func (v NullableDroneSensorLdResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDroneSensorLdResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


