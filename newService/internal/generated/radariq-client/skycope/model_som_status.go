/*


Description text

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package skycope

import (
	"encoding/json"
)

// checks if the SomStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SomStatus{}

// SomStatus struct for SomStatus
type SomStatus struct {
	Var1 *string `json:"1,omitempty"`
}

// NewSomStatus instantiates a new SomStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSomStatus() *SomStatus {
	this := SomStatus{}
	return &this
}

// NewSomStatusWithDefaults instantiates a new SomStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSomStatusWithDefaults() *SomStatus {
	this := SomStatus{}
	return &this
}

// GetVar1 returns the Var1 field value if set, zero value otherwise.
func (o *SomStatus) GetVar1() string {
	if o == nil || IsNil(o.Var1) {
		var ret string
		return ret
	}
	return *o.Var1
}

// GetVar1Ok returns a tuple with the Var1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SomStatus) GetVar1Ok() (*string, bool) {
	if o == nil || IsNil(o.Var1) {
		return nil, false
	}
	return o.Var1, true
}

// HasVar1 returns a boolean if a field has been set.
func (o *SomStatus) HasVar1() bool {
	if o != nil && !IsNil(o.Var1) {
		return true
	}

	return false
}

// SetVar1 gets a reference to the given string and assigns it to the Var1 field.
func (o *SomStatus) SetVar1(v string) {
	o.Var1 = &v
}

func (o SomStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SomStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Var1) {
		toSerialize["1"] = o.Var1
	}
	return toSerialize, nil
}

type NullableSomStatus struct {
	value *SomStatus
	isSet bool
}

func (v NullableSomStatus) Get() *SomStatus {
	return v.value
}

func (v *NullableSomStatus) Set(val *SomStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSomStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSomStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSomStatus(val *SomStatus) *NullableSomStatus {
	return &NullableSomStatus{value: val, isSet: true}
}

func (v NullableSomStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSomStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


