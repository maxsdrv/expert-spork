/*


Description text

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package skycope

import (
	"encoding/json"
)

// checks if the NetworkUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkUsage{}

// NetworkUsage struct for NetworkUsage
type NetworkUsage struct {
	LAN1 *LAN1 `json:"LAN1,omitempty"`
	LAN2 *LAN2 `json:"LAN2,omitempty"`
}

// NewNetworkUsage instantiates a new NetworkUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkUsage() *NetworkUsage {
	this := NetworkUsage{}
	return &this
}

// NewNetworkUsageWithDefaults instantiates a new NetworkUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkUsageWithDefaults() *NetworkUsage {
	this := NetworkUsage{}
	return &this
}

// GetLAN1 returns the LAN1 field value if set, zero value otherwise.
func (o *NetworkUsage) GetLAN1() LAN1 {
	if o == nil || IsNil(o.LAN1) {
		var ret LAN1
		return ret
	}
	return *o.LAN1
}

// GetLAN1Ok returns a tuple with the LAN1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkUsage) GetLAN1Ok() (*LAN1, bool) {
	if o == nil || IsNil(o.LAN1) {
		return nil, false
	}
	return o.LAN1, true
}

// HasLAN1 returns a boolean if a field has been set.
func (o *NetworkUsage) HasLAN1() bool {
	if o != nil && !IsNil(o.LAN1) {
		return true
	}

	return false
}

// SetLAN1 gets a reference to the given LAN1 and assigns it to the LAN1 field.
func (o *NetworkUsage) SetLAN1(v LAN1) {
	o.LAN1 = &v
}

// GetLAN2 returns the LAN2 field value if set, zero value otherwise.
func (o *NetworkUsage) GetLAN2() LAN2 {
	if o == nil || IsNil(o.LAN2) {
		var ret LAN2
		return ret
	}
	return *o.LAN2
}

// GetLAN2Ok returns a tuple with the LAN2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkUsage) GetLAN2Ok() (*LAN2, bool) {
	if o == nil || IsNil(o.LAN2) {
		return nil, false
	}
	return o.LAN2, true
}

// HasLAN2 returns a boolean if a field has been set.
func (o *NetworkUsage) HasLAN2() bool {
	if o != nil && !IsNil(o.LAN2) {
		return true
	}

	return false
}

// SetLAN2 gets a reference to the given LAN2 and assigns it to the LAN2 field.
func (o *NetworkUsage) SetLAN2(v LAN2) {
	o.LAN2 = &v
}

func (o NetworkUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LAN1) {
		toSerialize["LAN1"] = o.LAN1
	}
	if !IsNil(o.LAN2) {
		toSerialize["LAN2"] = o.LAN2
	}
	return toSerialize, nil
}

type NullableNetworkUsage struct {
	value *NetworkUsage
	isSet bool
}

func (v NullableNetworkUsage) Get() *NetworkUsage {
	return v.value
}

func (v *NullableNetworkUsage) Set(val *NetworkUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkUsage(val *NetworkUsage) *NullableNetworkUsage {
	return &NullableNetworkUsage{value: val, isSet: true}
}

func (v NullableNetworkUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


