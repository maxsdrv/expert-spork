/*


Description text

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package skycope

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FcKhzAndCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FcKhzAndCount{}

// FcKhzAndCount struct for FcKhzAndCount
type FcKhzAndCount struct {
	Duration int32 `json:"duration"`
	FcKhzAndCount []interface{} `json:"fc_khz_and_count"`
}

type _FcKhzAndCount FcKhzAndCount

// NewFcKhzAndCount instantiates a new FcKhzAndCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFcKhzAndCount(duration int32, fcKhzAndCount []interface{}) *FcKhzAndCount {
	this := FcKhzAndCount{}
	this.Duration = duration
	this.FcKhzAndCount = fcKhzAndCount
	return &this
}

// NewFcKhzAndCountWithDefaults instantiates a new FcKhzAndCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFcKhzAndCountWithDefaults() *FcKhzAndCount {
	this := FcKhzAndCount{}
	return &this
}

// GetDuration returns the Duration field value
func (o *FcKhzAndCount) GetDuration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *FcKhzAndCount) GetDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *FcKhzAndCount) SetDuration(v int32) {
	o.Duration = v
}

// GetFcKhzAndCount returns the FcKhzAndCount field value
func (o *FcKhzAndCount) GetFcKhzAndCount() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.FcKhzAndCount
}

// GetFcKhzAndCountOk returns a tuple with the FcKhzAndCount field value
// and a boolean to check if the value has been set.
func (o *FcKhzAndCount) GetFcKhzAndCountOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.FcKhzAndCount, true
}

// SetFcKhzAndCount sets field value
func (o *FcKhzAndCount) SetFcKhzAndCount(v []interface{}) {
	o.FcKhzAndCount = v
}

func (o FcKhzAndCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FcKhzAndCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["duration"] = o.Duration
	toSerialize["fc_khz_and_count"] = o.FcKhzAndCount
	return toSerialize, nil
}

func (o *FcKhzAndCount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"duration",
		"fc_khz_and_count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFcKhzAndCount := _FcKhzAndCount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFcKhzAndCount)

	if err != nil {
		return err
	}

	*o = FcKhzAndCount(varFcKhzAndCount)

	return err
}

type NullableFcKhzAndCount struct {
	value *FcKhzAndCount
	isSet bool
}

func (v NullableFcKhzAndCount) Get() *FcKhzAndCount {
	return v.value
}

func (v *NullableFcKhzAndCount) Set(val *FcKhzAndCount) {
	v.value = val
	v.isSet = true
}

func (v NullableFcKhzAndCount) IsSet() bool {
	return v.isSet
}

func (v *NullableFcKhzAndCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFcKhzAndCount(val *FcKhzAndCount) *NullableFcKhzAndCount {
	return &NullableFcKhzAndCount{value: val, isSet: true}
}

func (v NullableFcKhzAndCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFcKhzAndCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


