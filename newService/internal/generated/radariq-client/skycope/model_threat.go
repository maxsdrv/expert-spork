/*


Description text

API version: 
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package skycope

import (
	"encoding/json"
)

// checks if the Threat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Threat{}

// Threat struct for Threat
type Threat struct {
	Color *int32 `json:"color,omitempty"`
	Level *int32 `json:"level,omitempty"`
}

// NewThreat instantiates a new Threat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreat() *Threat {
	this := Threat{}
	return &this
}

// NewThreatWithDefaults instantiates a new Threat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreatWithDefaults() *Threat {
	this := Threat{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *Threat) GetColor() int32 {
	if o == nil || IsNil(o.Color) {
		var ret int32
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Threat) GetColorOk() (*int32, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *Threat) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given int32 and assigns it to the Color field.
func (o *Threat) SetColor(v int32) {
	o.Color = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *Threat) GetLevel() int32 {
	if o == nil || IsNil(o.Level) {
		var ret int32
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Threat) GetLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *Threat) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given int32 and assigns it to the Level field.
func (o *Threat) SetLevel(v int32) {
	o.Level = &v
}

func (o Threat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Threat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	return toSerialize, nil
}

type NullableThreat struct {
	value *Threat
	isSet bool
}

func (v NullableThreat) Get() *Threat {
	return v.value
}

func (v *NullableThreat) Set(val *Threat) {
	v.value = val
	v.isSet = true
}

func (v NullableThreat) IsSet() bool {
	return v.isSet
}

func (v *NullableThreat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreat(val *Threat) *NullableThreat {
	return &NullableThreat{value: val, isSet: true}
}

func (v NullableThreat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


