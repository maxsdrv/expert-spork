/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OARadarIqTrack_point.h
 *
 * 
 */

#ifndef OARadarIqTrack_point_H
#define OARadarIqTrack_point_H

#include <QJsonObject>

#include "OARadarIqGeo_coordinate.h"
#include "OARadarIqTrack_point_geometry.h"
#include "OARadarIqTrack_point_meter.h"
#include "OARadarIqTrack_point_velocity.h"
#include <QDateTime>

#include "OARadarIqEnum.h"
#include "OARadarIqObject.h"

namespace OARadarIq {
class OARadarIqGeo_coordinate;
class OARadarIqTrack_point_velocity;
class OARadarIqTrack_point_geometry;
class OARadarIqTrack_point_meter;

class OARadarIqTrack_point : public OARadarIqObject {
public:
    OARadarIqTrack_point();
    OARadarIqTrack_point(QString json);
    ~OARadarIqTrack_point() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OARadarIqGeo_coordinate getCoord() const;
    void setCoord(const OARadarIqGeo_coordinate &coord);
    bool is_coord_Set() const;
    bool is_coord_Valid() const;

    QDateTime getTimestamp() const;
    void setTimestamp(const QDateTime &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    OARadarIqTrack_point_velocity getVelocity() const;
    void setVelocity(const OARadarIqTrack_point_velocity &velocity);
    bool is_velocity_Set() const;
    bool is_velocity_Valid() const;

    OARadarIqTrack_point_geometry getGeometry() const;
    void setGeometry(const OARadarIqTrack_point_geometry &geometry);
    bool is_geometry_Set() const;
    bool is_geometry_Valid() const;

    OARadarIqTrack_point_meter getMeter() const;
    void setMeter(const OARadarIqTrack_point_meter &meter);
    bool is_meter_Set() const;
    bool is_meter_Valid() const;

    qint32 getFilter() const;
    void setFilter(const qint32 &filter);
    bool is_filter_Set() const;
    bool is_filter_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OARadarIqGeo_coordinate m_coord;
    bool m_coord_isSet;
    bool m_coord_isValid;

    QDateTime m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    OARadarIqTrack_point_velocity m_velocity;
    bool m_velocity_isSet;
    bool m_velocity_isValid;

    OARadarIqTrack_point_geometry m_geometry;
    bool m_geometry_isSet;
    bool m_geometry_isValid;

    OARadarIqTrack_point_meter m_meter;
    bool m_meter_isSet;
    bool m_meter_isValid;

    qint32 m_filter;
    bool m_filter_isSet;
    bool m_filter_isValid;
};

} // namespace OARadarIq

Q_DECLARE_METATYPE(OARadarIq::OARadarIqTrack_point)

#endif // OARadarIqTrack_point_H
