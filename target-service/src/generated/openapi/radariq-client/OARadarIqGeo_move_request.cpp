/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqGeo_move_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqGeo_move_request::OARadarIqGeo_move_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqGeo_move_request::OARadarIqGeo_move_request() {
    this->initializeModel();
}

OARadarIqGeo_move_request::~OARadarIqGeo_move_request() {}

void OARadarIqGeo_move_request::initializeModel() {

    m_azimuth_isSet = false;
    m_azimuth_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;
}

void OARadarIqGeo_move_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqGeo_move_request::fromJsonObject(QJsonObject json) {

    m_azimuth_isValid = ::OARadarIq::fromJsonValue(m_azimuth, json[QString("azimuth")]);
    m_azimuth_isSet = !json[QString("azimuth")].isNull() && m_azimuth_isValid;

    m_distance_isValid = ::OARadarIq::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;
}

QString OARadarIqGeo_move_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqGeo_move_request::asJsonObject() const {
    QJsonObject obj;
    if (m_azimuth_isSet) {
        obj.insert(QString("azimuth"), ::OARadarIq::toJsonValue(m_azimuth));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OARadarIq::toJsonValue(m_distance));
    }
    return obj;
}

double OARadarIqGeo_move_request::getAzimuth() const {
    return m_azimuth;
}
void OARadarIqGeo_move_request::setAzimuth(const double &azimuth) {
    m_azimuth = azimuth;
    m_azimuth_isSet = true;
}

bool OARadarIqGeo_move_request::is_azimuth_Set() const{
    return m_azimuth_isSet;
}

bool OARadarIqGeo_move_request::is_azimuth_Valid() const{
    return m_azimuth_isValid;
}

double OARadarIqGeo_move_request::getDistance() const {
    return m_distance;
}
void OARadarIqGeo_move_request::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OARadarIqGeo_move_request::is_distance_Set() const{
    return m_distance_isSet;
}

bool OARadarIqGeo_move_request::is_distance_Valid() const{
    return m_distance_isValid;
}

bool OARadarIqGeo_move_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azimuth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqGeo_move_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_azimuth_isValid && m_distance_isValid && true;
}

} // namespace OARadarIq
