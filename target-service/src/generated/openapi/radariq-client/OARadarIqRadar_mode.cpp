/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqRadar_mode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqRadar_mode::OARadarIqRadar_mode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqRadar_mode::OARadarIqRadar_mode() {
    this->initializeModel();
}

OARadarIqRadar_mode::~OARadarIqRadar_mode() {}

void OARadarIqRadar_mode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOARadarIqRadar_mode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OARadarIqRadar_mode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("UNDEFINED", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqRadar_mode::UNDEFINED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OFF", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqRadar_mode::OFF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ON", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqRadar_mode::ON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROBE", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqRadar_mode::PROBE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMITATION", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqRadar_mode::IMITATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCAN", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqRadar_mode::SCAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqRadar_mode::FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OARadarIqRadar_mode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OARadarIqRadar_mode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOARadarIqRadar_mode::UNDEFINED:
            val = "UNDEFINED";
            break;
        case eOARadarIqRadar_mode::OFF:
            val = "OFF";
            break;
        case eOARadarIqRadar_mode::ON:
            val = "ON";
            break;
        case eOARadarIqRadar_mode::PROBE:
            val = "PROBE";
            break;
        case eOARadarIqRadar_mode::IMITATION:
            val = "IMITATION";
            break;
        case eOARadarIqRadar_mode::SCAN:
            val = "SCAN";
            break;
        case eOARadarIqRadar_mode::FAILURE:
            val = "FAILURE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OARadarIqRadar_mode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OARadarIqRadar_mode::eOARadarIqRadar_mode OARadarIqRadar_mode::getValue() const {
    return m_value;
}

void OARadarIqRadar_mode::setValue(const OARadarIqRadar_mode::eOARadarIqRadar_mode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OARadarIqRadar_mode::isSet() const {
    
    return m_value_isSet;
}

bool OARadarIqRadar_mode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OARadarIq
