/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqRadar_telemetry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqRadar_telemetry::OARadarIqRadar_telemetry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqRadar_telemetry::OARadarIqRadar_telemetry() {
    this->initializeModel();
}

OARadarIqRadar_telemetry::~OARadarIqRadar_telemetry() {}

void OARadarIqRadar_telemetry::initializeModel() {

    m_amplitude_threshold_isSet = false;
    m_amplitude_threshold_isValid = false;

    m_antenna_status_list_isSet = false;
    m_antenna_status_list_isValid = false;

    m_clutter_condition_isSet = false;
    m_clutter_condition_isValid = false;

    m_clutter_levels_isSet = false;
    m_clutter_levels_isValid = false;

    m_cpu_load_isSet = false;
    m_cpu_load_isValid = false;

    m_device_status_isSet = false;
    m_device_status_isValid = false;

    m_extrapol_time_isSet = false;
    m_extrapol_time_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_hardware_condition_isSet = false;
    m_hardware_condition_isValid = false;

    m_hardware_status_isSet = false;
    m_hardware_status_isValid = false;

    m_integral_condition_isSet = false;
    m_integral_condition_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_sensitivity_isSet = false;
    m_sensitivity_isValid = false;

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_temperature_condition_isSet = false;
    m_temperature_condition_isValid = false;

    m_threshold_control_isSet = false;
    m_threshold_control_isValid = false;

    m_velocity_threshold_isSet = false;
    m_velocity_threshold_isValid = false;
}

void OARadarIqRadar_telemetry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqRadar_telemetry::fromJsonObject(QJsonObject json) {

    m_amplitude_threshold_isValid = ::OARadarIq::fromJsonValue(m_amplitude_threshold, json[QString("amplitude_threshold")]);
    m_amplitude_threshold_isSet = !json[QString("amplitude_threshold")].isNull() && m_amplitude_threshold_isValid;

    m_antenna_status_list_isValid = ::OARadarIq::fromJsonValue(m_antenna_status_list, json[QString("antenna_status_list")]);
    m_antenna_status_list_isSet = !json[QString("antenna_status_list")].isNull() && m_antenna_status_list_isValid;

    m_clutter_condition_isValid = ::OARadarIq::fromJsonValue(m_clutter_condition, json[QString("clutter_condition")]);
    m_clutter_condition_isSet = !json[QString("clutter_condition")].isNull() && m_clutter_condition_isValid;

    m_clutter_levels_isValid = ::OARadarIq::fromJsonValue(m_clutter_levels, json[QString("clutter_levels")]);
    m_clutter_levels_isSet = !json[QString("clutter_levels")].isNull() && m_clutter_levels_isValid;

    m_cpu_load_isValid = ::OARadarIq::fromJsonValue(m_cpu_load, json[QString("cpu_load")]);
    m_cpu_load_isSet = !json[QString("cpu_load")].isNull() && m_cpu_load_isValid;

    m_device_status_isValid = ::OARadarIq::fromJsonValue(m_device_status, json[QString("device_status")]);
    m_device_status_isSet = !json[QString("device_status")].isNull() && m_device_status_isValid;

    m_extrapol_time_isValid = ::OARadarIq::fromJsonValue(m_extrapol_time, json[QString("extrapol_time")]);
    m_extrapol_time_isSet = !json[QString("extrapol_time")].isNull() && m_extrapol_time_isValid;

    m_frequency_isValid = ::OARadarIq::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_hardware_condition_isValid = ::OARadarIq::fromJsonValue(m_hardware_condition, json[QString("hardware_condition")]);
    m_hardware_condition_isSet = !json[QString("hardware_condition")].isNull() && m_hardware_condition_isValid;

    m_hardware_status_isValid = ::OARadarIq::fromJsonValue(m_hardware_status, json[QString("hardware_status")]);
    m_hardware_status_isSet = !json[QString("hardware_status")].isNull() && m_hardware_status_isValid;

    m_integral_condition_isValid = ::OARadarIq::fromJsonValue(m_integral_condition, json[QString("integral_condition")]);
    m_integral_condition_isSet = !json[QString("integral_condition")].isNull() && m_integral_condition_isValid;

    m_mode_isValid = ::OARadarIq::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_sensitivity_isValid = ::OARadarIq::fromJsonValue(m_sensitivity, json[QString("sensitivity")]);
    m_sensitivity_isSet = !json[QString("sensitivity")].isNull() && m_sensitivity_isValid;

    m_temperature_isValid = ::OARadarIq::fromJsonValue(m_temperature, json[QString("temperature")]);
    m_temperature_isSet = !json[QString("temperature")].isNull() && m_temperature_isValid;

    m_temperature_condition_isValid = ::OARadarIq::fromJsonValue(m_temperature_condition, json[QString("temperature_condition")]);
    m_temperature_condition_isSet = !json[QString("temperature_condition")].isNull() && m_temperature_condition_isValid;

    m_threshold_control_isValid = ::OARadarIq::fromJsonValue(m_threshold_control, json[QString("threshold_control")]);
    m_threshold_control_isSet = !json[QString("threshold_control")].isNull() && m_threshold_control_isValid;

    m_velocity_threshold_isValid = ::OARadarIq::fromJsonValue(m_velocity_threshold, json[QString("velocity_threshold")]);
    m_velocity_threshold_isSet = !json[QString("velocity_threshold")].isNull() && m_velocity_threshold_isValid;
}

QString OARadarIqRadar_telemetry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqRadar_telemetry::asJsonObject() const {
    QJsonObject obj;
    if (m_amplitude_threshold_isSet) {
        obj.insert(QString("amplitude_threshold"), ::OARadarIq::toJsonValue(m_amplitude_threshold));
    }
    if (m_antenna_status_list.size() > 0) {
        obj.insert(QString("antenna_status_list"), ::OARadarIq::toJsonValue(m_antenna_status_list));
    }
    if (m_clutter_condition_isSet) {
        obj.insert(QString("clutter_condition"), ::OARadarIq::toJsonValue(m_clutter_condition));
    }
    if (m_clutter_levels_isSet) {
        obj.insert(QString("clutter_levels"), ::OARadarIq::toJsonValue(m_clutter_levels));
    }
    if (m_cpu_load_isSet) {
        obj.insert(QString("cpu_load"), ::OARadarIq::toJsonValue(m_cpu_load));
    }
    if (m_device_status_isSet) {
        obj.insert(QString("device_status"), ::OARadarIq::toJsonValue(m_device_status));
    }
    if (m_extrapol_time_isSet) {
        obj.insert(QString("extrapol_time"), ::OARadarIq::toJsonValue(m_extrapol_time));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OARadarIq::toJsonValue(m_frequency));
    }
    if (m_hardware_condition_isSet) {
        obj.insert(QString("hardware_condition"), ::OARadarIq::toJsonValue(m_hardware_condition));
    }
    if (m_hardware_status_isSet) {
        obj.insert(QString("hardware_status"), ::OARadarIq::toJsonValue(m_hardware_status));
    }
    if (m_integral_condition_isSet) {
        obj.insert(QString("integral_condition"), ::OARadarIq::toJsonValue(m_integral_condition));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("mode"), ::OARadarIq::toJsonValue(m_mode));
    }
    if (m_sensitivity_isSet) {
        obj.insert(QString("sensitivity"), ::OARadarIq::toJsonValue(m_sensitivity));
    }
    if (m_temperature_isSet) {
        obj.insert(QString("temperature"), ::OARadarIq::toJsonValue(m_temperature));
    }
    if (m_temperature_condition_isSet) {
        obj.insert(QString("temperature_condition"), ::OARadarIq::toJsonValue(m_temperature_condition));
    }
    if (m_threshold_control_isSet) {
        obj.insert(QString("threshold_control"), ::OARadarIq::toJsonValue(m_threshold_control));
    }
    if (m_velocity_threshold_isSet) {
        obj.insert(QString("velocity_threshold"), ::OARadarIq::toJsonValue(m_velocity_threshold));
    }
    return obj;
}

qint32 OARadarIqRadar_telemetry::getAmplitudeThreshold() const {
    return m_amplitude_threshold;
}
void OARadarIqRadar_telemetry::setAmplitudeThreshold(const qint32 &amplitude_threshold) {
    m_amplitude_threshold = amplitude_threshold;
    m_amplitude_threshold_isSet = true;
}

bool OARadarIqRadar_telemetry::is_amplitude_threshold_Set() const{
    return m_amplitude_threshold_isSet;
}

bool OARadarIqRadar_telemetry::is_amplitude_threshold_Valid() const{
    return m_amplitude_threshold_isValid;
}

QList<QString> OARadarIqRadar_telemetry::getAntennaStatusList() const {
    return m_antenna_status_list;
}
void OARadarIqRadar_telemetry::setAntennaStatusList(const QList<QString> &antenna_status_list) {
    m_antenna_status_list = antenna_status_list;
    m_antenna_status_list_isSet = true;
}

bool OARadarIqRadar_telemetry::is_antenna_status_list_Set() const{
    return m_antenna_status_list_isSet;
}

bool OARadarIqRadar_telemetry::is_antenna_status_list_Valid() const{
    return m_antenna_status_list_isValid;
}

QString OARadarIqRadar_telemetry::getClutterCondition() const {
    return m_clutter_condition;
}
void OARadarIqRadar_telemetry::setClutterCondition(const QString &clutter_condition) {
    m_clutter_condition = clutter_condition;
    m_clutter_condition_isSet = true;
}

bool OARadarIqRadar_telemetry::is_clutter_condition_Set() const{
    return m_clutter_condition_isSet;
}

bool OARadarIqRadar_telemetry::is_clutter_condition_Valid() const{
    return m_clutter_condition_isValid;
}

QString OARadarIqRadar_telemetry::getClutterLevels() const {
    return m_clutter_levels;
}
void OARadarIqRadar_telemetry::setClutterLevels(const QString &clutter_levels) {
    m_clutter_levels = clutter_levels;
    m_clutter_levels_isSet = true;
}

bool OARadarIqRadar_telemetry::is_clutter_levels_Set() const{
    return m_clutter_levels_isSet;
}

bool OARadarIqRadar_telemetry::is_clutter_levels_Valid() const{
    return m_clutter_levels_isValid;
}

qint32 OARadarIqRadar_telemetry::getCpuLoad() const {
    return m_cpu_load;
}
void OARadarIqRadar_telemetry::setCpuLoad(const qint32 &cpu_load) {
    m_cpu_load = cpu_load;
    m_cpu_load_isSet = true;
}

bool OARadarIqRadar_telemetry::is_cpu_load_Set() const{
    return m_cpu_load_isSet;
}

bool OARadarIqRadar_telemetry::is_cpu_load_Valid() const{
    return m_cpu_load_isValid;
}

QString OARadarIqRadar_telemetry::getDeviceStatus() const {
    return m_device_status;
}
void OARadarIqRadar_telemetry::setDeviceStatus(const QString &device_status) {
    m_device_status = device_status;
    m_device_status_isSet = true;
}

bool OARadarIqRadar_telemetry::is_device_status_Set() const{
    return m_device_status_isSet;
}

bool OARadarIqRadar_telemetry::is_device_status_Valid() const{
    return m_device_status_isValid;
}

qint32 OARadarIqRadar_telemetry::getExtrapolTime() const {
    return m_extrapol_time;
}
void OARadarIqRadar_telemetry::setExtrapolTime(const qint32 &extrapol_time) {
    m_extrapol_time = extrapol_time;
    m_extrapol_time_isSet = true;
}

bool OARadarIqRadar_telemetry::is_extrapol_time_Set() const{
    return m_extrapol_time_isSet;
}

bool OARadarIqRadar_telemetry::is_extrapol_time_Valid() const{
    return m_extrapol_time_isValid;
}

QString OARadarIqRadar_telemetry::getFrequency() const {
    return m_frequency;
}
void OARadarIqRadar_telemetry::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OARadarIqRadar_telemetry::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OARadarIqRadar_telemetry::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OARadarIqRadar_telemetry::getHardwareCondition() const {
    return m_hardware_condition;
}
void OARadarIqRadar_telemetry::setHardwareCondition(const QString &hardware_condition) {
    m_hardware_condition = hardware_condition;
    m_hardware_condition_isSet = true;
}

bool OARadarIqRadar_telemetry::is_hardware_condition_Set() const{
    return m_hardware_condition_isSet;
}

bool OARadarIqRadar_telemetry::is_hardware_condition_Valid() const{
    return m_hardware_condition_isValid;
}

QString OARadarIqRadar_telemetry::getHardwareStatus() const {
    return m_hardware_status;
}
void OARadarIqRadar_telemetry::setHardwareStatus(const QString &hardware_status) {
    m_hardware_status = hardware_status;
    m_hardware_status_isSet = true;
}

bool OARadarIqRadar_telemetry::is_hardware_status_Set() const{
    return m_hardware_status_isSet;
}

bool OARadarIqRadar_telemetry::is_hardware_status_Valid() const{
    return m_hardware_status_isValid;
}

QString OARadarIqRadar_telemetry::getIntegralCondition() const {
    return m_integral_condition;
}
void OARadarIqRadar_telemetry::setIntegralCondition(const QString &integral_condition) {
    m_integral_condition = integral_condition;
    m_integral_condition_isSet = true;
}

bool OARadarIqRadar_telemetry::is_integral_condition_Set() const{
    return m_integral_condition_isSet;
}

bool OARadarIqRadar_telemetry::is_integral_condition_Valid() const{
    return m_integral_condition_isValid;
}

OARadarIqRadar_mode OARadarIqRadar_telemetry::getMode() const {
    return m_mode;
}
void OARadarIqRadar_telemetry::setMode(const OARadarIqRadar_mode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OARadarIqRadar_telemetry::is_mode_Set() const{
    return m_mode_isSet;
}

bool OARadarIqRadar_telemetry::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OARadarIqRadar_telemetry::getSensitivity() const {
    return m_sensitivity;
}
void OARadarIqRadar_telemetry::setSensitivity(const QString &sensitivity) {
    m_sensitivity = sensitivity;
    m_sensitivity_isSet = true;
}

bool OARadarIqRadar_telemetry::is_sensitivity_Set() const{
    return m_sensitivity_isSet;
}

bool OARadarIqRadar_telemetry::is_sensitivity_Valid() const{
    return m_sensitivity_isValid;
}

double OARadarIqRadar_telemetry::getTemperature() const {
    return m_temperature;
}
void OARadarIqRadar_telemetry::setTemperature(const double &temperature) {
    m_temperature = temperature;
    m_temperature_isSet = true;
}

bool OARadarIqRadar_telemetry::is_temperature_Set() const{
    return m_temperature_isSet;
}

bool OARadarIqRadar_telemetry::is_temperature_Valid() const{
    return m_temperature_isValid;
}

QString OARadarIqRadar_telemetry::getTemperatureCondition() const {
    return m_temperature_condition;
}
void OARadarIqRadar_telemetry::setTemperatureCondition(const QString &temperature_condition) {
    m_temperature_condition = temperature_condition;
    m_temperature_condition_isSet = true;
}

bool OARadarIqRadar_telemetry::is_temperature_condition_Set() const{
    return m_temperature_condition_isSet;
}

bool OARadarIqRadar_telemetry::is_temperature_condition_Valid() const{
    return m_temperature_condition_isValid;
}

QString OARadarIqRadar_telemetry::getThresholdControl() const {
    return m_threshold_control;
}
void OARadarIqRadar_telemetry::setThresholdControl(const QString &threshold_control) {
    m_threshold_control = threshold_control;
    m_threshold_control_isSet = true;
}

bool OARadarIqRadar_telemetry::is_threshold_control_Set() const{
    return m_threshold_control_isSet;
}

bool OARadarIqRadar_telemetry::is_threshold_control_Valid() const{
    return m_threshold_control_isValid;
}

qint32 OARadarIqRadar_telemetry::getVelocityThreshold() const {
    return m_velocity_threshold;
}
void OARadarIqRadar_telemetry::setVelocityThreshold(const qint32 &velocity_threshold) {
    m_velocity_threshold = velocity_threshold;
    m_velocity_threshold_isSet = true;
}

bool OARadarIqRadar_telemetry::is_velocity_threshold_Set() const{
    return m_velocity_threshold_isSet;
}

bool OARadarIqRadar_telemetry::is_velocity_threshold_Valid() const{
    return m_velocity_threshold_isValid;
}

bool OARadarIqRadar_telemetry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amplitude_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_antenna_status_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_clutter_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clutter_levels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_load_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extrapol_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hardware_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hardware_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integral_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensitivity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temperature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temperature_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_control_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_velocity_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqRadar_telemetry::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mode_isValid && true;
}

} // namespace OARadarIq
