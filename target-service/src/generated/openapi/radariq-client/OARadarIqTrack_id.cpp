/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqTrack_id.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqTrack_id::OARadarIqTrack_id(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqTrack_id::OARadarIqTrack_id() {
    this->initializeModel();
}

OARadarIqTrack_id::~OARadarIqTrack_id() {}

void OARadarIqTrack_id::initializeModel() {

    m_source_isSet = false;
    m_source_isValid = false;

    m_unique_isSet = false;
    m_unique_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;
}

void OARadarIqTrack_id::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqTrack_id::fromJsonObject(QJsonObject json) {

    m_source_isValid = ::OARadarIq::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_unique_isValid = ::OARadarIq::fromJsonValue(m_unique, json[QString("unique")]);
    m_unique_isSet = !json[QString("unique")].isNull() && m_unique_isValid;

    m_unit_isValid = ::OARadarIq::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_device_isValid = ::OARadarIq::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;
}

QString OARadarIqTrack_id::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqTrack_id::asJsonObject() const {
    QJsonObject obj;
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OARadarIq::toJsonValue(m_source));
    }
    if (m_unique_isSet) {
        obj.insert(QString("unique"), ::OARadarIq::toJsonValue(m_unique));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OARadarIq::toJsonValue(m_unit));
    }
    if (m_device_isSet) {
        obj.insert(QString("device"), ::OARadarIq::toJsonValue(m_device));
    }
    return obj;
}

qint32 OARadarIqTrack_id::getSource() const {
    return m_source;
}
void OARadarIqTrack_id::setSource(const qint32 &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OARadarIqTrack_id::is_source_Set() const{
    return m_source_isSet;
}

bool OARadarIqTrack_id::is_source_Valid() const{
    return m_source_isValid;
}

QString OARadarIqTrack_id::getUnique() const {
    return m_unique;
}
void OARadarIqTrack_id::setUnique(const QString &unique) {
    m_unique = unique;
    m_unique_isSet = true;
}

bool OARadarIqTrack_id::is_unique_Set() const{
    return m_unique_isSet;
}

bool OARadarIqTrack_id::is_unique_Valid() const{
    return m_unique_isValid;
}

QString OARadarIqTrack_id::getUnit() const {
    return m_unit;
}
void OARadarIqTrack_id::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OARadarIqTrack_id::is_unit_Set() const{
    return m_unit_isSet;
}

bool OARadarIqTrack_id::is_unit_Valid() const{
    return m_unit_isValid;
}

QString OARadarIqTrack_id::getDevice() const {
    return m_device;
}
void OARadarIqTrack_id::setDevice(const QString &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OARadarIqTrack_id::is_device_Set() const{
    return m_device_isSet;
}

bool OARadarIqTrack_id::is_device_Valid() const{
    return m_device_isValid;
}

bool OARadarIqTrack_id::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqTrack_id::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_isValid && m_unique_isValid && m_unit_isValid && m_device_isValid && true;
}

} // namespace OARadarIq
