/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqCamera_speed_coord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqCamera_speed_coord::OARadarIqCamera_speed_coord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqCamera_speed_coord::OARadarIqCamera_speed_coord() {
    this->initializeModel();
}

OARadarIqCamera_speed_coord::~OARadarIqCamera_speed_coord() {}

void OARadarIqCamera_speed_coord::initializeModel() {

    m_x_speed_isSet = false;
    m_x_speed_isValid = false;

    m_y_speed_isSet = false;
    m_y_speed_isValid = false;
}

void OARadarIqCamera_speed_coord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqCamera_speed_coord::fromJsonObject(QJsonObject json) {

    m_x_speed_isValid = ::OARadarIq::fromJsonValue(m_x_speed, json[QString("xSpeed")]);
    m_x_speed_isSet = !json[QString("xSpeed")].isNull() && m_x_speed_isValid;

    m_y_speed_isValid = ::OARadarIq::fromJsonValue(m_y_speed, json[QString("ySpeed")]);
    m_y_speed_isSet = !json[QString("ySpeed")].isNull() && m_y_speed_isValid;
}

QString OARadarIqCamera_speed_coord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqCamera_speed_coord::asJsonObject() const {
    QJsonObject obj;
    if (m_x_speed_isSet) {
        obj.insert(QString("xSpeed"), ::OARadarIq::toJsonValue(m_x_speed));
    }
    if (m_y_speed_isSet) {
        obj.insert(QString("ySpeed"), ::OARadarIq::toJsonValue(m_y_speed));
    }
    return obj;
}

double OARadarIqCamera_speed_coord::getXSpeed() const {
    return m_x_speed;
}
void OARadarIqCamera_speed_coord::setXSpeed(const double &x_speed) {
    m_x_speed = x_speed;
    m_x_speed_isSet = true;
}

bool OARadarIqCamera_speed_coord::is_x_speed_Set() const{
    return m_x_speed_isSet;
}

bool OARadarIqCamera_speed_coord::is_x_speed_Valid() const{
    return m_x_speed_isValid;
}

double OARadarIqCamera_speed_coord::getYSpeed() const {
    return m_y_speed;
}
void OARadarIqCamera_speed_coord::setYSpeed(const double &y_speed) {
    m_y_speed = y_speed;
    m_y_speed_isSet = true;
}

bool OARadarIqCamera_speed_coord::is_y_speed_Set() const{
    return m_y_speed_isSet;
}

bool OARadarIqCamera_speed_coord::is_y_speed_Valid() const{
    return m_y_speed_isValid;
}

bool OARadarIqCamera_speed_coord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_x_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_speed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqCamera_speed_coord::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_x_speed_isValid && m_y_speed_isValid && true;
}

} // namespace OARadarIq
