/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqTrack_point_geometry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqTrack_point_geometry::OARadarIqTrack_point_geometry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqTrack_point_geometry::OARadarIqTrack_point_geometry() {
    this->initializeModel();
}

OARadarIqTrack_point_geometry::~OARadarIqTrack_point_geometry() {}

void OARadarIqTrack_point_geometry::initializeModel() {

    m_x_isSet = false;
    m_x_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;

    m_z_isSet = false;
    m_z_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_range_isSet = false;
    m_range_isValid = false;

    m_azimuth_isSet = false;
    m_azimuth_isValid = false;

    m_elevation_isSet = false;
    m_elevation_isValid = false;
}

void OARadarIqTrack_point_geometry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqTrack_point_geometry::fromJsonObject(QJsonObject json) {

    m_x_isValid = ::OARadarIq::fromJsonValue(m_x, json[QString("x")]);
    m_x_isSet = !json[QString("x")].isNull() && m_x_isValid;

    m_y_isValid = ::OARadarIq::fromJsonValue(m_y, json[QString("y")]);
    m_y_isSet = !json[QString("y")].isNull() && m_y_isValid;

    m_z_isValid = ::OARadarIq::fromJsonValue(m_z, json[QString("z")]);
    m_z_isSet = !json[QString("z")].isNull() && m_z_isValid;

    m_distance_isValid = ::OARadarIq::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_range_isValid = ::OARadarIq::fromJsonValue(m_range, json[QString("range")]);
    m_range_isSet = !json[QString("range")].isNull() && m_range_isValid;

    m_azimuth_isValid = ::OARadarIq::fromJsonValue(m_azimuth, json[QString("azimuth")]);
    m_azimuth_isSet = !json[QString("azimuth")].isNull() && m_azimuth_isValid;

    m_elevation_isValid = ::OARadarIq::fromJsonValue(m_elevation, json[QString("elevation")]);
    m_elevation_isSet = !json[QString("elevation")].isNull() && m_elevation_isValid;
}

QString OARadarIqTrack_point_geometry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqTrack_point_geometry::asJsonObject() const {
    QJsonObject obj;
    if (m_x_isSet) {
        obj.insert(QString("x"), ::OARadarIq::toJsonValue(m_x));
    }
    if (m_y_isSet) {
        obj.insert(QString("y"), ::OARadarIq::toJsonValue(m_y));
    }
    if (m_z_isSet) {
        obj.insert(QString("z"), ::OARadarIq::toJsonValue(m_z));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OARadarIq::toJsonValue(m_distance));
    }
    if (m_range_isSet) {
        obj.insert(QString("range"), ::OARadarIq::toJsonValue(m_range));
    }
    if (m_azimuth_isSet) {
        obj.insert(QString("azimuth"), ::OARadarIq::toJsonValue(m_azimuth));
    }
    if (m_elevation_isSet) {
        obj.insert(QString("elevation"), ::OARadarIq::toJsonValue(m_elevation));
    }
    return obj;
}

double OARadarIqTrack_point_geometry::getX() const {
    return m_x;
}
void OARadarIqTrack_point_geometry::setX(const double &x) {
    m_x = x;
    m_x_isSet = true;
}

bool OARadarIqTrack_point_geometry::is_x_Set() const{
    return m_x_isSet;
}

bool OARadarIqTrack_point_geometry::is_x_Valid() const{
    return m_x_isValid;
}

double OARadarIqTrack_point_geometry::getY() const {
    return m_y;
}
void OARadarIqTrack_point_geometry::setY(const double &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OARadarIqTrack_point_geometry::is_y_Set() const{
    return m_y_isSet;
}

bool OARadarIqTrack_point_geometry::is_y_Valid() const{
    return m_y_isValid;
}

double OARadarIqTrack_point_geometry::getZ() const {
    return m_z;
}
void OARadarIqTrack_point_geometry::setZ(const double &z) {
    m_z = z;
    m_z_isSet = true;
}

bool OARadarIqTrack_point_geometry::is_z_Set() const{
    return m_z_isSet;
}

bool OARadarIqTrack_point_geometry::is_z_Valid() const{
    return m_z_isValid;
}

double OARadarIqTrack_point_geometry::getDistance() const {
    return m_distance;
}
void OARadarIqTrack_point_geometry::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OARadarIqTrack_point_geometry::is_distance_Set() const{
    return m_distance_isSet;
}

bool OARadarIqTrack_point_geometry::is_distance_Valid() const{
    return m_distance_isValid;
}

double OARadarIqTrack_point_geometry::getRange() const {
    return m_range;
}
void OARadarIqTrack_point_geometry::setRange(const double &range) {
    m_range = range;
    m_range_isSet = true;
}

bool OARadarIqTrack_point_geometry::is_range_Set() const{
    return m_range_isSet;
}

bool OARadarIqTrack_point_geometry::is_range_Valid() const{
    return m_range_isValid;
}

double OARadarIqTrack_point_geometry::getAzimuth() const {
    return m_azimuth;
}
void OARadarIqTrack_point_geometry::setAzimuth(const double &azimuth) {
    m_azimuth = azimuth;
    m_azimuth_isSet = true;
}

bool OARadarIqTrack_point_geometry::is_azimuth_Set() const{
    return m_azimuth_isSet;
}

bool OARadarIqTrack_point_geometry::is_azimuth_Valid() const{
    return m_azimuth_isValid;
}

double OARadarIqTrack_point_geometry::getElevation() const {
    return m_elevation;
}
void OARadarIqTrack_point_geometry::setElevation(const double &elevation) {
    m_elevation = elevation;
    m_elevation_isSet = true;
}

bool OARadarIqTrack_point_geometry::is_elevation_Set() const{
    return m_elevation_isSet;
}

bool OARadarIqTrack_point_geometry::is_elevation_Valid() const{
    return m_elevation_isValid;
}

bool OARadarIqTrack_point_geometry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_z_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azimuth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elevation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqTrack_point_geometry::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_x_isValid && m_y_isValid && m_z_isValid && m_distance_isValid && m_range_isValid && m_azimuth_isValid && m_elevation_isValid && true;
}

} // namespace OARadarIq
