/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqRadar_settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqRadar_settings::OARadarIqRadar_settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqRadar_settings::OARadarIqRadar_settings() {
    this->initializeModel();
}

OARadarIqRadar_settings::~OARadarIqRadar_settings() {}

void OARadarIqRadar_settings::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_connection_on_isSet = false;
    m_connection_on_isValid = false;

    m_player_source_isSet = false;
    m_player_source_isValid = false;

    m_power_on_isSet = false;
    m_power_on_isValid = false;

    m_monitoring_mode_isSet = false;
    m_monitoring_mode_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_sensitivity_isSet = false;
    m_sensitivity_isValid = false;

    m_extrapol_time_isSet = false;
    m_extrapol_time_isValid = false;

    m_threshold_control_isSet = false;
    m_threshold_control_isValid = false;

    m_amplitude_threshold_isSet = false;
    m_amplitude_threshold_isValid = false;

    m_velocity_threshold_isSet = false;
    m_velocity_threshold_isValid = false;

    m_classifier_params_isSet = false;
    m_classifier_params_isValid = false;

    m_workzone_isSet = false;
    m_workzone_isValid = false;
}

void OARadarIqRadar_settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqRadar_settings::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OARadarIq::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_model_isValid = ::OARadarIq::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_address_isValid = ::OARadarIq::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_position_isValid = ::OARadarIq::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_connection_on_isValid = ::OARadarIq::fromJsonValue(m_connection_on, json[QString("connection_on")]);
    m_connection_on_isSet = !json[QString("connection_on")].isNull() && m_connection_on_isValid;

    m_player_source_isValid = ::OARadarIq::fromJsonValue(m_player_source, json[QString("player_source")]);
    m_player_source_isSet = !json[QString("player_source")].isNull() && m_player_source_isValid;

    m_power_on_isValid = ::OARadarIq::fromJsonValue(m_power_on, json[QString("power_on")]);
    m_power_on_isSet = !json[QString("power_on")].isNull() && m_power_on_isValid;

    m_monitoring_mode_isValid = ::OARadarIq::fromJsonValue(m_monitoring_mode, json[QString("monitoring_mode")]);
    m_monitoring_mode_isSet = !json[QString("monitoring_mode")].isNull() && m_monitoring_mode_isValid;

    m_frequency_isValid = ::OARadarIq::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_sensitivity_isValid = ::OARadarIq::fromJsonValue(m_sensitivity, json[QString("sensitivity")]);
    m_sensitivity_isSet = !json[QString("sensitivity")].isNull() && m_sensitivity_isValid;

    m_extrapol_time_isValid = ::OARadarIq::fromJsonValue(m_extrapol_time, json[QString("extrapol_time")]);
    m_extrapol_time_isSet = !json[QString("extrapol_time")].isNull() && m_extrapol_time_isValid;

    m_threshold_control_isValid = ::OARadarIq::fromJsonValue(m_threshold_control, json[QString("threshold_control")]);
    m_threshold_control_isSet = !json[QString("threshold_control")].isNull() && m_threshold_control_isValid;

    m_amplitude_threshold_isValid = ::OARadarIq::fromJsonValue(m_amplitude_threshold, json[QString("amplitude_threshold")]);
    m_amplitude_threshold_isSet = !json[QString("amplitude_threshold")].isNull() && m_amplitude_threshold_isValid;

    m_velocity_threshold_isValid = ::OARadarIq::fromJsonValue(m_velocity_threshold, json[QString("velocity_threshold")]);
    m_velocity_threshold_isSet = !json[QString("velocity_threshold")].isNull() && m_velocity_threshold_isValid;

    m_classifier_params_isValid = ::OARadarIq::fromJsonValue(m_classifier_params, json[QString("classifier_params")]);
    m_classifier_params_isSet = !json[QString("classifier_params")].isNull() && m_classifier_params_isValid;

    m_workzone_isValid = ::OARadarIq::fromJsonValue(m_workzone, json[QString("workzone")]);
    m_workzone_isSet = !json[QString("workzone")].isNull() && m_workzone_isValid;
}

QString OARadarIqRadar_settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqRadar_settings::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OARadarIq::toJsonValue(m_id));
    }
    if (m_model.isSet()) {
        obj.insert(QString("model"), ::OARadarIq::toJsonValue(m_model));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OARadarIq::toJsonValue(m_address));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OARadarIq::toJsonValue(m_position));
    }
    if (m_connection_on_isSet) {
        obj.insert(QString("connection_on"), ::OARadarIq::toJsonValue(m_connection_on));
    }
    if (m_player_source_isSet) {
        obj.insert(QString("player_source"), ::OARadarIq::toJsonValue(m_player_source));
    }
    if (m_power_on_isSet) {
        obj.insert(QString("power_on"), ::OARadarIq::toJsonValue(m_power_on));
    }
    if (m_monitoring_mode_isSet) {
        obj.insert(QString("monitoring_mode"), ::OARadarIq::toJsonValue(m_monitoring_mode));
    }
    if (m_frequency.isSet()) {
        obj.insert(QString("frequency"), ::OARadarIq::toJsonValue(m_frequency));
    }
    if (m_sensitivity.isSet()) {
        obj.insert(QString("sensitivity"), ::OARadarIq::toJsonValue(m_sensitivity));
    }
    if (m_extrapol_time_isSet) {
        obj.insert(QString("extrapol_time"), ::OARadarIq::toJsonValue(m_extrapol_time));
    }
    if (m_threshold_control.isSet()) {
        obj.insert(QString("threshold_control"), ::OARadarIq::toJsonValue(m_threshold_control));
    }
    if (m_amplitude_threshold_isSet) {
        obj.insert(QString("amplitude_threshold"), ::OARadarIq::toJsonValue(m_amplitude_threshold));
    }
    if (m_velocity_threshold_isSet) {
        obj.insert(QString("velocity_threshold"), ::OARadarIq::toJsonValue(m_velocity_threshold));
    }
    if (m_classifier_params_isSet) {
        obj.insert(QString("classifier_params"), ::OARadarIq::toJsonValue(m_classifier_params));
    }
    if (m_workzone.isSet()) {
        obj.insert(QString("workzone"), ::OARadarIq::toJsonValue(m_workzone));
    }
    return obj;
}

QString OARadarIqRadar_settings::getId() const {
    return m_id;
}
void OARadarIqRadar_settings::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OARadarIqRadar_settings::is_id_Set() const{
    return m_id_isSet;
}

bool OARadarIqRadar_settings::is_id_Valid() const{
    return m_id_isValid;
}

OARadarIqRadar_model OARadarIqRadar_settings::getModel() const {
    return m_model;
}
void OARadarIqRadar_settings::setModel(const OARadarIqRadar_model &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OARadarIqRadar_settings::is_model_Set() const{
    return m_model_isSet;
}

bool OARadarIqRadar_settings::is_model_Valid() const{
    return m_model_isValid;
}

OARadarIqNetwork_address OARadarIqRadar_settings::getAddress() const {
    return m_address;
}
void OARadarIqRadar_settings::setAddress(const OARadarIqNetwork_address &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OARadarIqRadar_settings::is_address_Set() const{
    return m_address_isSet;
}

bool OARadarIqRadar_settings::is_address_Valid() const{
    return m_address_isValid;
}

OARadarIqGeo_position OARadarIqRadar_settings::getPosition() const {
    return m_position;
}
void OARadarIqRadar_settings::setPosition(const OARadarIqGeo_position &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OARadarIqRadar_settings::is_position_Set() const{
    return m_position_isSet;
}

bool OARadarIqRadar_settings::is_position_Valid() const{
    return m_position_isValid;
}

bool OARadarIqRadar_settings::isConnectionOn() const {
    return m_connection_on;
}
void OARadarIqRadar_settings::setConnectionOn(const bool &connection_on) {
    m_connection_on = connection_on;
    m_connection_on_isSet = true;
}

bool OARadarIqRadar_settings::is_connection_on_Set() const{
    return m_connection_on_isSet;
}

bool OARadarIqRadar_settings::is_connection_on_Valid() const{
    return m_connection_on_isValid;
}

QString OARadarIqRadar_settings::getPlayerSource() const {
    return m_player_source;
}
void OARadarIqRadar_settings::setPlayerSource(const QString &player_source) {
    m_player_source = player_source;
    m_player_source_isSet = true;
}

bool OARadarIqRadar_settings::is_player_source_Set() const{
    return m_player_source_isSet;
}

bool OARadarIqRadar_settings::is_player_source_Valid() const{
    return m_player_source_isValid;
}

bool OARadarIqRadar_settings::isPowerOn() const {
    return m_power_on;
}
void OARadarIqRadar_settings::setPowerOn(const bool &power_on) {
    m_power_on = power_on;
    m_power_on_isSet = true;
}

bool OARadarIqRadar_settings::is_power_on_Set() const{
    return m_power_on_isSet;
}

bool OARadarIqRadar_settings::is_power_on_Valid() const{
    return m_power_on_isValid;
}

bool OARadarIqRadar_settings::isMonitoringMode() const {
    return m_monitoring_mode;
}
void OARadarIqRadar_settings::setMonitoringMode(const bool &monitoring_mode) {
    m_monitoring_mode = monitoring_mode;
    m_monitoring_mode_isSet = true;
}

bool OARadarIqRadar_settings::is_monitoring_mode_Set() const{
    return m_monitoring_mode_isSet;
}

bool OARadarIqRadar_settings::is_monitoring_mode_Valid() const{
    return m_monitoring_mode_isValid;
}

OARadarIqRadar_frequency OARadarIqRadar_settings::getFrequency() const {
    return m_frequency;
}
void OARadarIqRadar_settings::setFrequency(const OARadarIqRadar_frequency &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OARadarIqRadar_settings::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OARadarIqRadar_settings::is_frequency_Valid() const{
    return m_frequency_isValid;
}

OARadarIqRadar_sensitivity OARadarIqRadar_settings::getSensitivity() const {
    return m_sensitivity;
}
void OARadarIqRadar_settings::setSensitivity(const OARadarIqRadar_sensitivity &sensitivity) {
    m_sensitivity = sensitivity;
    m_sensitivity_isSet = true;
}

bool OARadarIqRadar_settings::is_sensitivity_Set() const{
    return m_sensitivity_isSet;
}

bool OARadarIqRadar_settings::is_sensitivity_Valid() const{
    return m_sensitivity_isValid;
}

qint32 OARadarIqRadar_settings::getExtrapolTime() const {
    return m_extrapol_time;
}
void OARadarIqRadar_settings::setExtrapolTime(const qint32 &extrapol_time) {
    m_extrapol_time = extrapol_time;
    m_extrapol_time_isSet = true;
}

bool OARadarIqRadar_settings::is_extrapol_time_Set() const{
    return m_extrapol_time_isSet;
}

bool OARadarIqRadar_settings::is_extrapol_time_Valid() const{
    return m_extrapol_time_isValid;
}

OARadarIqRadar_threshold_control OARadarIqRadar_settings::getThresholdControl() const {
    return m_threshold_control;
}
void OARadarIqRadar_settings::setThresholdControl(const OARadarIqRadar_threshold_control &threshold_control) {
    m_threshold_control = threshold_control;
    m_threshold_control_isSet = true;
}

bool OARadarIqRadar_settings::is_threshold_control_Set() const{
    return m_threshold_control_isSet;
}

bool OARadarIqRadar_settings::is_threshold_control_Valid() const{
    return m_threshold_control_isValid;
}

qint32 OARadarIqRadar_settings::getAmplitudeThreshold() const {
    return m_amplitude_threshold;
}
void OARadarIqRadar_settings::setAmplitudeThreshold(const qint32 &amplitude_threshold) {
    m_amplitude_threshold = amplitude_threshold;
    m_amplitude_threshold_isSet = true;
}

bool OARadarIqRadar_settings::is_amplitude_threshold_Set() const{
    return m_amplitude_threshold_isSet;
}

bool OARadarIqRadar_settings::is_amplitude_threshold_Valid() const{
    return m_amplitude_threshold_isValid;
}

qint32 OARadarIqRadar_settings::getVelocityThreshold() const {
    return m_velocity_threshold;
}
void OARadarIqRadar_settings::setVelocityThreshold(const qint32 &velocity_threshold) {
    m_velocity_threshold = velocity_threshold;
    m_velocity_threshold_isSet = true;
}

bool OARadarIqRadar_settings::is_velocity_threshold_Set() const{
    return m_velocity_threshold_isSet;
}

bool OARadarIqRadar_settings::is_velocity_threshold_Valid() const{
    return m_velocity_threshold_isValid;
}

OARadarIqObject OARadarIqRadar_settings::getClassifierParams() const {
    return m_classifier_params;
}
void OARadarIqRadar_settings::setClassifierParams(const OARadarIqObject &classifier_params) {
    m_classifier_params = classifier_params;
    m_classifier_params_isSet = true;
}

bool OARadarIqRadar_settings::is_classifier_params_Set() const{
    return m_classifier_params_isSet;
}

bool OARadarIqRadar_settings::is_classifier_params_Valid() const{
    return m_classifier_params_isValid;
}

OARadarIqWorkzone OARadarIqRadar_settings::getWorkzone() const {
    return m_workzone;
}
void OARadarIqRadar_settings::setWorkzone(const OARadarIqWorkzone &workzone) {
    m_workzone = workzone;
    m_workzone_isSet = true;
}

bool OARadarIqRadar_settings::is_workzone_Set() const{
    return m_workzone_isSet;
}

bool OARadarIqRadar_settings::is_workzone_Valid() const{
    return m_workzone_isValid;
}

bool OARadarIqRadar_settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensitivity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extrapol_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amplitude_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_velocity_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classifier_params_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workzone.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqRadar_settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_model_isValid && m_address_isValid && m_position_isValid && m_connection_on_isValid && m_player_source_isValid && m_power_on_isValid && m_monitoring_mode_isValid && m_frequency_isValid && m_sensitivity_isValid && m_extrapol_time_isValid && m_threshold_control_isValid && m_amplitude_threshold_isValid && m_velocity_threshold_isValid && m_classifier_params_isValid && m_workzone_isValid && true;
}

} // namespace OARadarIq
