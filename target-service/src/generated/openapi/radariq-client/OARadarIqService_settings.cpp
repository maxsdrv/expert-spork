/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqService_settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqService_settings::OARadarIqService_settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqService_settings::OARadarIqService_settings() {
    this->initializeModel();
}

OARadarIqService_settings::~OARadarIqService_settings() {}

void OARadarIqService_settings::initializeModel() {

    m_general_isSet = false;
    m_general_isValid = false;

    m_radar_isSet = false;
    m_radar_isValid = false;

    m_camera_isSet = false;
    m_camera_isValid = false;
}

void OARadarIqService_settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqService_settings::fromJsonObject(QJsonObject json) {

    m_general_isValid = ::OARadarIq::fromJsonValue(m_general, json[QString("general")]);
    m_general_isSet = !json[QString("general")].isNull() && m_general_isValid;

    m_radar_isValid = ::OARadarIq::fromJsonValue(m_radar, json[QString("radar")]);
    m_radar_isSet = !json[QString("radar")].isNull() && m_radar_isValid;

    m_camera_isValid = ::OARadarIq::fromJsonValue(m_camera, json[QString("camera")]);
    m_camera_isSet = !json[QString("camera")].isNull() && m_camera_isValid;
}

QString OARadarIqService_settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqService_settings::asJsonObject() const {
    QJsonObject obj;
    if (m_general.isSet()) {
        obj.insert(QString("general"), ::OARadarIq::toJsonValue(m_general));
    }
    if (m_radar.isSet()) {
        obj.insert(QString("radar"), ::OARadarIq::toJsonValue(m_radar));
    }
    if (m_camera.isSet()) {
        obj.insert(QString("camera"), ::OARadarIq::toJsonValue(m_camera));
    }
    return obj;
}

OARadarIqDevice_general_settings OARadarIqService_settings::getGeneral() const {
    return m_general;
}
void OARadarIqService_settings::setGeneral(const OARadarIqDevice_general_settings &general) {
    m_general = general;
    m_general_isSet = true;
}

bool OARadarIqService_settings::is_general_Set() const{
    return m_general_isSet;
}

bool OARadarIqService_settings::is_general_Valid() const{
    return m_general_isValid;
}

OARadarIqRadar_settings OARadarIqService_settings::getRadar() const {
    return m_radar;
}
void OARadarIqService_settings::setRadar(const OARadarIqRadar_settings &radar) {
    m_radar = radar;
    m_radar_isSet = true;
}

bool OARadarIqService_settings::is_radar_Set() const{
    return m_radar_isSet;
}

bool OARadarIqService_settings::is_radar_Valid() const{
    return m_radar_isValid;
}

OARadarIqCamera_settings OARadarIqService_settings::getCamera() const {
    return m_camera;
}
void OARadarIqService_settings::setCamera(const OARadarIqCamera_settings &camera) {
    m_camera = camera;
    m_camera_isSet = true;
}

bool OARadarIqService_settings::is_camera_Set() const{
    return m_camera_isSet;
}

bool OARadarIqService_settings::is_camera_Valid() const{
    return m_camera_isValid;
}

bool OARadarIqService_settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_general.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_radar.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_camera.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqService_settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_general_isValid && m_radar_isValid && m_camera_isValid && true;
}

} // namespace OARadarIq
