/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqObject_class.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqObject_class::OARadarIqObject_class(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqObject_class::OARadarIqObject_class() {
    this->initializeModel();
}

OARadarIqObject_class::~OARadarIqObject_class() {}

void OARadarIqObject_class::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOARadarIqObject_class::INVALID_VALUE_OPENAPI_GENERATED;
}

void OARadarIqObject_class::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DRONE", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqObject_class::DRONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CAR", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqObject_class::CAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TRUCK", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqObject_class::TRUCK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HUMAN", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqObject_class::HUMAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TREE", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqObject_class::TREE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PEOPLE_GROUP", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqObject_class::PEOPLE_GROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MOTORCYCLE", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqObject_class::MOTORCYCLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JET_SKI", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqObject_class::JET_SKI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BOAT", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqObject_class::BOAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SHIP", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqObject_class::SHIP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FALSE_ALARM", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqObject_class::FALSE_ALARM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNDEFINED", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqObject_class::UNDEFINED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OARadarIqObject_class::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OARadarIqObject_class::asJson() const {
    
    QString val;
    switch (m_value){
        case eOARadarIqObject_class::DRONE:
            val = "DRONE";
            break;
        case eOARadarIqObject_class::CAR:
            val = "CAR";
            break;
        case eOARadarIqObject_class::TRUCK:
            val = "TRUCK";
            break;
        case eOARadarIqObject_class::HUMAN:
            val = "HUMAN";
            break;
        case eOARadarIqObject_class::TREE:
            val = "TREE";
            break;
        case eOARadarIqObject_class::PEOPLE_GROUP:
            val = "PEOPLE_GROUP";
            break;
        case eOARadarIqObject_class::MOTORCYCLE:
            val = "MOTORCYCLE";
            break;
        case eOARadarIqObject_class::JET_SKI:
            val = "JET_SKI";
            break;
        case eOARadarIqObject_class::BOAT:
            val = "BOAT";
            break;
        case eOARadarIqObject_class::SHIP:
            val = "SHIP";
            break;
        case eOARadarIqObject_class::FALSE_ALARM:
            val = "FALSE_ALARM";
            break;
        case eOARadarIqObject_class::UNDEFINED:
            val = "UNDEFINED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OARadarIqObject_class::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OARadarIqObject_class::eOARadarIqObject_class OARadarIqObject_class::getValue() const {
    return m_value;
}

void OARadarIqObject_class::setValue(const OARadarIqObject_class::eOARadarIqObject_class& value){
    m_value = value;
    m_value_isSet = true;
}
bool OARadarIqObject_class::isSet() const {
    
    return m_value_isSet;
}

bool OARadarIqObject_class::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OARadarIq
