/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqRelative_move.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqRelative_move::OARadarIqRelative_move(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqRelative_move::OARadarIqRelative_move() {
    this->initializeModel();
}

OARadarIqRelative_move::~OARadarIqRelative_move() {}

void OARadarIqRelative_move::initializeModel() {

    m_pan_diff_isSet = false;
    m_pan_diff_isValid = false;

    m_tilt_diff_isSet = false;
    m_tilt_diff_isValid = false;

    m_zoom_diff_isSet = false;
    m_zoom_diff_isValid = false;
}

void OARadarIqRelative_move::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqRelative_move::fromJsonObject(QJsonObject json) {

    m_pan_diff_isValid = ::OARadarIq::fromJsonValue(m_pan_diff, json[QString("pan_diff")]);
    m_pan_diff_isSet = !json[QString("pan_diff")].isNull() && m_pan_diff_isValid;

    m_tilt_diff_isValid = ::OARadarIq::fromJsonValue(m_tilt_diff, json[QString("tilt_diff")]);
    m_tilt_diff_isSet = !json[QString("tilt_diff")].isNull() && m_tilt_diff_isValid;

    m_zoom_diff_isValid = ::OARadarIq::fromJsonValue(m_zoom_diff, json[QString("zoom_diff")]);
    m_zoom_diff_isSet = !json[QString("zoom_diff")].isNull() && m_zoom_diff_isValid;
}

QString OARadarIqRelative_move::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqRelative_move::asJsonObject() const {
    QJsonObject obj;
    if (m_pan_diff_isSet) {
        obj.insert(QString("pan_diff"), ::OARadarIq::toJsonValue(m_pan_diff));
    }
    if (m_tilt_diff_isSet) {
        obj.insert(QString("tilt_diff"), ::OARadarIq::toJsonValue(m_tilt_diff));
    }
    if (m_zoom_diff_isSet) {
        obj.insert(QString("zoom_diff"), ::OARadarIq::toJsonValue(m_zoom_diff));
    }
    return obj;
}

double OARadarIqRelative_move::getPanDiff() const {
    return m_pan_diff;
}
void OARadarIqRelative_move::setPanDiff(const double &pan_diff) {
    m_pan_diff = pan_diff;
    m_pan_diff_isSet = true;
}

bool OARadarIqRelative_move::is_pan_diff_Set() const{
    return m_pan_diff_isSet;
}

bool OARadarIqRelative_move::is_pan_diff_Valid() const{
    return m_pan_diff_isValid;
}

double OARadarIqRelative_move::getTiltDiff() const {
    return m_tilt_diff;
}
void OARadarIqRelative_move::setTiltDiff(const double &tilt_diff) {
    m_tilt_diff = tilt_diff;
    m_tilt_diff_isSet = true;
}

bool OARadarIqRelative_move::is_tilt_diff_Set() const{
    return m_tilt_diff_isSet;
}

bool OARadarIqRelative_move::is_tilt_diff_Valid() const{
    return m_tilt_diff_isValid;
}

double OARadarIqRelative_move::getZoomDiff() const {
    return m_zoom_diff;
}
void OARadarIqRelative_move::setZoomDiff(const double &zoom_diff) {
    m_zoom_diff = zoom_diff;
    m_zoom_diff_isSet = true;
}

bool OARadarIqRelative_move::is_zoom_diff_Set() const{
    return m_zoom_diff_isSet;
}

bool OARadarIqRelative_move::is_zoom_diff_Valid() const{
    return m_zoom_diff_isValid;
}

bool OARadarIqRelative_move::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pan_diff_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tilt_diff_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zoom_diff_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqRelative_move::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pan_diff_isValid && m_tilt_diff_isValid && m_zoom_diff_isValid && true;
}

} // namespace OARadarIq
