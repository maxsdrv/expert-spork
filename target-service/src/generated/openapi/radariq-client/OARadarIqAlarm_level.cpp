/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqAlarm_level.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqAlarm_level::OARadarIqAlarm_level(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqAlarm_level::OARadarIqAlarm_level() {
    this->initializeModel();
}

OARadarIqAlarm_level::~OARadarIqAlarm_level() {}

void OARadarIqAlarm_level::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOARadarIqAlarm_level::INVALID_VALUE_OPENAPI_GENERATED;
}

void OARadarIqAlarm_level::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NONE", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqAlarm_level::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MEDIUM", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqAlarm_level::MEDIUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HIGH", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqAlarm_level::HIGH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CRITICAL", Qt::CaseInsensitive) == 0) {
        m_value = eOARadarIqAlarm_level::CRITICAL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OARadarIqAlarm_level::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OARadarIqAlarm_level::asJson() const {
    
    QString val;
    switch (m_value){
        case eOARadarIqAlarm_level::NONE:
            val = "NONE";
            break;
        case eOARadarIqAlarm_level::MEDIUM:
            val = "MEDIUM";
            break;
        case eOARadarIqAlarm_level::HIGH:
            val = "HIGH";
            break;
        case eOARadarIqAlarm_level::CRITICAL:
            val = "CRITICAL";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OARadarIqAlarm_level::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OARadarIqAlarm_level::eOARadarIqAlarm_level OARadarIqAlarm_level::getValue() const {
    return m_value;
}

void OARadarIqAlarm_level::setValue(const OARadarIqAlarm_level::eOARadarIqAlarm_level& value){
    m_value = value;
    m_value_isSet = true;
}
bool OARadarIqAlarm_level::isSet() const {
    
    return m_value_isSet;
}

bool OARadarIqAlarm_level::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OARadarIq
