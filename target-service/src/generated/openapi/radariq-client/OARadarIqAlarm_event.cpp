/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqAlarm_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqAlarm_event::OARadarIqAlarm_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqAlarm_event::OARadarIqAlarm_event() {
    this->initializeModel();
}

OARadarIqAlarm_event::~OARadarIqAlarm_event() {}

void OARadarIqAlarm_event::initializeModel() {

    m_current_level_isSet = false;
    m_current_level_isValid = false;

    m_previous_level_isSet = false;
    m_previous_level_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_priority_score_isSet = false;
    m_priority_score_isValid = false;
}

void OARadarIqAlarm_event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqAlarm_event::fromJsonObject(QJsonObject json) {

    m_current_level_isValid = ::OARadarIq::fromJsonValue(m_current_level, json[QString("current_level")]);
    m_current_level_isSet = !json[QString("current_level")].isNull() && m_current_level_isValid;

    m_previous_level_isValid = ::OARadarIq::fromJsonValue(m_previous_level, json[QString("previous_level")]);
    m_previous_level_isSet = !json[QString("previous_level")].isNull() && m_previous_level_isValid;

    m_timestamp_isValid = ::OARadarIq::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_priority_score_isValid = ::OARadarIq::fromJsonValue(m_priority_score, json[QString("priority_score")]);
    m_priority_score_isSet = !json[QString("priority_score")].isNull() && m_priority_score_isValid;
}

QString OARadarIqAlarm_event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqAlarm_event::asJsonObject() const {
    QJsonObject obj;
    if (m_current_level.isSet()) {
        obj.insert(QString("current_level"), ::OARadarIq::toJsonValue(m_current_level));
    }
    if (m_previous_level.isSet()) {
        obj.insert(QString("previous_level"), ::OARadarIq::toJsonValue(m_previous_level));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OARadarIq::toJsonValue(m_timestamp));
    }
    if (m_priority_score_isSet) {
        obj.insert(QString("priority_score"), ::OARadarIq::toJsonValue(m_priority_score));
    }
    return obj;
}

OARadarIqAlarm_level OARadarIqAlarm_event::getCurrentLevel() const {
    return m_current_level;
}
void OARadarIqAlarm_event::setCurrentLevel(const OARadarIqAlarm_level &current_level) {
    m_current_level = current_level;
    m_current_level_isSet = true;
}

bool OARadarIqAlarm_event::is_current_level_Set() const{
    return m_current_level_isSet;
}

bool OARadarIqAlarm_event::is_current_level_Valid() const{
    return m_current_level_isValid;
}

OARadarIqAlarm_level OARadarIqAlarm_event::getPreviousLevel() const {
    return m_previous_level;
}
void OARadarIqAlarm_event::setPreviousLevel(const OARadarIqAlarm_level &previous_level) {
    m_previous_level = previous_level;
    m_previous_level_isSet = true;
}

bool OARadarIqAlarm_event::is_previous_level_Set() const{
    return m_previous_level_isSet;
}

bool OARadarIqAlarm_event::is_previous_level_Valid() const{
    return m_previous_level_isValid;
}

QString OARadarIqAlarm_event::getTimestamp() const {
    return m_timestamp;
}
void OARadarIqAlarm_event::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OARadarIqAlarm_event::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OARadarIqAlarm_event::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

double OARadarIqAlarm_event::getPriorityScore() const {
    return m_priority_score;
}
void OARadarIqAlarm_event::setPriorityScore(const double &priority_score) {
    m_priority_score = priority_score;
    m_priority_score_isSet = true;
}

bool OARadarIqAlarm_event::is_priority_score_Set() const{
    return m_priority_score_isSet;
}

bool OARadarIqAlarm_event::is_priority_score_Valid() const{
    return m_priority_score_isValid;
}

bool OARadarIqAlarm_event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqAlarm_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_level_isValid && m_previous_level_isValid && m_timestamp_isValid && m_priority_score_isValid && true;
}

} // namespace OARadarIq
