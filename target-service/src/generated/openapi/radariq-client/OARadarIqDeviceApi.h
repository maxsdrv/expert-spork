/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OARadarIq_OARadarIqDeviceApi_H
#define OARadarIq_OARadarIqDeviceApi_H

#include "OARadarIqHelpers.h"
#include "OARadarIqHttpRequest.h"
#include "OARadarIqServerConfiguration.h"
#include "OARadarIqOauth.h"

#include "OARadarIqAlarm_settings.h"
#include "OARadarIqClassifier_params.h"
#include "OARadarIqDevice_id.h"
#include "OARadarIqObject.h"
#include "OARadarIqService_settings.h"
#include "OARadarIqUnit_info_list.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OARadarIq {

class OARadarIqDeviceApi : public QObject {
    Q_OBJECT

public:
    OARadarIqDeviceApi(const int timeOut = 0);
    ~OARadarIqDeviceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OARadarIqServerVariable> &variables = QMap<QString, OARadarIqServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OARadarIqServerVariable> &variables =  QMap<QString, OARadarIqServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OARadarIqServerVariable> &variables =  QMap<QString, OARadarIqServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    void getDeviceId();


    void getServiceSettings();


    void getUnitInfoList();

    /**
    * @param[in]  body OARadarIqAlarm_settings [required]
    */
    void setDeviceAlarmSettings(const OARadarIqAlarm_settings &body);

    /**
    * @param[in]  body OARadarIqClassifier_params [required]
    */
    void setDeviceClassifier(const OARadarIqClassifier_params &body);


    void setupBlankZones();

    /**
    * @param[in]  body OARadarIqObject [optional]
    */
    void switchDeviceOff(const ::OARadarIq::OptionalParam<OARadarIqObject> &body = ::OARadarIq::OptionalParam<OARadarIqObject>());

    /**
    * @param[in]  body OARadarIqObject [optional]
    */
    void switchDeviceOn(const ::OARadarIq::OptionalParam<OARadarIqObject> &body = ::OARadarIq::OptionalParam<OARadarIqObject>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OARadarIqServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OARadarIqHttpRequestInput _latestInput;
    OARadarIqHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDeviceIdCallback(OARadarIqHttpRequestWorker *worker);
    void getServiceSettingsCallback(OARadarIqHttpRequestWorker *worker);
    void getUnitInfoListCallback(OARadarIqHttpRequestWorker *worker);
    void setDeviceAlarmSettingsCallback(OARadarIqHttpRequestWorker *worker);
    void setDeviceClassifierCallback(OARadarIqHttpRequestWorker *worker);
    void setupBlankZonesCallback(OARadarIqHttpRequestWorker *worker);
    void switchDeviceOffCallback(OARadarIqHttpRequestWorker *worker);
    void switchDeviceOnCallback(OARadarIqHttpRequestWorker *worker);

Q_SIGNALS:

    void getDeviceIdSignal(OARadarIqDevice_id summary);
    void getServiceSettingsSignal(OARadarIqService_settings summary);
    void getUnitInfoListSignal(OARadarIqUnit_info_list summary);
    void setDeviceAlarmSettingsSignal();
    void setDeviceClassifierSignal();
    void setupBlankZonesSignal();
    void switchDeviceOffSignal();
    void switchDeviceOnSignal();

    void getDeviceIdSignalFull(OARadarIqHttpRequestWorker *worker, OARadarIqDevice_id summary);
    void getServiceSettingsSignalFull(OARadarIqHttpRequestWorker *worker, OARadarIqService_settings summary);
    void getUnitInfoListSignalFull(OARadarIqHttpRequestWorker *worker, OARadarIqUnit_info_list summary);
    void setDeviceAlarmSettingsSignalFull(OARadarIqHttpRequestWorker *worker);
    void setDeviceClassifierSignalFull(OARadarIqHttpRequestWorker *worker);
    void setupBlankZonesSignalFull(OARadarIqHttpRequestWorker *worker);
    void switchDeviceOffSignalFull(OARadarIqHttpRequestWorker *worker);
    void switchDeviceOnSignalFull(OARadarIqHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getDeviceIdSignalError() instead")
    void getDeviceIdSignalE(OARadarIqDevice_id summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceIdSignalError(OARadarIqDevice_id summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceSettingsSignalError() instead")
    void getServiceSettingsSignalE(OARadarIqService_settings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceSettingsSignalError(OARadarIqService_settings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUnitInfoListSignalError() instead")
    void getUnitInfoListSignalE(OARadarIqUnit_info_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUnitInfoListSignalError(OARadarIqUnit_info_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDeviceAlarmSettingsSignalError() instead")
    void setDeviceAlarmSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setDeviceAlarmSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDeviceClassifierSignalError() instead")
    void setDeviceClassifierSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setDeviceClassifierSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupBlankZonesSignalError() instead")
    void setupBlankZonesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setupBlankZonesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use switchDeviceOffSignalError() instead")
    void switchDeviceOffSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void switchDeviceOffSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use switchDeviceOnSignalError() instead")
    void switchDeviceOnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void switchDeviceOnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDeviceIdSignalErrorFull() instead")
    void getDeviceIdSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceIdSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceSettingsSignalErrorFull() instead")
    void getServiceSettingsSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceSettingsSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUnitInfoListSignalErrorFull() instead")
    void getUnitInfoListSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUnitInfoListSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDeviceAlarmSettingsSignalErrorFull() instead")
    void setDeviceAlarmSettingsSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setDeviceAlarmSettingsSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setDeviceClassifierSignalErrorFull() instead")
    void setDeviceClassifierSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setDeviceClassifierSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setupBlankZonesSignalErrorFull() instead")
    void setupBlankZonesSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setupBlankZonesSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use switchDeviceOffSignalErrorFull() instead")
    void switchDeviceOffSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void switchDeviceOffSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use switchDeviceOnSignalErrorFull() instead")
    void switchDeviceOnSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void switchDeviceOnSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OARadarIq
#endif
