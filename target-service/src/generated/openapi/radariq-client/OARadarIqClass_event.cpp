/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqClass_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqClass_event::OARadarIqClass_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqClass_event::OARadarIqClass_event() {
    this->initializeModel();
}

OARadarIqClass_event::~OARadarIqClass_event() {}

void OARadarIqClass_event::initializeModel() {

    m_object_class_isSet = false;
    m_object_class_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_unit_type_isSet = false;
    m_unit_type_isValid = false;
}

void OARadarIqClass_event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqClass_event::fromJsonObject(QJsonObject json) {

    m_object_class_isValid = ::OARadarIq::fromJsonValue(m_object_class, json[QString("object_class")]);
    m_object_class_isSet = !json[QString("object_class")].isNull() && m_object_class_isValid;

    m_timestamp_isValid = ::OARadarIq::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_unit_type_isValid = ::OARadarIq::fromJsonValue(m_unit_type, json[QString("unit_type")]);
    m_unit_type_isSet = !json[QString("unit_type")].isNull() && m_unit_type_isValid;
}

QString OARadarIqClass_event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqClass_event::asJsonObject() const {
    QJsonObject obj;
    if (m_object_class.isSet()) {
        obj.insert(QString("object_class"), ::OARadarIq::toJsonValue(m_object_class));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OARadarIq::toJsonValue(m_timestamp));
    }
    if (m_unit_type_isSet) {
        obj.insert(QString("unit_type"), ::OARadarIq::toJsonValue(m_unit_type));
    }
    return obj;
}

OARadarIqObject_class OARadarIqClass_event::getObjectClass() const {
    return m_object_class;
}
void OARadarIqClass_event::setObjectClass(const OARadarIqObject_class &object_class) {
    m_object_class = object_class;
    m_object_class_isSet = true;
}

bool OARadarIqClass_event::is_object_class_Set() const{
    return m_object_class_isSet;
}

bool OARadarIqClass_event::is_object_class_Valid() const{
    return m_object_class_isValid;
}

QDateTime OARadarIqClass_event::getTimestamp() const {
    return m_timestamp;
}
void OARadarIqClass_event::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OARadarIqClass_event::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OARadarIqClass_event::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OARadarIqClass_event::getUnitType() const {
    return m_unit_type;
}
void OARadarIqClass_event::setUnitType(const QString &unit_type) {
    m_unit_type = unit_type;
    m_unit_type_isSet = true;
}

bool OARadarIqClass_event::is_unit_type_Set() const{
    return m_unit_type_isSet;
}

bool OARadarIqClass_event::is_unit_type_Valid() const{
    return m_unit_type_isValid;
}

bool OARadarIqClass_event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqClass_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_class_isValid && m_timestamp_isValid && m_unit_type_isValid && true;
}

} // namespace OARadarIq
