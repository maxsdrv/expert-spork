/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqZone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqZone::OARadarIqZone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqZone::OARadarIqZone() {
    this->initializeModel();
}

OARadarIqZone::~OARadarIqZone() {}

void OARadarIqZone::initializeModel() {

    m_altitude_blank_isSet = false;
    m_altitude_blank_isValid = false;

    m_altitude_threshold_isSet = false;
    m_altitude_threshold_isValid = false;

    m_azimuth_max_isSet = false;
    m_azimuth_max_isValid = false;

    m_azimuth_min_isSet = false;
    m_azimuth_min_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_radius_max_isSet = false;
    m_radius_max_isValid = false;

    m_radius_min_isSet = false;
    m_radius_min_isValid = false;
}

void OARadarIqZone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqZone::fromJsonObject(QJsonObject json) {

    m_altitude_blank_isValid = ::OARadarIq::fromJsonValue(m_altitude_blank, json[QString("altitudeBlank")]);
    m_altitude_blank_isSet = !json[QString("altitudeBlank")].isNull() && m_altitude_blank_isValid;

    m_altitude_threshold_isValid = ::OARadarIq::fromJsonValue(m_altitude_threshold, json[QString("altitudeThreshold")]);
    m_altitude_threshold_isSet = !json[QString("altitudeThreshold")].isNull() && m_altitude_threshold_isValid;

    m_azimuth_max_isValid = ::OARadarIq::fromJsonValue(m_azimuth_max, json[QString("azimuthMax")]);
    m_azimuth_max_isSet = !json[QString("azimuthMax")].isNull() && m_azimuth_max_isValid;

    m_azimuth_min_isValid = ::OARadarIq::fromJsonValue(m_azimuth_min, json[QString("azimuthMin")]);
    m_azimuth_min_isSet = !json[QString("azimuthMin")].isNull() && m_azimuth_min_isValid;

    m_enabled_isValid = ::OARadarIq::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_radius_max_isValid = ::OARadarIq::fromJsonValue(m_radius_max, json[QString("radiusMax")]);
    m_radius_max_isSet = !json[QString("radiusMax")].isNull() && m_radius_max_isValid;

    m_radius_min_isValid = ::OARadarIq::fromJsonValue(m_radius_min, json[QString("radiusMin")]);
    m_radius_min_isSet = !json[QString("radiusMin")].isNull() && m_radius_min_isValid;
}

QString OARadarIqZone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqZone::asJsonObject() const {
    QJsonObject obj;
    if (m_altitude_blank_isSet) {
        obj.insert(QString("altitudeBlank"), ::OARadarIq::toJsonValue(m_altitude_blank));
    }
    if (m_altitude_threshold_isSet) {
        obj.insert(QString("altitudeThreshold"), ::OARadarIq::toJsonValue(m_altitude_threshold));
    }
    if (m_azimuth_max_isSet) {
        obj.insert(QString("azimuthMax"), ::OARadarIq::toJsonValue(m_azimuth_max));
    }
    if (m_azimuth_min_isSet) {
        obj.insert(QString("azimuthMin"), ::OARadarIq::toJsonValue(m_azimuth_min));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OARadarIq::toJsonValue(m_enabled));
    }
    if (m_radius_max_isSet) {
        obj.insert(QString("radiusMax"), ::OARadarIq::toJsonValue(m_radius_max));
    }
    if (m_radius_min_isSet) {
        obj.insert(QString("radiusMin"), ::OARadarIq::toJsonValue(m_radius_min));
    }
    return obj;
}

double OARadarIqZone::getAltitudeBlank() const {
    return m_altitude_blank;
}
void OARadarIqZone::setAltitudeBlank(const double &altitude_blank) {
    m_altitude_blank = altitude_blank;
    m_altitude_blank_isSet = true;
}

bool OARadarIqZone::is_altitude_blank_Set() const{
    return m_altitude_blank_isSet;
}

bool OARadarIqZone::is_altitude_blank_Valid() const{
    return m_altitude_blank_isValid;
}

double OARadarIqZone::getAltitudeThreshold() const {
    return m_altitude_threshold;
}
void OARadarIqZone::setAltitudeThreshold(const double &altitude_threshold) {
    m_altitude_threshold = altitude_threshold;
    m_altitude_threshold_isSet = true;
}

bool OARadarIqZone::is_altitude_threshold_Set() const{
    return m_altitude_threshold_isSet;
}

bool OARadarIqZone::is_altitude_threshold_Valid() const{
    return m_altitude_threshold_isValid;
}

double OARadarIqZone::getAzimuthMax() const {
    return m_azimuth_max;
}
void OARadarIqZone::setAzimuthMax(const double &azimuth_max) {
    m_azimuth_max = azimuth_max;
    m_azimuth_max_isSet = true;
}

bool OARadarIqZone::is_azimuth_max_Set() const{
    return m_azimuth_max_isSet;
}

bool OARadarIqZone::is_azimuth_max_Valid() const{
    return m_azimuth_max_isValid;
}

double OARadarIqZone::getAzimuthMin() const {
    return m_azimuth_min;
}
void OARadarIqZone::setAzimuthMin(const double &azimuth_min) {
    m_azimuth_min = azimuth_min;
    m_azimuth_min_isSet = true;
}

bool OARadarIqZone::is_azimuth_min_Set() const{
    return m_azimuth_min_isSet;
}

bool OARadarIqZone::is_azimuth_min_Valid() const{
    return m_azimuth_min_isValid;
}

bool OARadarIqZone::isEnabled() const {
    return m_enabled;
}
void OARadarIqZone::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OARadarIqZone::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OARadarIqZone::is_enabled_Valid() const{
    return m_enabled_isValid;
}

double OARadarIqZone::getRadiusMax() const {
    return m_radius_max;
}
void OARadarIqZone::setRadiusMax(const double &radius_max) {
    m_radius_max = radius_max;
    m_radius_max_isSet = true;
}

bool OARadarIqZone::is_radius_max_Set() const{
    return m_radius_max_isSet;
}

bool OARadarIqZone::is_radius_max_Valid() const{
    return m_radius_max_isValid;
}

double OARadarIqZone::getRadiusMin() const {
    return m_radius_min;
}
void OARadarIqZone::setRadiusMin(const double &radius_min) {
    m_radius_min = radius_min;
    m_radius_min_isSet = true;
}

bool OARadarIqZone::is_radius_min_Set() const{
    return m_radius_min_isSet;
}

bool OARadarIqZone::is_radius_min_Valid() const{
    return m_radius_min_isValid;
}

bool OARadarIqZone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_altitude_blank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_altitude_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azimuth_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azimuth_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_min_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqZone::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_altitude_blank_isValid && m_altitude_threshold_isValid && m_azimuth_max_isValid && m_azimuth_min_isValid && m_enabled_isValid && m_radius_max_isValid && m_radius_min_isValid && true;
}

} // namespace OARadarIq
