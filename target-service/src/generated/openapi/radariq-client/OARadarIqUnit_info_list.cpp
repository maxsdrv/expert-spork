/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqUnit_info_list.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqUnit_info_list::OARadarIqUnit_info_list(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqUnit_info_list::OARadarIqUnit_info_list() {
    this->initializeModel();
}

OARadarIqUnit_info_list::~OARadarIqUnit_info_list() {}

void OARadarIqUnit_info_list::initializeModel() {

    m_info_isSet = false;
    m_info_isValid = false;
}

void OARadarIqUnit_info_list::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqUnit_info_list::fromJsonObject(QJsonObject json) {

    m_info_isValid = ::OARadarIq::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;
}

QString OARadarIqUnit_info_list::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqUnit_info_list::asJsonObject() const {
    QJsonObject obj;
    if (m_info.size() > 0) {
        obj.insert(QString("info"), ::OARadarIq::toJsonValue(m_info));
    }
    return obj;
}

QList<OARadarIqUnit_info> OARadarIqUnit_info_list::getInfo() const {
    return m_info;
}
void OARadarIqUnit_info_list::setInfo(const QList<OARadarIqUnit_info> &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OARadarIqUnit_info_list::is_info_Set() const{
    return m_info_isSet;
}

bool OARadarIqUnit_info_list::is_info_Valid() const{
    return m_info_isValid;
}

bool OARadarIqUnit_info_list::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqUnit_info_list::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_info_isValid && true;
}

} // namespace OARadarIq
