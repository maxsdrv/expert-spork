/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqCamera_settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqCamera_settings::OARadarIqCamera_settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqCamera_settings::OARadarIqCamera_settings() {
    this->initializeModel();
}

OARadarIqCamera_settings::~OARadarIqCamera_settings() {}

void OARadarIqCamera_settings::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_connection_on_isSet = false;
    m_connection_on_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_streams_isSet = false;
    m_streams_isValid = false;
}

void OARadarIqCamera_settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqCamera_settings::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OARadarIq::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_connection_on_isValid = ::OARadarIq::fromJsonValue(m_connection_on, json[QString("connection_on")]);
    m_connection_on_isSet = !json[QString("connection_on")].isNull() && m_connection_on_isValid;

    m_id_isValid = ::OARadarIq::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_model_isValid = ::OARadarIq::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_position_isValid = ::OARadarIq::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_streams_isValid = ::OARadarIq::fromJsonValue(m_streams, json[QString("streams")]);
    m_streams_isSet = !json[QString("streams")].isNull() && m_streams_isValid;
}

QString OARadarIqCamera_settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqCamera_settings::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OARadarIq::toJsonValue(m_address));
    }
    if (m_connection_on_isSet) {
        obj.insert(QString("connection_on"), ::OARadarIq::toJsonValue(m_connection_on));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OARadarIq::toJsonValue(m_id));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OARadarIq::toJsonValue(m_model));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OARadarIq::toJsonValue(m_position));
    }
    if (m_streams.size() > 0) {
        obj.insert(QString("streams"), ::OARadarIq::toJsonValue(m_streams));
    }
    return obj;
}

OARadarIqNetwork_address OARadarIqCamera_settings::getAddress() const {
    return m_address;
}
void OARadarIqCamera_settings::setAddress(const OARadarIqNetwork_address &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OARadarIqCamera_settings::is_address_Set() const{
    return m_address_isSet;
}

bool OARadarIqCamera_settings::is_address_Valid() const{
    return m_address_isValid;
}

bool OARadarIqCamera_settings::isConnectionOn() const {
    return m_connection_on;
}
void OARadarIqCamera_settings::setConnectionOn(const bool &connection_on) {
    m_connection_on = connection_on;
    m_connection_on_isSet = true;
}

bool OARadarIqCamera_settings::is_connection_on_Set() const{
    return m_connection_on_isSet;
}

bool OARadarIqCamera_settings::is_connection_on_Valid() const{
    return m_connection_on_isValid;
}

QString OARadarIqCamera_settings::getId() const {
    return m_id;
}
void OARadarIqCamera_settings::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OARadarIqCamera_settings::is_id_Set() const{
    return m_id_isSet;
}

bool OARadarIqCamera_settings::is_id_Valid() const{
    return m_id_isValid;
}

QString OARadarIqCamera_settings::getModel() const {
    return m_model;
}
void OARadarIqCamera_settings::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OARadarIqCamera_settings::is_model_Set() const{
    return m_model_isSet;
}

bool OARadarIqCamera_settings::is_model_Valid() const{
    return m_model_isValid;
}

OARadarIqGeo_position OARadarIqCamera_settings::getPosition() const {
    return m_position;
}
void OARadarIqCamera_settings::setPosition(const OARadarIqGeo_position &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OARadarIqCamera_settings::is_position_Set() const{
    return m_position_isSet;
}

bool OARadarIqCamera_settings::is_position_Valid() const{
    return m_position_isValid;
}

QList<QJsonValue> OARadarIqCamera_settings::getStreams() const {
    return m_streams;
}
void OARadarIqCamera_settings::setStreams(const QList<QJsonValue> &streams) {
    m_streams = streams;
    m_streams_isSet = true;
}

bool OARadarIqCamera_settings::is_streams_Set() const{
    return m_streams_isSet;
}

bool OARadarIqCamera_settings::is_streams_Valid() const{
    return m_streams_isValid;
}

bool OARadarIqCamera_settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_streams.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqCamera_settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_connection_on_isValid && m_id_isValid && m_model_isValid && m_position_isValid && m_streams_isValid && true;
}

} // namespace OARadarIq
