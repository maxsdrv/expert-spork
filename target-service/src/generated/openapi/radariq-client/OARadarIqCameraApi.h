/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OARadarIq_OARadarIqCameraApi_H
#define OARadarIq_OARadarIqCameraApi_H

#include "OARadarIqHelpers.h"
#include "OARadarIqHttpRequest.h"
#include "OARadarIqServerConfiguration.h"
#include "OARadarIqOauth.h"

#include "OARadarIqAbsolute_move.h"
#include "OARadarIqAddress_value.h"
#include "OARadarIqBool_connected.h"
#include "OARadarIqBool_data.h"
#include "OARadarIqCamera_focus_relative_move.h"
#include "OARadarIqCamera_speed.h"
#include "OARadarIqCamera_speed_coord.h"
#include "OARadarIqConnection_state_data.h"
#include "OARadarIqGeo_move_request.h"
#include "OARadarIqGet_address_200_response.h"
#include "OARadarIqGet_camera_orientation_200_response.h"
#include "OARadarIqGet_control_mode_200_response.h"
#include "OARadarIqRelative_move.h"
#include "OARadarIqSet_control_mode_request.h"
#include "OARadarIqTrack_index.h"
#include "OARadarIqTrack_object_id.h"
#include "OARadarIqTracks_list.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OARadarIq {

class OARadarIqCameraApi : public QObject {
    Q_OBJECT

public:
    OARadarIqCameraApi(const int timeOut = 0);
    ~OARadarIqCameraApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OARadarIqServerVariable> &variables = QMap<QString, OARadarIqServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OARadarIqServerVariable> &variables =  QMap<QString, OARadarIqServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OARadarIqServerVariable> &variables =  QMap<QString, OARadarIqServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OARadarIqAbsolute_move [required]
    */
    void absoluteMove(const OARadarIqAbsolute_move &body);


    void cameraCalibration();


    void cameraSaveConfigs();

    /**
    * @param[in]  body OARadarIqCamera_speed_coord [required]
    */
    void continuousMove(const OARadarIqCamera_speed_coord &body);

    /**
    * @param[in]  body OARadarIqCamera_focus_relative_move [optional]
    */
    void focusRelativeMove(const ::OARadarIq::OptionalParam<OARadarIqCamera_focus_relative_move> &body = ::OARadarIq::OptionalParam<OARadarIqCamera_focus_relative_move>());


    void focusReset();

    /**
    * @param[in]  body OARadarIqGeo_move_request [required]
    */
    void geoMove(const OARadarIqGeo_move_request &body);


    void getAddress();


    void getAlarmSettings();


    void getCameraConnectionState();


    void getCameraOrientation();


    void getCameraParams();


    void getCameraTracks();


    void getCameraTryToConnect();


    void getConfig_types();


    void getControlMode();


    void getCurrentTrack();


    void getGroundFilters();


    void getRadarFilters();

    /**
    * @param[in]  body OARadarIqCamera_speed [required]
    */
    void moveDown(const OARadarIqCamera_speed &body);

    /**
    * @param[in]  body OARadarIqCamera_speed [required]
    */
    void moveLeft(const OARadarIqCamera_speed &body);

    /**
    * @param[in]  body OARadarIqCamera_speed [required]
    */
    void moveRight(const OARadarIqCamera_speed &body);

    /**
    * @param[in]  body OARadarIqCamera_speed_coord [required]
    */
    void moveTo(const OARadarIqCamera_speed_coord &body);

    /**
    * @param[in]  body OARadarIqCamera_speed [required]
    */
    void moveUp(const OARadarIqCamera_speed &body);

    /**
    * @param[in]  body OARadarIqRelative_move [required]
    */
    void relativeMove(const OARadarIqRelative_move &body);


    void saveFilters();

    /**
    * @param[in]  body OARadarIqAddress_value [required]
    */
    void setAddress(const OARadarIqAddress_value &body);


    void setAlarmSettings();


    void setCameraParams();

    /**
    * @param[in]  body OARadarIqBool_connected [required]
    */
    void setCameraTryToConnect(const OARadarIqBool_connected &body);

    /**
    * @param[in]  body OARadarIqSet_control_mode_request [required]
    */
    void setControlMode(const OARadarIqSet_control_mode_request &body);

    /**
    * @param[in]  body OARadarIqTrack_object_id [required]
    */
    void setCurrentTrack(const OARadarIqTrack_object_id &body);

    /**
    * @param[in]  body OARadarIqTrack_object_id [required]
    */
    void setForcingTrack(const OARadarIqTrack_object_id &body);


    void setGroundFilters();

    /**
    * @param[in]  body OARadarIqTrack_object_id [required]
    */
    void setNextTrack(const OARadarIqTrack_object_id &body);


    void setRadarFilters();


    void setTypesConfig();


    void stopMove();


    void wiper();

    /**
    * @param[in]  body OARadarIqCamera_speed [required]
    */
    void zoomIn(const OARadarIqCamera_speed &body);

    /**
    * @param[in]  body OARadarIqCamera_speed [required]
    */
    void zoomOut(const OARadarIqCamera_speed &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OARadarIqServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OARadarIqHttpRequestInput _latestInput;
    OARadarIqHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void absoluteMoveCallback(OARadarIqHttpRequestWorker *worker);
    void cameraCalibrationCallback(OARadarIqHttpRequestWorker *worker);
    void cameraSaveConfigsCallback(OARadarIqHttpRequestWorker *worker);
    void continuousMoveCallback(OARadarIqHttpRequestWorker *worker);
    void focusRelativeMoveCallback(OARadarIqHttpRequestWorker *worker);
    void focusResetCallback(OARadarIqHttpRequestWorker *worker);
    void geoMoveCallback(OARadarIqHttpRequestWorker *worker);
    void getAddressCallback(OARadarIqHttpRequestWorker *worker);
    void getAlarmSettingsCallback(OARadarIqHttpRequestWorker *worker);
    void getCameraConnectionStateCallback(OARadarIqHttpRequestWorker *worker);
    void getCameraOrientationCallback(OARadarIqHttpRequestWorker *worker);
    void getCameraParamsCallback(OARadarIqHttpRequestWorker *worker);
    void getCameraTracksCallback(OARadarIqHttpRequestWorker *worker);
    void getCameraTryToConnectCallback(OARadarIqHttpRequestWorker *worker);
    void getConfig_typesCallback(OARadarIqHttpRequestWorker *worker);
    void getControlModeCallback(OARadarIqHttpRequestWorker *worker);
    void getCurrentTrackCallback(OARadarIqHttpRequestWorker *worker);
    void getGroundFiltersCallback(OARadarIqHttpRequestWorker *worker);
    void getRadarFiltersCallback(OARadarIqHttpRequestWorker *worker);
    void moveDownCallback(OARadarIqHttpRequestWorker *worker);
    void moveLeftCallback(OARadarIqHttpRequestWorker *worker);
    void moveRightCallback(OARadarIqHttpRequestWorker *worker);
    void moveToCallback(OARadarIqHttpRequestWorker *worker);
    void moveUpCallback(OARadarIqHttpRequestWorker *worker);
    void relativeMoveCallback(OARadarIqHttpRequestWorker *worker);
    void saveFiltersCallback(OARadarIqHttpRequestWorker *worker);
    void setAddressCallback(OARadarIqHttpRequestWorker *worker);
    void setAlarmSettingsCallback(OARadarIqHttpRequestWorker *worker);
    void setCameraParamsCallback(OARadarIqHttpRequestWorker *worker);
    void setCameraTryToConnectCallback(OARadarIqHttpRequestWorker *worker);
    void setControlModeCallback(OARadarIqHttpRequestWorker *worker);
    void setCurrentTrackCallback(OARadarIqHttpRequestWorker *worker);
    void setForcingTrackCallback(OARadarIqHttpRequestWorker *worker);
    void setGroundFiltersCallback(OARadarIqHttpRequestWorker *worker);
    void setNextTrackCallback(OARadarIqHttpRequestWorker *worker);
    void setRadarFiltersCallback(OARadarIqHttpRequestWorker *worker);
    void setTypesConfigCallback(OARadarIqHttpRequestWorker *worker);
    void stopMoveCallback(OARadarIqHttpRequestWorker *worker);
    void wiperCallback(OARadarIqHttpRequestWorker *worker);
    void zoomInCallback(OARadarIqHttpRequestWorker *worker);
    void zoomOutCallback(OARadarIqHttpRequestWorker *worker);

Q_SIGNALS:

    void absoluteMoveSignal();
    void cameraCalibrationSignal();
    void cameraSaveConfigsSignal();
    void continuousMoveSignal();
    void focusRelativeMoveSignal();
    void focusResetSignal();
    void geoMoveSignal();
    void getAddressSignal(OARadarIqGet_address_200_response summary);
    void getAlarmSettingsSignal();
    void getCameraConnectionStateSignal(OARadarIqConnection_state_data summary);
    void getCameraOrientationSignal(OARadarIqGet_camera_orientation_200_response summary);
    void getCameraParamsSignal();
    void getCameraTracksSignal(OARadarIqTracks_list summary);
    void getCameraTryToConnectSignal(OARadarIqBool_data summary);
    void getConfig_typesSignal();
    void getControlModeSignal(OARadarIqGet_control_mode_200_response summary);
    void getCurrentTrackSignal(OARadarIqTrack_index summary);
    void getGroundFiltersSignal();
    void getRadarFiltersSignal();
    void moveDownSignal();
    void moveLeftSignal();
    void moveRightSignal();
    void moveToSignal();
    void moveUpSignal();
    void relativeMoveSignal();
    void saveFiltersSignal();
    void setAddressSignal();
    void setAlarmSettingsSignal();
    void setCameraParamsSignal();
    void setCameraTryToConnectSignal();
    void setControlModeSignal();
    void setCurrentTrackSignal();
    void setForcingTrackSignal();
    void setGroundFiltersSignal();
    void setNextTrackSignal();
    void setRadarFiltersSignal();
    void setTypesConfigSignal();
    void stopMoveSignal();
    void wiperSignal();
    void zoomInSignal();
    void zoomOutSignal();

    void absoluteMoveSignalFull(OARadarIqHttpRequestWorker *worker);
    void cameraCalibrationSignalFull(OARadarIqHttpRequestWorker *worker);
    void cameraSaveConfigsSignalFull(OARadarIqHttpRequestWorker *worker);
    void continuousMoveSignalFull(OARadarIqHttpRequestWorker *worker);
    void focusRelativeMoveSignalFull(OARadarIqHttpRequestWorker *worker);
    void focusResetSignalFull(OARadarIqHttpRequestWorker *worker);
    void geoMoveSignalFull(OARadarIqHttpRequestWorker *worker);
    void getAddressSignalFull(OARadarIqHttpRequestWorker *worker, OARadarIqGet_address_200_response summary);
    void getAlarmSettingsSignalFull(OARadarIqHttpRequestWorker *worker);
    void getCameraConnectionStateSignalFull(OARadarIqHttpRequestWorker *worker, OARadarIqConnection_state_data summary);
    void getCameraOrientationSignalFull(OARadarIqHttpRequestWorker *worker, OARadarIqGet_camera_orientation_200_response summary);
    void getCameraParamsSignalFull(OARadarIqHttpRequestWorker *worker);
    void getCameraTracksSignalFull(OARadarIqHttpRequestWorker *worker, OARadarIqTracks_list summary);
    void getCameraTryToConnectSignalFull(OARadarIqHttpRequestWorker *worker, OARadarIqBool_data summary);
    void getConfig_typesSignalFull(OARadarIqHttpRequestWorker *worker);
    void getControlModeSignalFull(OARadarIqHttpRequestWorker *worker, OARadarIqGet_control_mode_200_response summary);
    void getCurrentTrackSignalFull(OARadarIqHttpRequestWorker *worker, OARadarIqTrack_index summary);
    void getGroundFiltersSignalFull(OARadarIqHttpRequestWorker *worker);
    void getRadarFiltersSignalFull(OARadarIqHttpRequestWorker *worker);
    void moveDownSignalFull(OARadarIqHttpRequestWorker *worker);
    void moveLeftSignalFull(OARadarIqHttpRequestWorker *worker);
    void moveRightSignalFull(OARadarIqHttpRequestWorker *worker);
    void moveToSignalFull(OARadarIqHttpRequestWorker *worker);
    void moveUpSignalFull(OARadarIqHttpRequestWorker *worker);
    void relativeMoveSignalFull(OARadarIqHttpRequestWorker *worker);
    void saveFiltersSignalFull(OARadarIqHttpRequestWorker *worker);
    void setAddressSignalFull(OARadarIqHttpRequestWorker *worker);
    void setAlarmSettingsSignalFull(OARadarIqHttpRequestWorker *worker);
    void setCameraParamsSignalFull(OARadarIqHttpRequestWorker *worker);
    void setCameraTryToConnectSignalFull(OARadarIqHttpRequestWorker *worker);
    void setControlModeSignalFull(OARadarIqHttpRequestWorker *worker);
    void setCurrentTrackSignalFull(OARadarIqHttpRequestWorker *worker);
    void setForcingTrackSignalFull(OARadarIqHttpRequestWorker *worker);
    void setGroundFiltersSignalFull(OARadarIqHttpRequestWorker *worker);
    void setNextTrackSignalFull(OARadarIqHttpRequestWorker *worker);
    void setRadarFiltersSignalFull(OARadarIqHttpRequestWorker *worker);
    void setTypesConfigSignalFull(OARadarIqHttpRequestWorker *worker);
    void stopMoveSignalFull(OARadarIqHttpRequestWorker *worker);
    void wiperSignalFull(OARadarIqHttpRequestWorker *worker);
    void zoomInSignalFull(OARadarIqHttpRequestWorker *worker);
    void zoomOutSignalFull(OARadarIqHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use absoluteMoveSignalError() instead")
    void absoluteMoveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void absoluteMoveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cameraCalibrationSignalError() instead")
    void cameraCalibrationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cameraCalibrationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cameraSaveConfigsSignalError() instead")
    void cameraSaveConfigsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cameraSaveConfigsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use continuousMoveSignalError() instead")
    void continuousMoveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void continuousMoveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use focusRelativeMoveSignalError() instead")
    void focusRelativeMoveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void focusRelativeMoveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use focusResetSignalError() instead")
    void focusResetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void focusResetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geoMoveSignalError() instead")
    void geoMoveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void geoMoveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddressSignalError() instead")
    void getAddressSignalE(OARadarIqGet_address_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressSignalError(OARadarIqGet_address_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlarmSettingsSignalError() instead")
    void getAlarmSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAlarmSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCameraConnectionStateSignalError() instead")
    void getCameraConnectionStateSignalE(OARadarIqConnection_state_data summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCameraConnectionStateSignalError(OARadarIqConnection_state_data summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCameraOrientationSignalError() instead")
    void getCameraOrientationSignalE(OARadarIqGet_camera_orientation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCameraOrientationSignalError(OARadarIqGet_camera_orientation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCameraParamsSignalError() instead")
    void getCameraParamsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getCameraParamsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCameraTracksSignalError() instead")
    void getCameraTracksSignalE(OARadarIqTracks_list summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCameraTracksSignalError(OARadarIqTracks_list summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCameraTryToConnectSignalError() instead")
    void getCameraTryToConnectSignalE(OARadarIqBool_data summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCameraTryToConnectSignalError(OARadarIqBool_data summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfig_typesSignalError() instead")
    void getConfig_typesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getConfig_typesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getControlModeSignalError() instead")
    void getControlModeSignalE(OARadarIqGet_control_mode_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getControlModeSignalError(OARadarIqGet_control_mode_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrentTrackSignalError() instead")
    void getCurrentTrackSignalE(OARadarIqTrack_index summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrentTrackSignalError(OARadarIqTrack_index summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroundFiltersSignalError() instead")
    void getGroundFiltersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getGroundFiltersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRadarFiltersSignalError() instead")
    void getRadarFiltersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRadarFiltersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveDownSignalError() instead")
    void moveDownSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void moveDownSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveLeftSignalError() instead")
    void moveLeftSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void moveLeftSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveRightSignalError() instead")
    void moveRightSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void moveRightSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveToSignalError() instead")
    void moveToSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void moveToSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveUpSignalError() instead")
    void moveUpSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void moveUpSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use relativeMoveSignalError() instead")
    void relativeMoveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void relativeMoveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveFiltersSignalError() instead")
    void saveFiltersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void saveFiltersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setAddressSignalError() instead")
    void setAddressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setAddressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setAlarmSettingsSignalError() instead")
    void setAlarmSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setAlarmSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setCameraParamsSignalError() instead")
    void setCameraParamsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setCameraParamsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setCameraTryToConnectSignalError() instead")
    void setCameraTryToConnectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setCameraTryToConnectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setControlModeSignalError() instead")
    void setControlModeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setControlModeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setCurrentTrackSignalError() instead")
    void setCurrentTrackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setCurrentTrackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setForcingTrackSignalError() instead")
    void setForcingTrackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setForcingTrackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setGroundFiltersSignalError() instead")
    void setGroundFiltersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setGroundFiltersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setNextTrackSignalError() instead")
    void setNextTrackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setNextTrackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarFiltersSignalError() instead")
    void setRadarFiltersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarFiltersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setTypesConfigSignalError() instead")
    void setTypesConfigSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setTypesConfigSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopMoveSignalError() instead")
    void stopMoveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void stopMoveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wiperSignalError() instead")
    void wiperSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void wiperSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use zoomInSignalError() instead")
    void zoomInSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void zoomInSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use zoomOutSignalError() instead")
    void zoomOutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void zoomOutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use absoluteMoveSignalErrorFull() instead")
    void absoluteMoveSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void absoluteMoveSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cameraCalibrationSignalErrorFull() instead")
    void cameraCalibrationSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cameraCalibrationSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cameraSaveConfigsSignalErrorFull() instead")
    void cameraSaveConfigsSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cameraSaveConfigsSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use continuousMoveSignalErrorFull() instead")
    void continuousMoveSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void continuousMoveSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use focusRelativeMoveSignalErrorFull() instead")
    void focusRelativeMoveSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void focusRelativeMoveSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use focusResetSignalErrorFull() instead")
    void focusResetSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void focusResetSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geoMoveSignalErrorFull() instead")
    void geoMoveSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void geoMoveSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddressSignalErrorFull() instead")
    void getAddressSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlarmSettingsSignalErrorFull() instead")
    void getAlarmSettingsSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlarmSettingsSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCameraConnectionStateSignalErrorFull() instead")
    void getCameraConnectionStateSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCameraConnectionStateSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCameraOrientationSignalErrorFull() instead")
    void getCameraOrientationSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCameraOrientationSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCameraParamsSignalErrorFull() instead")
    void getCameraParamsSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCameraParamsSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCameraTracksSignalErrorFull() instead")
    void getCameraTracksSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCameraTracksSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCameraTryToConnectSignalErrorFull() instead")
    void getCameraTryToConnectSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCameraTryToConnectSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfig_typesSignalErrorFull() instead")
    void getConfig_typesSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfig_typesSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getControlModeSignalErrorFull() instead")
    void getControlModeSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getControlModeSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrentTrackSignalErrorFull() instead")
    void getCurrentTrackSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrentTrackSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroundFiltersSignalErrorFull() instead")
    void getGroundFiltersSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroundFiltersSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRadarFiltersSignalErrorFull() instead")
    void getRadarFiltersSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRadarFiltersSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveDownSignalErrorFull() instead")
    void moveDownSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveDownSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveLeftSignalErrorFull() instead")
    void moveLeftSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveLeftSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveRightSignalErrorFull() instead")
    void moveRightSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveRightSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveToSignalErrorFull() instead")
    void moveToSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveToSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveUpSignalErrorFull() instead")
    void moveUpSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveUpSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use relativeMoveSignalErrorFull() instead")
    void relativeMoveSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void relativeMoveSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveFiltersSignalErrorFull() instead")
    void saveFiltersSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveFiltersSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setAddressSignalErrorFull() instead")
    void setAddressSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setAddressSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setAlarmSettingsSignalErrorFull() instead")
    void setAlarmSettingsSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setAlarmSettingsSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setCameraParamsSignalErrorFull() instead")
    void setCameraParamsSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setCameraParamsSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setCameraTryToConnectSignalErrorFull() instead")
    void setCameraTryToConnectSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setCameraTryToConnectSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setControlModeSignalErrorFull() instead")
    void setControlModeSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setControlModeSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setCurrentTrackSignalErrorFull() instead")
    void setCurrentTrackSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setCurrentTrackSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setForcingTrackSignalErrorFull() instead")
    void setForcingTrackSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setForcingTrackSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setGroundFiltersSignalErrorFull() instead")
    void setGroundFiltersSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setGroundFiltersSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setNextTrackSignalErrorFull() instead")
    void setNextTrackSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setNextTrackSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarFiltersSignalErrorFull() instead")
    void setRadarFiltersSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarFiltersSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setTypesConfigSignalErrorFull() instead")
    void setTypesConfigSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setTypesConfigSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopMoveSignalErrorFull() instead")
    void stopMoveSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopMoveSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wiperSignalErrorFull() instead")
    void wiperSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wiperSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use zoomInSignalErrorFull() instead")
    void zoomInSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void zoomInSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use zoomOutSignalErrorFull() instead")
    void zoomOutSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void zoomOutSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OARadarIq
#endif
