/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqAlarm_settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqAlarm_settings::OARadarIqAlarm_settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqAlarm_settings::OARadarIqAlarm_settings() {
    this->initializeModel();
}

OARadarIqAlarm_settings::~OARadarIqAlarm_settings() {}

void OARadarIqAlarm_settings::initializeModel() {

    m_alarm_isSet = false;
    m_alarm_isValid = false;
}

void OARadarIqAlarm_settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqAlarm_settings::fromJsonObject(QJsonObject json) {

    m_alarm_isValid = ::OARadarIq::fromJsonValue(m_alarm, json[QString("alarm")]);
    m_alarm_isSet = !json[QString("alarm")].isNull() && m_alarm_isValid;
}

QString OARadarIqAlarm_settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqAlarm_settings::asJsonObject() const {
    QJsonObject obj;
    if (m_alarm.isSet()) {
        obj.insert(QString("alarm"), ::OARadarIq::toJsonValue(m_alarm));
    }
    return obj;
}

OARadarIqAlarm_settings_alarm OARadarIqAlarm_settings::getAlarm() const {
    return m_alarm;
}
void OARadarIqAlarm_settings::setAlarm(const OARadarIqAlarm_settings_alarm &alarm) {
    m_alarm = alarm;
    m_alarm_isSet = true;
}

bool OARadarIqAlarm_settings::is_alarm_Set() const{
    return m_alarm_isSet;
}

bool OARadarIqAlarm_settings::is_alarm_Valid() const{
    return m_alarm_isValid;
}

bool OARadarIqAlarm_settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alarm.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqAlarm_settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alarm_isValid && true;
}

} // namespace OARadarIq
