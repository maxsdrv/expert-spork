/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqTrack.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqTrack::OARadarIqTrack(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqTrack::OARadarIqTrack() {
    this->initializeModel();
}

OARadarIqTrack::~OARadarIqTrack() {}

void OARadarIqTrack::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_alarm_level_isSet = false;
    m_alarm_level_isValid = false;

    m_object_class_isSet = false;
    m_object_class_isValid = false;

    m_class_events_isSet = false;
    m_class_events_isValid = false;

    m_confirm_mark_isSet = false;
    m_confirm_mark_isValid = false;

    m_points_isSet = false;
    m_points_isValid = false;

    m_priority_score_isSet = false;
    m_priority_score_isValid = false;

    m_alarm_events_isSet = false;
    m_alarm_events_isValid = false;
}

void OARadarIqTrack::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqTrack::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OARadarIq::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_alarm_level_isValid = ::OARadarIq::fromJsonValue(m_alarm_level, json[QString("alarm_level")]);
    m_alarm_level_isSet = !json[QString("alarm_level")].isNull() && m_alarm_level_isValid;

    m_object_class_isValid = ::OARadarIq::fromJsonValue(m_object_class, json[QString("object_class")]);
    m_object_class_isSet = !json[QString("object_class")].isNull() && m_object_class_isValid;

    m_class_events_isValid = ::OARadarIq::fromJsonValue(m_class_events, json[QString("class_events")]);
    m_class_events_isSet = !json[QString("class_events")].isNull() && m_class_events_isValid;

    m_confirm_mark_isValid = ::OARadarIq::fromJsonValue(m_confirm_mark, json[QString("confirm_mark")]);
    m_confirm_mark_isSet = !json[QString("confirm_mark")].isNull() && m_confirm_mark_isValid;

    m_points_isValid = ::OARadarIq::fromJsonValue(m_points, json[QString("points")]);
    m_points_isSet = !json[QString("points")].isNull() && m_points_isValid;

    m_priority_score_isValid = ::OARadarIq::fromJsonValue(m_priority_score, json[QString("priority_score")]);
    m_priority_score_isSet = !json[QString("priority_score")].isNull() && m_priority_score_isValid;

    m_alarm_events_isValid = ::OARadarIq::fromJsonValue(m_alarm_events, json[QString("alarm_events")]);
    m_alarm_events_isSet = !json[QString("alarm_events")].isNull() && m_alarm_events_isValid;
}

QString OARadarIqTrack::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqTrack::asJsonObject() const {
    QJsonObject obj;
    if (m_id.isSet()) {
        obj.insert(QString("id"), ::OARadarIq::toJsonValue(m_id));
    }
    if (m_alarm_level.isSet()) {
        obj.insert(QString("alarm_level"), ::OARadarIq::toJsonValue(m_alarm_level));
    }
    if (m_object_class.isSet()) {
        obj.insert(QString("object_class"), ::OARadarIq::toJsonValue(m_object_class));
    }
    if (m_class_events.size() > 0) {
        obj.insert(QString("class_events"), ::OARadarIq::toJsonValue(m_class_events));
    }
    if (m_confirm_mark.isSet()) {
        obj.insert(QString("confirm_mark"), ::OARadarIq::toJsonValue(m_confirm_mark));
    }
    if (m_points.size() > 0) {
        obj.insert(QString("points"), ::OARadarIq::toJsonValue(m_points));
    }
    if (m_priority_score_isSet) {
        obj.insert(QString("priority_score"), ::OARadarIq::toJsonValue(m_priority_score));
    }
    if (m_alarm_events.size() > 0) {
        obj.insert(QString("alarm_events"), ::OARadarIq::toJsonValue(m_alarm_events));
    }
    return obj;
}

OARadarIqTrack_id OARadarIqTrack::getId() const {
    return m_id;
}
void OARadarIqTrack::setId(const OARadarIqTrack_id &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OARadarIqTrack::is_id_Set() const{
    return m_id_isSet;
}

bool OARadarIqTrack::is_id_Valid() const{
    return m_id_isValid;
}

OARadarIqAlarm_level OARadarIqTrack::getAlarmLevel() const {
    return m_alarm_level;
}
void OARadarIqTrack::setAlarmLevel(const OARadarIqAlarm_level &alarm_level) {
    m_alarm_level = alarm_level;
    m_alarm_level_isSet = true;
}

bool OARadarIqTrack::is_alarm_level_Set() const{
    return m_alarm_level_isSet;
}

bool OARadarIqTrack::is_alarm_level_Valid() const{
    return m_alarm_level_isValid;
}

OARadarIqObject_class OARadarIqTrack::getObjectClass() const {
    return m_object_class;
}
void OARadarIqTrack::setObjectClass(const OARadarIqObject_class &object_class) {
    m_object_class = object_class;
    m_object_class_isSet = true;
}

bool OARadarIqTrack::is_object_class_Set() const{
    return m_object_class_isSet;
}

bool OARadarIqTrack::is_object_class_Valid() const{
    return m_object_class_isValid;
}

QList<OARadarIqClass_event> OARadarIqTrack::getClassEvents() const {
    return m_class_events;
}
void OARadarIqTrack::setClassEvents(const QList<OARadarIqClass_event> &class_events) {
    m_class_events = class_events;
    m_class_events_isSet = true;
}

bool OARadarIqTrack::is_class_events_Set() const{
    return m_class_events_isSet;
}

bool OARadarIqTrack::is_class_events_Valid() const{
    return m_class_events_isValid;
}

OARadarIqConfirm_mark OARadarIqTrack::getConfirmMark() const {
    return m_confirm_mark;
}
void OARadarIqTrack::setConfirmMark(const OARadarIqConfirm_mark &confirm_mark) {
    m_confirm_mark = confirm_mark;
    m_confirm_mark_isSet = true;
}

bool OARadarIqTrack::is_confirm_mark_Set() const{
    return m_confirm_mark_isSet;
}

bool OARadarIqTrack::is_confirm_mark_Valid() const{
    return m_confirm_mark_isValid;
}

QList<OARadarIqTrack_point> OARadarIqTrack::getPoints() const {
    return m_points;
}
void OARadarIqTrack::setPoints(const QList<OARadarIqTrack_point> &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OARadarIqTrack::is_points_Set() const{
    return m_points_isSet;
}

bool OARadarIqTrack::is_points_Valid() const{
    return m_points_isValid;
}

double OARadarIqTrack::getPriorityScore() const {
    return m_priority_score;
}
void OARadarIqTrack::setPriorityScore(const double &priority_score) {
    m_priority_score = priority_score;
    m_priority_score_isSet = true;
}

bool OARadarIqTrack::is_priority_score_Set() const{
    return m_priority_score_isSet;
}

bool OARadarIqTrack::is_priority_score_Valid() const{
    return m_priority_score_isValid;
}

QList<OARadarIqAlarm_event> OARadarIqTrack::getAlarmEvents() const {
    return m_alarm_events;
}
void OARadarIqTrack::setAlarmEvents(const QList<OARadarIqAlarm_event> &alarm_events) {
    m_alarm_events = alarm_events;
    m_alarm_events_isSet = true;
}

bool OARadarIqTrack::is_alarm_events_Set() const{
    return m_alarm_events_isSet;
}

bool OARadarIqTrack::is_alarm_events_Valid() const{
    return m_alarm_events_isValid;
}

bool OARadarIqTrack::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirm_mark.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqTrack::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_alarm_level_isValid && m_object_class_isValid && m_class_events_isValid && m_confirm_mark_isValid && m_points_isValid && m_priority_score_isValid && m_alarm_events_isValid && true;
}

} // namespace OARadarIq
