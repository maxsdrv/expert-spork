/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OARadarIq_OARadarIqRadarApi_H
#define OARadarIq_OARadarIqRadarApi_H

#include "OARadarIqHelpers.h"
#include "OARadarIqHttpRequest.h"
#include "OARadarIqServerConfiguration.h"
#include "OARadarIqOauth.h"

#include "OARadarIqBool_connected.h"
#include "OARadarIqBool_data.h"
#include "OARadarIqBool_enabled.h"
#include "OARadarIqConnection_state_data.h"
#include "OARadarIqFrequency_value.h"
#include "OARadarIqGeo_position.h"
#include "OARadarIqGet_radar_telemetry_200_response.h"
#include "OARadarIqInteger_value.h"
#include "OARadarIqPlayer_command.h"
#include "OARadarIqRadar_settings.h"
#include "OARadarIqSensitivity_value.h"
#include "OARadarIqThreshold_control_value.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OARadarIq {

class OARadarIqRadarApi : public QObject {
    Q_OBJECT

public:
    OARadarIqRadarApi(const int timeOut = 0);
    ~OARadarIqRadarApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OARadarIqServerVariable> &variables = QMap<QString, OARadarIqServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OARadarIqServerVariable> &variables =  QMap<QString, OARadarIqServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OARadarIqServerVariable> &variables =  QMap<QString, OARadarIqServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    void checkMonitoringMode();


    void getPlayerSources();


    void getRadarConnectionState();


    void getRadarSettings();


    void getRadarTelemetry();


    void getRadarTryToConnect();

    /**
    * @param[in]  body OARadarIqPlayer_command [required]
    */
    void radarControlPlayer(const OARadarIqPlayer_command &body);

    /**
    * @param[in]  body OARadarIqBool_enabled [required]
    */
    void setPlayerRepeatEnabled(const OARadarIqBool_enabled &body);


    void setPlayerSource();

    /**
    * @param[in]  body OARadarIqInteger_value [required]
    */
    void setRadarAmplitudeThreshold(const OARadarIqInteger_value &body);

    /**
    * @param[in]  body OARadarIqInteger_value [required]
    */
    void setRadarExtrapolTime(const OARadarIqInteger_value &body);

    /**
    * @param[in]  body OARadarIqFrequency_value [required]
    */
    void setRadarFrequency(const OARadarIqFrequency_value &body);

    /**
    * @param[in]  body OARadarIqGeo_position [required]
    */
    void setRadarPosition(const OARadarIqGeo_position &body);

    /**
    * @param[in]  body OARadarIqBool_enabled [required]
    */
    void setRadarPowerOn(const OARadarIqBool_enabled &body);

    /**
    * @param[in]  body OARadarIqBool_enabled [required]
    */
    void setRadarScanning(const OARadarIqBool_enabled &body);

    /**
    * @param[in]  body OARadarIqSensitivity_value [required]
    */
    void setRadarSensitivity(const OARadarIqSensitivity_value &body);

    /**
    * @param[in]  body OARadarIqThreshold_control_value [required]
    */
    void setRadarThresholdControl(const OARadarIqThreshold_control_value &body);

    /**
    * @param[in]  body OARadarIqBool_connected [required]
    */
    void setRadarTryToConnect(const OARadarIqBool_connected &body);

    /**
    * @param[in]  body OARadarIqInteger_value [required]
    */
    void setRadarVelocityThreshold(const OARadarIqInteger_value &body);


    void setRadarWorkzone();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OARadarIqServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OARadarIqHttpRequestInput _latestInput;
    OARadarIqHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void checkMonitoringModeCallback(OARadarIqHttpRequestWorker *worker);
    void getPlayerSourcesCallback(OARadarIqHttpRequestWorker *worker);
    void getRadarConnectionStateCallback(OARadarIqHttpRequestWorker *worker);
    void getRadarSettingsCallback(OARadarIqHttpRequestWorker *worker);
    void getRadarTelemetryCallback(OARadarIqHttpRequestWorker *worker);
    void getRadarTryToConnectCallback(OARadarIqHttpRequestWorker *worker);
    void radarControlPlayerCallback(OARadarIqHttpRequestWorker *worker);
    void setPlayerRepeatEnabledCallback(OARadarIqHttpRequestWorker *worker);
    void setPlayerSourceCallback(OARadarIqHttpRequestWorker *worker);
    void setRadarAmplitudeThresholdCallback(OARadarIqHttpRequestWorker *worker);
    void setRadarExtrapolTimeCallback(OARadarIqHttpRequestWorker *worker);
    void setRadarFrequencyCallback(OARadarIqHttpRequestWorker *worker);
    void setRadarPositionCallback(OARadarIqHttpRequestWorker *worker);
    void setRadarPowerOnCallback(OARadarIqHttpRequestWorker *worker);
    void setRadarScanningCallback(OARadarIqHttpRequestWorker *worker);
    void setRadarSensitivityCallback(OARadarIqHttpRequestWorker *worker);
    void setRadarThresholdControlCallback(OARadarIqHttpRequestWorker *worker);
    void setRadarTryToConnectCallback(OARadarIqHttpRequestWorker *worker);
    void setRadarVelocityThresholdCallback(OARadarIqHttpRequestWorker *worker);
    void setRadarWorkzoneCallback(OARadarIqHttpRequestWorker *worker);

Q_SIGNALS:

    void checkMonitoringModeSignal(OARadarIqBool_data summary);
    void getPlayerSourcesSignal();
    void getRadarConnectionStateSignal(OARadarIqConnection_state_data summary);
    void getRadarSettingsSignal(OARadarIqRadar_settings summary);
    void getRadarTelemetrySignal(OARadarIqGet_radar_telemetry_200_response summary);
    void getRadarTryToConnectSignal(OARadarIqBool_data summary);
    void radarControlPlayerSignal();
    void setPlayerRepeatEnabledSignal();
    void setPlayerSourceSignal();
    void setRadarAmplitudeThresholdSignal();
    void setRadarExtrapolTimeSignal();
    void setRadarFrequencySignal();
    void setRadarPositionSignal();
    void setRadarPowerOnSignal();
    void setRadarScanningSignal();
    void setRadarSensitivitySignal();
    void setRadarThresholdControlSignal();
    void setRadarTryToConnectSignal();
    void setRadarVelocityThresholdSignal();
    void setRadarWorkzoneSignal();

    void checkMonitoringModeSignalFull(OARadarIqHttpRequestWorker *worker, OARadarIqBool_data summary);
    void getPlayerSourcesSignalFull(OARadarIqHttpRequestWorker *worker);
    void getRadarConnectionStateSignalFull(OARadarIqHttpRequestWorker *worker, OARadarIqConnection_state_data summary);
    void getRadarSettingsSignalFull(OARadarIqHttpRequestWorker *worker, OARadarIqRadar_settings summary);
    void getRadarTelemetrySignalFull(OARadarIqHttpRequestWorker *worker, OARadarIqGet_radar_telemetry_200_response summary);
    void getRadarTryToConnectSignalFull(OARadarIqHttpRequestWorker *worker, OARadarIqBool_data summary);
    void radarControlPlayerSignalFull(OARadarIqHttpRequestWorker *worker);
    void setPlayerRepeatEnabledSignalFull(OARadarIqHttpRequestWorker *worker);
    void setPlayerSourceSignalFull(OARadarIqHttpRequestWorker *worker);
    void setRadarAmplitudeThresholdSignalFull(OARadarIqHttpRequestWorker *worker);
    void setRadarExtrapolTimeSignalFull(OARadarIqHttpRequestWorker *worker);
    void setRadarFrequencySignalFull(OARadarIqHttpRequestWorker *worker);
    void setRadarPositionSignalFull(OARadarIqHttpRequestWorker *worker);
    void setRadarPowerOnSignalFull(OARadarIqHttpRequestWorker *worker);
    void setRadarScanningSignalFull(OARadarIqHttpRequestWorker *worker);
    void setRadarSensitivitySignalFull(OARadarIqHttpRequestWorker *worker);
    void setRadarThresholdControlSignalFull(OARadarIqHttpRequestWorker *worker);
    void setRadarTryToConnectSignalFull(OARadarIqHttpRequestWorker *worker);
    void setRadarVelocityThresholdSignalFull(OARadarIqHttpRequestWorker *worker);
    void setRadarWorkzoneSignalFull(OARadarIqHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use checkMonitoringModeSignalError() instead")
    void checkMonitoringModeSignalE(OARadarIqBool_data summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkMonitoringModeSignalError(OARadarIqBool_data summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlayerSourcesSignalError() instead")
    void getPlayerSourcesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPlayerSourcesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRadarConnectionStateSignalError() instead")
    void getRadarConnectionStateSignalE(OARadarIqConnection_state_data summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRadarConnectionStateSignalError(OARadarIqConnection_state_data summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRadarSettingsSignalError() instead")
    void getRadarSettingsSignalE(OARadarIqRadar_settings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRadarSettingsSignalError(OARadarIqRadar_settings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRadarTelemetrySignalError() instead")
    void getRadarTelemetrySignalE(OARadarIqGet_radar_telemetry_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRadarTelemetrySignalError(OARadarIqGet_radar_telemetry_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRadarTryToConnectSignalError() instead")
    void getRadarTryToConnectSignalE(OARadarIqBool_data summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRadarTryToConnectSignalError(OARadarIqBool_data summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use radarControlPlayerSignalError() instead")
    void radarControlPlayerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void radarControlPlayerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPlayerRepeatEnabledSignalError() instead")
    void setPlayerRepeatEnabledSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setPlayerRepeatEnabledSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPlayerSourceSignalError() instead")
    void setPlayerSourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setPlayerSourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarAmplitudeThresholdSignalError() instead")
    void setRadarAmplitudeThresholdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarAmplitudeThresholdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarExtrapolTimeSignalError() instead")
    void setRadarExtrapolTimeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarExtrapolTimeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarFrequencySignalError() instead")
    void setRadarFrequencySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarFrequencySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarPositionSignalError() instead")
    void setRadarPositionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarPositionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarPowerOnSignalError() instead")
    void setRadarPowerOnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarPowerOnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarScanningSignalError() instead")
    void setRadarScanningSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarScanningSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarSensitivitySignalError() instead")
    void setRadarSensitivitySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarSensitivitySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarThresholdControlSignalError() instead")
    void setRadarThresholdControlSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarThresholdControlSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarTryToConnectSignalError() instead")
    void setRadarTryToConnectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarTryToConnectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarVelocityThresholdSignalError() instead")
    void setRadarVelocityThresholdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarVelocityThresholdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarWorkzoneSignalError() instead")
    void setRadarWorkzoneSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarWorkzoneSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use checkMonitoringModeSignalErrorFull() instead")
    void checkMonitoringModeSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkMonitoringModeSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlayerSourcesSignalErrorFull() instead")
    void getPlayerSourcesSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlayerSourcesSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRadarConnectionStateSignalErrorFull() instead")
    void getRadarConnectionStateSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRadarConnectionStateSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRadarSettingsSignalErrorFull() instead")
    void getRadarSettingsSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRadarSettingsSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRadarTelemetrySignalErrorFull() instead")
    void getRadarTelemetrySignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRadarTelemetrySignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRadarTryToConnectSignalErrorFull() instead")
    void getRadarTryToConnectSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRadarTryToConnectSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use radarControlPlayerSignalErrorFull() instead")
    void radarControlPlayerSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void radarControlPlayerSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPlayerRepeatEnabledSignalErrorFull() instead")
    void setPlayerRepeatEnabledSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setPlayerRepeatEnabledSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPlayerSourceSignalErrorFull() instead")
    void setPlayerSourceSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setPlayerSourceSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarAmplitudeThresholdSignalErrorFull() instead")
    void setRadarAmplitudeThresholdSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarAmplitudeThresholdSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarExtrapolTimeSignalErrorFull() instead")
    void setRadarExtrapolTimeSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarExtrapolTimeSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarFrequencySignalErrorFull() instead")
    void setRadarFrequencySignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarFrequencySignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarPositionSignalErrorFull() instead")
    void setRadarPositionSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarPositionSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarPowerOnSignalErrorFull() instead")
    void setRadarPowerOnSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarPowerOnSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarScanningSignalErrorFull() instead")
    void setRadarScanningSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarScanningSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarSensitivitySignalErrorFull() instead")
    void setRadarSensitivitySignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarSensitivitySignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarThresholdControlSignalErrorFull() instead")
    void setRadarThresholdControlSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarThresholdControlSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarTryToConnectSignalErrorFull() instead")
    void setRadarTryToConnectSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarTryToConnectSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarVelocityThresholdSignalErrorFull() instead")
    void setRadarVelocityThresholdSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarVelocityThresholdSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRadarWorkzoneSignalErrorFull() instead")
    void setRadarWorkzoneSignalEFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setRadarWorkzoneSignalErrorFull(OARadarIqHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OARadarIq
#endif
