/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OARadarIqRadar_telemetry.h
 *
 * 
 */

#ifndef OARadarIqRadar_telemetry_H
#define OARadarIqRadar_telemetry_H

#include <QJsonObject>

#include "OARadarIqRadar_mode.h"
#include <QList>
#include <QString>

#include "OARadarIqEnum.h"
#include "OARadarIqObject.h"

namespace OARadarIq {

class OARadarIqRadar_telemetry : public OARadarIqObject {
public:
    OARadarIqRadar_telemetry();
    OARadarIqRadar_telemetry(QString json);
    ~OARadarIqRadar_telemetry() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAmplitudeThreshold() const;
    void setAmplitudeThreshold(const qint32 &amplitude_threshold);
    bool is_amplitude_threshold_Set() const;
    bool is_amplitude_threshold_Valid() const;

    QList<QString> getAntennaStatusList() const;
    void setAntennaStatusList(const QList<QString> &antenna_status_list);
    bool is_antenna_status_list_Set() const;
    bool is_antenna_status_list_Valid() const;

    QString getClutterCondition() const;
    void setClutterCondition(const QString &clutter_condition);
    bool is_clutter_condition_Set() const;
    bool is_clutter_condition_Valid() const;

    QString getClutterLevels() const;
    void setClutterLevels(const QString &clutter_levels);
    bool is_clutter_levels_Set() const;
    bool is_clutter_levels_Valid() const;

    qint32 getCpuLoad() const;
    void setCpuLoad(const qint32 &cpu_load);
    bool is_cpu_load_Set() const;
    bool is_cpu_load_Valid() const;

    QString getDeviceStatus() const;
    void setDeviceStatus(const QString &device_status);
    bool is_device_status_Set() const;
    bool is_device_status_Valid() const;

    qint32 getExtrapolTime() const;
    void setExtrapolTime(const qint32 &extrapol_time);
    bool is_extrapol_time_Set() const;
    bool is_extrapol_time_Valid() const;

    QString getFrequency() const;
    void setFrequency(const QString &frequency);
    bool is_frequency_Set() const;
    bool is_frequency_Valid() const;

    QString getHardwareCondition() const;
    void setHardwareCondition(const QString &hardware_condition);
    bool is_hardware_condition_Set() const;
    bool is_hardware_condition_Valid() const;

    QString getHardwareStatus() const;
    void setHardwareStatus(const QString &hardware_status);
    bool is_hardware_status_Set() const;
    bool is_hardware_status_Valid() const;

    QString getIntegralCondition() const;
    void setIntegralCondition(const QString &integral_condition);
    bool is_integral_condition_Set() const;
    bool is_integral_condition_Valid() const;

    OARadarIqRadar_mode getMode() const;
    void setMode(const OARadarIqRadar_mode &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    QString getSensitivity() const;
    void setSensitivity(const QString &sensitivity);
    bool is_sensitivity_Set() const;
    bool is_sensitivity_Valid() const;

    double getTemperature() const;
    void setTemperature(const double &temperature);
    bool is_temperature_Set() const;
    bool is_temperature_Valid() const;

    QString getTemperatureCondition() const;
    void setTemperatureCondition(const QString &temperature_condition);
    bool is_temperature_condition_Set() const;
    bool is_temperature_condition_Valid() const;

    QString getThresholdControl() const;
    void setThresholdControl(const QString &threshold_control);
    bool is_threshold_control_Set() const;
    bool is_threshold_control_Valid() const;

    qint32 getVelocityThreshold() const;
    void setVelocityThreshold(const qint32 &velocity_threshold);
    bool is_velocity_threshold_Set() const;
    bool is_velocity_threshold_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_amplitude_threshold;
    bool m_amplitude_threshold_isSet;
    bool m_amplitude_threshold_isValid;

    QList<QString> m_antenna_status_list;
    bool m_antenna_status_list_isSet;
    bool m_antenna_status_list_isValid;

    QString m_clutter_condition;
    bool m_clutter_condition_isSet;
    bool m_clutter_condition_isValid;

    QString m_clutter_levels;
    bool m_clutter_levels_isSet;
    bool m_clutter_levels_isValid;

    qint32 m_cpu_load;
    bool m_cpu_load_isSet;
    bool m_cpu_load_isValid;

    QString m_device_status;
    bool m_device_status_isSet;
    bool m_device_status_isValid;

    qint32 m_extrapol_time;
    bool m_extrapol_time_isSet;
    bool m_extrapol_time_isValid;

    QString m_frequency;
    bool m_frequency_isSet;
    bool m_frequency_isValid;

    QString m_hardware_condition;
    bool m_hardware_condition_isSet;
    bool m_hardware_condition_isValid;

    QString m_hardware_status;
    bool m_hardware_status_isSet;
    bool m_hardware_status_isValid;

    QString m_integral_condition;
    bool m_integral_condition_isSet;
    bool m_integral_condition_isValid;

    OARadarIqRadar_mode m_mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    QString m_sensitivity;
    bool m_sensitivity_isSet;
    bool m_sensitivity_isValid;

    double m_temperature;
    bool m_temperature_isSet;
    bool m_temperature_isValid;

    QString m_temperature_condition;
    bool m_temperature_condition_isSet;
    bool m_temperature_condition_isValid;

    QString m_threshold_control;
    bool m_threshold_control_isSet;
    bool m_threshold_control_isValid;

    qint32 m_velocity_threshold;
    bool m_velocity_threshold_isSet;
    bool m_velocity_threshold_isValid;
};

} // namespace OARadarIq

Q_DECLARE_METATYPE(OARadarIq::OARadarIqRadar_telemetry)

#endif // OARadarIqRadar_telemetry_H
