/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqCamera_orientation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqCamera_orientation::OARadarIqCamera_orientation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqCamera_orientation::OARadarIqCamera_orientation() {
    this->initializeModel();
}

OARadarIqCamera_orientation::~OARadarIqCamera_orientation() {}

void OARadarIqCamera_orientation::initializeModel() {

    m_azimuth_isSet = false;
    m_azimuth_isValid = false;

    m_elevation_isSet = false;
    m_elevation_isValid = false;

    m_zoom_isSet = false;
    m_zoom_isValid = false;
}

void OARadarIqCamera_orientation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqCamera_orientation::fromJsonObject(QJsonObject json) {

    m_azimuth_isValid = ::OARadarIq::fromJsonValue(m_azimuth, json[QString("azimuth")]);
    m_azimuth_isSet = !json[QString("azimuth")].isNull() && m_azimuth_isValid;

    m_elevation_isValid = ::OARadarIq::fromJsonValue(m_elevation, json[QString("elevation")]);
    m_elevation_isSet = !json[QString("elevation")].isNull() && m_elevation_isValid;

    m_zoom_isValid = ::OARadarIq::fromJsonValue(m_zoom, json[QString("zoom")]);
    m_zoom_isSet = !json[QString("zoom")].isNull() && m_zoom_isValid;
}

QString OARadarIqCamera_orientation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqCamera_orientation::asJsonObject() const {
    QJsonObject obj;
    if (m_azimuth_isSet) {
        obj.insert(QString("azimuth"), ::OARadarIq::toJsonValue(m_azimuth));
    }
    if (m_elevation_isSet) {
        obj.insert(QString("elevation"), ::OARadarIq::toJsonValue(m_elevation));
    }
    if (m_zoom_isSet) {
        obj.insert(QString("zoom"), ::OARadarIq::toJsonValue(m_zoom));
    }
    return obj;
}

double OARadarIqCamera_orientation::getAzimuth() const {
    return m_azimuth;
}
void OARadarIqCamera_orientation::setAzimuth(const double &azimuth) {
    m_azimuth = azimuth;
    m_azimuth_isSet = true;
}

bool OARadarIqCamera_orientation::is_azimuth_Set() const{
    return m_azimuth_isSet;
}

bool OARadarIqCamera_orientation::is_azimuth_Valid() const{
    return m_azimuth_isValid;
}

double OARadarIqCamera_orientation::getElevation() const {
    return m_elevation;
}
void OARadarIqCamera_orientation::setElevation(const double &elevation) {
    m_elevation = elevation;
    m_elevation_isSet = true;
}

bool OARadarIqCamera_orientation::is_elevation_Set() const{
    return m_elevation_isSet;
}

bool OARadarIqCamera_orientation::is_elevation_Valid() const{
    return m_elevation_isValid;
}

double OARadarIqCamera_orientation::getZoom() const {
    return m_zoom;
}
void OARadarIqCamera_orientation::setZoom(const double &zoom) {
    m_zoom = zoom;
    m_zoom_isSet = true;
}

bool OARadarIqCamera_orientation::is_zoom_Set() const{
    return m_zoom_isSet;
}

bool OARadarIqCamera_orientation::is_zoom_Valid() const{
    return m_zoom_isValid;
}

bool OARadarIqCamera_orientation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azimuth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elevation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zoom_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqCamera_orientation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_azimuth_isValid && m_elevation_isValid && m_zoom_isValid && true;
}

} // namespace OARadarIq
