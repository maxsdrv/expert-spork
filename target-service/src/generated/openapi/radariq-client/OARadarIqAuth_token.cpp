/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqAuth_token.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqAuth_token::OARadarIqAuth_token(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqAuth_token::OARadarIqAuth_token() {
    this->initializeModel();
}

OARadarIqAuth_token::~OARadarIqAuth_token() {}

void OARadarIqAuth_token::initializeModel() {

    m_secs_from_epoch_isSet = false;
    m_secs_from_epoch_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OARadarIqAuth_token::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqAuth_token::fromJsonObject(QJsonObject json) {

    m_secs_from_epoch_isValid = ::OARadarIq::fromJsonValue(m_secs_from_epoch, json[QString("secs_from_epoch")]);
    m_secs_from_epoch_isSet = !json[QString("secs_from_epoch")].isNull() && m_secs_from_epoch_isValid;

    m_value_isValid = ::OARadarIq::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OARadarIqAuth_token::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqAuth_token::asJsonObject() const {
    QJsonObject obj;
    if (m_secs_from_epoch_isSet) {
        obj.insert(QString("secs_from_epoch"), ::OARadarIq::toJsonValue(m_secs_from_epoch));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OARadarIq::toJsonValue(m_value));
    }
    return obj;
}

qint32 OARadarIqAuth_token::getSecsFromEpoch() const {
    return m_secs_from_epoch;
}
void OARadarIqAuth_token::setSecsFromEpoch(const qint32 &secs_from_epoch) {
    m_secs_from_epoch = secs_from_epoch;
    m_secs_from_epoch_isSet = true;
}

bool OARadarIqAuth_token::is_secs_from_epoch_Set() const{
    return m_secs_from_epoch_isSet;
}

bool OARadarIqAuth_token::is_secs_from_epoch_Valid() const{
    return m_secs_from_epoch_isValid;
}

QString OARadarIqAuth_token::getValue() const {
    return m_value;
}
void OARadarIqAuth_token::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OARadarIqAuth_token::is_value_Set() const{
    return m_value_isSet;
}

bool OARadarIqAuth_token::is_value_Valid() const{
    return m_value_isValid;
}

bool OARadarIqAuth_token::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_secs_from_epoch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqAuth_token::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OARadarIq
