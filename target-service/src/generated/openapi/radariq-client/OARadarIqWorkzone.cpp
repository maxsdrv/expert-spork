/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqWorkzone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqWorkzone::OARadarIqWorkzone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqWorkzone::OARadarIqWorkzone() {
    this->initializeModel();
}

OARadarIqWorkzone::~OARadarIqWorkzone() {}

void OARadarIqWorkzone::initializeModel() {

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_sectors_isSet = false;
    m_sectors_isValid = false;

    m_start_sector_isSet = false;
    m_start_sector_isValid = false;
}

void OARadarIqWorkzone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqWorkzone::fromJsonObject(QJsonObject json) {

    m_device_type_isValid = ::OARadarIq::fromJsonValue(m_device_type, json[QString("deviceType")]);
    m_device_type_isSet = !json[QString("deviceType")].isNull() && m_device_type_isValid;

    m_sectors_isValid = ::OARadarIq::fromJsonValue(m_sectors, json[QString("sectors")]);
    m_sectors_isSet = !json[QString("sectors")].isNull() && m_sectors_isValid;

    m_start_sector_isValid = ::OARadarIq::fromJsonValue(m_start_sector, json[QString("startSector")]);
    m_start_sector_isSet = !json[QString("startSector")].isNull() && m_start_sector_isValid;
}

QString OARadarIqWorkzone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqWorkzone::asJsonObject() const {
    QJsonObject obj;
    if (m_device_type_isSet) {
        obj.insert(QString("deviceType"), ::OARadarIq::toJsonValue(m_device_type));
    }
    if (m_sectors.size() > 0) {
        obj.insert(QString("sectors"), ::OARadarIq::toJsonValue(m_sectors));
    }
    if (m_start_sector_isSet) {
        obj.insert(QString("startSector"), ::OARadarIq::toJsonValue(m_start_sector));
    }
    return obj;
}

QString OARadarIqWorkzone::getDeviceType() const {
    return m_device_type;
}
void OARadarIqWorkzone::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OARadarIqWorkzone::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OARadarIqWorkzone::is_device_type_Valid() const{
    return m_device_type_isValid;
}

QList<OARadarIqSector> OARadarIqWorkzone::getSectors() const {
    return m_sectors;
}
void OARadarIqWorkzone::setSectors(const QList<OARadarIqSector> &sectors) {
    m_sectors = sectors;
    m_sectors_isSet = true;
}

bool OARadarIqWorkzone::is_sectors_Set() const{
    return m_sectors_isSet;
}

bool OARadarIqWorkzone::is_sectors_Valid() const{
    return m_sectors_isValid;
}

QString OARadarIqWorkzone::getStartSector() const {
    return m_start_sector;
}
void OARadarIqWorkzone::setStartSector(const QString &start_sector) {
    m_start_sector = start_sector;
    m_start_sector_isSet = true;
}

bool OARadarIqWorkzone::is_start_sector_Set() const{
    return m_start_sector_isSet;
}

bool OARadarIqWorkzone::is_start_sector_Valid() const{
    return m_start_sector_isValid;
}

bool OARadarIqWorkzone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sectors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_sector_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqWorkzone::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_type_isValid && m_sectors_isValid && m_start_sector_isValid && true;
}

} // namespace OARadarIq
