/**
 * RCT Service REST API
 * REST API of `rct-service`.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OARadarIqUnit_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OARadarIqHelpers.h"

namespace OARadarIq {

OARadarIqUnit_info::OARadarIqUnit_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OARadarIqUnit_info::OARadarIqUnit_info() {
    this->initializeModel();
}

OARadarIqUnit_info::~OARadarIqUnit_info() {}

void OARadarIqUnit_info::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OARadarIqUnit_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OARadarIqUnit_info::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OARadarIq::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_model_isValid = ::OARadarIq::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_id_isValid = ::OARadarIq::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OARadarIqUnit_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OARadarIqUnit_info::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OARadarIq::toJsonValue(m_type));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OARadarIq::toJsonValue(m_model));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OARadarIq::toJsonValue(m_id));
    }
    return obj;
}

OARadarIqUnit_type OARadarIqUnit_info::getType() const {
    return m_type;
}
void OARadarIqUnit_info::setType(const OARadarIqUnit_type &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OARadarIqUnit_info::is_type_Set() const{
    return m_type_isSet;
}

bool OARadarIqUnit_info::is_type_Valid() const{
    return m_type_isValid;
}

QString OARadarIqUnit_info::getModel() const {
    return m_model;
}
void OARadarIqUnit_info::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OARadarIqUnit_info::is_model_Set() const{
    return m_model_isSet;
}

bool OARadarIqUnit_info::is_model_Valid() const{
    return m_model_isValid;
}

QString OARadarIqUnit_info::getId() const {
    return m_id;
}
void OARadarIqUnit_info::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OARadarIqUnit_info::is_id_Set() const{
    return m_id_isSet;
}

bool OARadarIqUnit_info::is_id_Valid() const{
    return m_id_isValid;
}

bool OARadarIqUnit_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OARadarIqUnit_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_model_isValid && m_id_isValid && true;
}

} // namespace OARadarIq
