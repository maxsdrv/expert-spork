/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceSettings::OAServiceSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceSettings::OAServiceSettings() {
    this->initializeModel();
}

OAServiceSettings::~OAServiceSettings() {}

void OAServiceSettings::initializeModel() {

    m_device_id_mapping_isSet = false;
    m_device_id_mapping_isValid = false;

    m_devices_isSet = false;
    m_devices_isValid = false;
}

void OAServiceSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceSettings::fromJsonObject(QJsonObject json) {

    m_device_id_mapping_isValid = ::OAService::fromJsonValue(m_device_id_mapping, json[QString("device_id_mapping")]);
    m_device_id_mapping_isSet = !json[QString("device_id_mapping")].isNull() && m_device_id_mapping_isValid;

    m_devices_isValid = ::OAService::fromJsonValue(m_devices, json[QString("devices")]);
    m_devices_isSet = !json[QString("devices")].isNull() && m_devices_isValid;
}

QString OAServiceSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_device_id_mapping.size() > 0) {
        obj.insert(QString("device_id_mapping"), ::OAService::toJsonValue(m_device_id_mapping));
    }
    if (m_devices.size() > 0) {
        obj.insert(QString("devices"), ::OAService::toJsonValue(m_devices));
    }
    return obj;
}

QList<OAServiceDevice_id_mapping> OAServiceSettings::getDeviceIdMapping() const {
    return m_device_id_mapping;
}
void OAServiceSettings::setDeviceIdMapping(const QList<OAServiceDevice_id_mapping> &device_id_mapping) {
    m_device_id_mapping = device_id_mapping;
    m_device_id_mapping_isSet = true;
}

bool OAServiceSettings::is_device_id_mapping_Set() const{
    return m_device_id_mapping_isSet;
}

bool OAServiceSettings::is_device_id_mapping_Valid() const{
    return m_device_id_mapping_isValid;
}

QList<OAServiceDevice_settings> OAServiceSettings::getDevices() const {
    return m_devices;
}
void OAServiceSettings::setDevices(const QList<OAServiceDevice_settings> &devices) {
    m_devices = devices;
    m_devices_isSet = true;
}

bool OAServiceSettings::is_devices_Set() const{
    return m_devices_isSet;
}

bool OAServiceSettings::is_devices_Valid() const{
    return m_devices_isValid;
}

bool OAServiceSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_id_mapping.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_devices.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_devices_isValid && true;
}

} // namespace OAService
