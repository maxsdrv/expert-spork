/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceSensor_type.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceSensor_type::OAServiceSensor_type(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceSensor_type::OAServiceSensor_type() {
    this->initializeModel();
}

OAServiceSensor_type::~OAServiceSensor_type() {}

void OAServiceSensor_type::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAServiceSensor_type::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAServiceSensor_type::fromJson(QString jsonString) {
    
    if ( jsonString.compare("RFD", Qt::CaseInsensitive) == 0) {
        m_value = eOAServiceSensor_type::RFD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RADAR", Qt::CaseInsensitive) == 0) {
        m_value = eOAServiceSensor_type::RADAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CAMERA", Qt::CaseInsensitive) == 0) {
        m_value = eOAServiceSensor_type::CAMERA;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAServiceSensor_type::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAServiceSensor_type::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAServiceSensor_type::RFD:
            val = "RFD";
            break;
        case eOAServiceSensor_type::RADAR:
            val = "RADAR";
            break;
        case eOAServiceSensor_type::CAMERA:
            val = "CAMERA";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAServiceSensor_type::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAServiceSensor_type::eOAServiceSensor_type OAServiceSensor_type::getValue() const {
    return m_value;
}

void OAServiceSensor_type::setValue(const OAServiceSensor_type::eOAServiceSensor_type& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAServiceSensor_type::isSet() const {
    
    return m_value_isSet;
}

bool OAServiceSensor_type::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OAService
