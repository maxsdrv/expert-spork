/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceWorkzone_sector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceWorkzone_sector::OAServiceWorkzone_sector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceWorkzone_sector::OAServiceWorkzone_sector() {
    this->initializeModel();
}

OAServiceWorkzone_sector::~OAServiceWorkzone_sector() {}

void OAServiceWorkzone_sector::initializeModel() {

    m_number_isSet = false;
    m_number_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_min_angle_isSet = false;
    m_min_angle_isValid = false;

    m_max_angle_isSet = false;
    m_max_angle_isValid = false;
}

void OAServiceWorkzone_sector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceWorkzone_sector::fromJsonObject(QJsonObject json) {

    m_number_isValid = ::OAService::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_distance_isValid = ::OAService::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_min_angle_isValid = ::OAService::fromJsonValue(m_min_angle, json[QString("min_angle")]);
    m_min_angle_isSet = !json[QString("min_angle")].isNull() && m_min_angle_isValid;

    m_max_angle_isValid = ::OAService::fromJsonValue(m_max_angle, json[QString("max_angle")]);
    m_max_angle_isSet = !json[QString("max_angle")].isNull() && m_max_angle_isValid;
}

QString OAServiceWorkzone_sector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceWorkzone_sector::asJsonObject() const {
    QJsonObject obj;
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OAService::toJsonValue(m_number));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OAService::toJsonValue(m_distance));
    }
    if (m_min_angle_isSet) {
        obj.insert(QString("min_angle"), ::OAService::toJsonValue(m_min_angle));
    }
    if (m_max_angle_isSet) {
        obj.insert(QString("max_angle"), ::OAService::toJsonValue(m_max_angle));
    }
    return obj;
}

qint32 OAServiceWorkzone_sector::getNumber() const {
    return m_number;
}
void OAServiceWorkzone_sector::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAServiceWorkzone_sector::is_number_Set() const{
    return m_number_isSet;
}

bool OAServiceWorkzone_sector::is_number_Valid() const{
    return m_number_isValid;
}

double OAServiceWorkzone_sector::getDistance() const {
    return m_distance;
}
void OAServiceWorkzone_sector::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAServiceWorkzone_sector::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAServiceWorkzone_sector::is_distance_Valid() const{
    return m_distance_isValid;
}

double OAServiceWorkzone_sector::getMinAngle() const {
    return m_min_angle;
}
void OAServiceWorkzone_sector::setMinAngle(const double &min_angle) {
    m_min_angle = min_angle;
    m_min_angle_isSet = true;
}

bool OAServiceWorkzone_sector::is_min_angle_Set() const{
    return m_min_angle_isSet;
}

bool OAServiceWorkzone_sector::is_min_angle_Valid() const{
    return m_min_angle_isValid;
}

double OAServiceWorkzone_sector::getMaxAngle() const {
    return m_max_angle;
}
void OAServiceWorkzone_sector::setMaxAngle(const double &max_angle) {
    m_max_angle = max_angle;
    m_max_angle_isSet = true;
}

bool OAServiceWorkzone_sector::is_max_angle_Set() const{
    return m_max_angle_isSet;
}

bool OAServiceWorkzone_sector::is_max_angle_Valid() const{
    return m_max_angle_isValid;
}

bool OAServiceWorkzone_sector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_angle_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceWorkzone_sector::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_number_isValid && m_distance_isValid && m_min_angle_isValid && m_max_angle_isValid && true;
}

} // namespace OAService
