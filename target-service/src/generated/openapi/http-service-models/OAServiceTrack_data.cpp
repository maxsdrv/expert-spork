/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceTrack_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceTrack_data::OAServiceTrack_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceTrack_data::OAServiceTrack_data() {
    this->initializeModel();
}

OAServiceTrack_data::~OAServiceTrack_data() {}

void OAServiceTrack_data::initializeModel() {

    m_track_id_isSet = false;
    m_track_id_isValid = false;

    m_target_id_isSet = false;
    m_target_id_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_points_isSet = false;
    m_points_isValid = false;
}

void OAServiceTrack_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceTrack_data::fromJsonObject(QJsonObject json) {

    m_track_id_isValid = ::OAService::fromJsonValue(m_track_id, json[QString("track_id")]);
    m_track_id_isSet = !json[QString("track_id")].isNull() && m_track_id_isValid;

    m_target_id_isValid = ::OAService::fromJsonValue(m_target_id, json[QString("target_id")]);
    m_target_id_isSet = !json[QString("target_id")].isNull() && m_target_id_isValid;

    m_source_id_isValid = ::OAService::fromJsonValue(m_source_id, json[QString("source_id")]);
    m_source_id_isSet = !json[QString("source_id")].isNull() && m_source_id_isValid;

    m_points_isValid = ::OAService::fromJsonValue(m_points, json[QString("points")]);
    m_points_isSet = !json[QString("points")].isNull() && m_points_isValid;
}

QString OAServiceTrack_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceTrack_data::asJsonObject() const {
    QJsonObject obj;
    if (m_track_id_isSet) {
        obj.insert(QString("track_id"), ::OAService::toJsonValue(m_track_id));
    }
    if (m_target_id_isSet) {
        obj.insert(QString("target_id"), ::OAService::toJsonValue(m_target_id));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("source_id"), ::OAService::toJsonValue(m_source_id));
    }
    if (m_points.size() > 0) {
        obj.insert(QString("points"), ::OAService::toJsonValue(m_points));
    }
    return obj;
}

QString OAServiceTrack_data::getTrackId() const {
    return m_track_id;
}
void OAServiceTrack_data::setTrackId(const QString &track_id) {
    m_track_id = track_id;
    m_track_id_isSet = true;
}

bool OAServiceTrack_data::is_track_id_Set() const{
    return m_track_id_isSet;
}

bool OAServiceTrack_data::is_track_id_Valid() const{
    return m_track_id_isValid;
}

QString OAServiceTrack_data::getTargetId() const {
    return m_target_id;
}
void OAServiceTrack_data::setTargetId(const QString &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAServiceTrack_data::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAServiceTrack_data::is_target_id_Valid() const{
    return m_target_id_isValid;
}

QString OAServiceTrack_data::getSourceId() const {
    return m_source_id;
}
void OAServiceTrack_data::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAServiceTrack_data::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAServiceTrack_data::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QList<OAServiceTrack_point> OAServiceTrack_data::getPoints() const {
    return m_points;
}
void OAServiceTrack_data::setPoints(const QList<OAServiceTrack_point> &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OAServiceTrack_data::is_points_Set() const{
    return m_points_isSet;
}

bool OAServiceTrack_data::is_points_Valid() const{
    return m_points_isValid;
}

bool OAServiceTrack_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_track_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceTrack_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_track_id_isValid && m_target_id_isValid && m_source_id_isValid && m_points_isValid && true;
}

} // namespace OAService
