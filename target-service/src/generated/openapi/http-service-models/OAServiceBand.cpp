/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceBand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceBand::OAServiceBand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceBand::OAServiceBand() {
    this->initializeModel();
}

OAServiceBand::~OAServiceBand() {}

void OAServiceBand::initializeModel() {

    m_label_isSet = false;
    m_label_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;
}

void OAServiceBand::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceBand::fromJsonObject(QJsonObject json) {

    m_label_isValid = ::OAService::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_active_isValid = ::OAService::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;
}

QString OAServiceBand::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceBand::asJsonObject() const {
    QJsonObject obj;
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OAService::toJsonValue(m_label));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OAService::toJsonValue(m_active));
    }
    return obj;
}

QString OAServiceBand::getLabel() const {
    return m_label;
}
void OAServiceBand::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAServiceBand::is_label_Set() const{
    return m_label_isSet;
}

bool OAServiceBand::is_label_Valid() const{
    return m_label_isValid;
}

bool OAServiceBand::isActive() const {
    return m_active;
}
void OAServiceBand::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAServiceBand::is_active_Set() const{
    return m_active_isSet;
}

bool OAServiceBand::is_active_Valid() const{
    return m_active_isValid;
}

bool OAServiceBand::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceBand::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_label_isValid && m_active_isValid && true;
}

} // namespace OAService
