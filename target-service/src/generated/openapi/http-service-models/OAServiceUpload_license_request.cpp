/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceUpload_license_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceUpload_license_request::OAServiceUpload_license_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceUpload_license_request::OAServiceUpload_license_request() {
    this->initializeModel();
}

OAServiceUpload_license_request::~OAServiceUpload_license_request() {}

void OAServiceUpload_license_request::initializeModel() {

    m_license_data_isSet = false;
    m_license_data_isValid = false;
}

void OAServiceUpload_license_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceUpload_license_request::fromJsonObject(QJsonObject json) {

    m_license_data_isValid = ::OAService::fromJsonValue(m_license_data, json[QString("license_data")]);
    m_license_data_isSet = !json[QString("license_data")].isNull() && m_license_data_isValid;
}

QString OAServiceUpload_license_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceUpload_license_request::asJsonObject() const {
    QJsonObject obj;
    if (m_license_data_isSet) {
        obj.insert(QString("license_data"), ::OAService::toJsonValue(m_license_data));
    }
    return obj;
}

QString OAServiceUpload_license_request::getLicenseData() const {
    return m_license_data;
}
void OAServiceUpload_license_request::setLicenseData(const QString &license_data) {
    m_license_data = license_data;
    m_license_data_isSet = true;
}

bool OAServiceUpload_license_request::is_license_data_Set() const{
    return m_license_data_isSet;
}

bool OAServiceUpload_license_request::is_license_data_Valid() const{
    return m_license_data_isValid;
}

bool OAServiceUpload_license_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_license_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceUpload_license_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_license_data_isValid && true;
}

} // namespace OAService
