/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAServiceJammer_timeout_status.h
 *
 * The field is absent when the timer is stopped
 */

#ifndef OAServiceJammer_timeout_status_H
#define OAServiceJammer_timeout_status_H

#include <QJsonObject>

#include <QDateTime>

#include "OAServiceEnum.h"
#include "OAServiceObject.h"

namespace OAService {

class OAServiceJammer_timeout_status : public OAServiceObject {
public:
    OAServiceJammer_timeout_status();
    OAServiceJammer_timeout_status(QString json);
    ~OAServiceJammer_timeout_status() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getStarted() const;
    void setStarted(const QDateTime &started);
    bool is_started_Set() const;
    bool is_started_Valid() const;

    QDateTime getNow() const;
    void setNow(const QDateTime &now);
    bool is_now_Set() const;
    bool is_now_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_started;
    bool m_started_isSet;
    bool m_started_isValid;

    QDateTime m_now;
    bool m_now_isSet;
    bool m_now_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;
};

} // namespace OAService

Q_DECLARE_METATYPE(OAService::OAServiceJammer_timeout_status)

#endif // OAServiceJammer_timeout_status_H
