/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceTarget_data_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceTarget_data_attributes::OAServiceTarget_data_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceTarget_data_attributes::OAServiceTarget_data_attributes() {
    this->initializeModel();
}

OAServiceTarget_data_attributes::~OAServiceTarget_data_attributes() {}

void OAServiceTarget_data_attributes::initializeModel() {

    m_digital_isSet = false;
    m_digital_isValid = false;

    m_frequencies_isSet = false;
    m_frequencies_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_geolocation_isSet = false;
    m_geolocation_isValid = false;
}

void OAServiceTarget_data_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceTarget_data_attributes::fromJsonObject(QJsonObject json) {

    m_digital_isValid = ::OAService::fromJsonValue(m_digital, json[QString("digital")]);
    m_digital_isSet = !json[QString("digital")].isNull() && m_digital_isValid;

    m_frequencies_isValid = ::OAService::fromJsonValue(m_frequencies, json[QString("frequencies")]);
    m_frequencies_isSet = !json[QString("frequencies")].isNull() && m_frequencies_isValid;

    m_description_isValid = ::OAService::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_geolocation_isValid = ::OAService::fromJsonValue(m_geolocation, json[QString("geolocation")]);
    m_geolocation_isSet = !json[QString("geolocation")].isNull() && m_geolocation_isValid;
}

QString OAServiceTarget_data_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceTarget_data_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_digital_isSet) {
        obj.insert(QString("digital"), ::OAService::toJsonValue(m_digital));
    }
    if (m_frequencies.size() > 0) {
        obj.insert(QString("frequencies"), ::OAService::toJsonValue(m_frequencies));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OAService::toJsonValue(m_description));
    }
    if (m_geolocation_isSet) {
        obj.insert(QString("geolocation"), ::OAService::toJsonValue(m_geolocation));
    }
    return obj;
}

bool OAServiceTarget_data_attributes::isDigital() const {
    return m_digital;
}
void OAServiceTarget_data_attributes::setDigital(const bool &digital) {
    m_digital = digital;
    m_digital_isSet = true;
}

bool OAServiceTarget_data_attributes::is_digital_Set() const{
    return m_digital_isSet;
}

bool OAServiceTarget_data_attributes::is_digital_Valid() const{
    return m_digital_isValid;
}

QList<qint32> OAServiceTarget_data_attributes::getFrequencies() const {
    return m_frequencies;
}
void OAServiceTarget_data_attributes::setFrequencies(const QList<qint32> &frequencies) {
    m_frequencies = frequencies;
    m_frequencies_isSet = true;
}

bool OAServiceTarget_data_attributes::is_frequencies_Set() const{
    return m_frequencies_isSet;
}

bool OAServiceTarget_data_attributes::is_frequencies_Valid() const{
    return m_frequencies_isValid;
}

QString OAServiceTarget_data_attributes::getDescription() const {
    return m_description;
}
void OAServiceTarget_data_attributes::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAServiceTarget_data_attributes::is_description_Set() const{
    return m_description_isSet;
}

bool OAServiceTarget_data_attributes::is_description_Valid() const{
    return m_description_isValid;
}

bool OAServiceTarget_data_attributes::isGeolocation() const {
    return m_geolocation;
}
void OAServiceTarget_data_attributes::setGeolocation(const bool &geolocation) {
    m_geolocation = geolocation;
    m_geolocation_isSet = true;
}

bool OAServiceTarget_data_attributes::is_geolocation_Set() const{
    return m_geolocation_isSet;
}

bool OAServiceTarget_data_attributes::is_geolocation_Valid() const{
    return m_geolocation_isValid;
}

bool OAServiceTarget_data_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_digital_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geolocation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceTarget_data_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_digital_isValid && m_frequencies_isValid && m_geolocation_isValid && true;
}

} // namespace OAService
