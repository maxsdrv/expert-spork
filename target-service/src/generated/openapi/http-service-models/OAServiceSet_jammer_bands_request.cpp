/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceSet_jammer_bands_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceSet_jammer_bands_request::OAServiceSet_jammer_bands_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceSet_jammer_bands_request::OAServiceSet_jammer_bands_request() {
    this->initializeModel();
}

OAServiceSet_jammer_bands_request::~OAServiceSet_jammer_bands_request() {}

void OAServiceSet_jammer_bands_request::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_bands_active_isSet = false;
    m_bands_active_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_ws_reply_id_isSet = false;
    m_ws_reply_id_isValid = false;
}

void OAServiceSet_jammer_bands_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceSet_jammer_bands_request::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OAService::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_bands_active_isValid = ::OAService::fromJsonValue(m_bands_active, json[QString("bands_active")]);
    m_bands_active_isSet = !json[QString("bands_active")].isNull() && m_bands_active_isValid;

    m_duration_isValid = ::OAService::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_ws_reply_id_isValid = ::OAService::fromJsonValue(m_ws_reply_id, json[QString("ws_reply_id")]);
    m_ws_reply_id_isSet = !json[QString("ws_reply_id")].isNull() && m_ws_reply_id_isValid;
}

QString OAServiceSet_jammer_bands_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceSet_jammer_bands_request::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OAService::toJsonValue(m_id));
    }
    if (m_bands_active.size() > 0) {
        obj.insert(QString("bands_active"), ::OAService::toJsonValue(m_bands_active));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OAService::toJsonValue(m_duration));
    }
    if (m_ws_reply_id_isSet) {
        obj.insert(QString("ws_reply_id"), ::OAService::toJsonValue(m_ws_reply_id));
    }
    return obj;
}

QString OAServiceSet_jammer_bands_request::getId() const {
    return m_id;
}
void OAServiceSet_jammer_bands_request::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAServiceSet_jammer_bands_request::is_id_Set() const{
    return m_id_isSet;
}

bool OAServiceSet_jammer_bands_request::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAServiceSet_jammer_bands_request::getBandsActive() const {
    return m_bands_active;
}
void OAServiceSet_jammer_bands_request::setBandsActive(const QList<QString> &bands_active) {
    m_bands_active = bands_active;
    m_bands_active_isSet = true;
}

bool OAServiceSet_jammer_bands_request::is_bands_active_Set() const{
    return m_bands_active_isSet;
}

bool OAServiceSet_jammer_bands_request::is_bands_active_Valid() const{
    return m_bands_active_isValid;
}

qint32 OAServiceSet_jammer_bands_request::getDuration() const {
    return m_duration;
}
void OAServiceSet_jammer_bands_request::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAServiceSet_jammer_bands_request::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAServiceSet_jammer_bands_request::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAServiceSet_jammer_bands_request::getWsReplyId() const {
    return m_ws_reply_id;
}
void OAServiceSet_jammer_bands_request::setWsReplyId(const QString &ws_reply_id) {
    m_ws_reply_id = ws_reply_id;
    m_ws_reply_id_isSet = true;
}

bool OAServiceSet_jammer_bands_request::is_ws_reply_id_Set() const{
    return m_ws_reply_id_isSet;
}

bool OAServiceSet_jammer_bands_request::is_ws_reply_id_Valid() const{
    return m_ws_reply_id_isValid;
}

bool OAServiceSet_jammer_bands_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bands_active.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ws_reply_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceSet_jammer_bands_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_bands_active_isValid && m_duration_isValid && true;
}

} // namespace OAService
