/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceJammer_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceJammer_info::OAServiceJammer_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceJammer_info::OAServiceJammer_info() {
    this->initializeModel();
}

OAServiceJammer_info::~OAServiceJammer_info() {}

void OAServiceJammer_info::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_sw_version_isSet = false;
    m_sw_version_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_position_mode_isSet = false;
    m_position_mode_isValid = false;

    m_workzone_isSet = false;
    m_workzone_isValid = false;

    m_sensor_id_isSet = false;
    m_sensor_id_isValid = false;

    m_bands_isSet = false;
    m_bands_isValid = false;

    m_band_options_isSet = false;
    m_band_options_isValid = false;

    m_hw_info_isSet = false;
    m_hw_info_isValid = false;

    m_timeout_status_isSet = false;
    m_timeout_status_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;
}

void OAServiceJammer_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceJammer_info::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OAService::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_model_isValid = ::OAService::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_serial_isValid = ::OAService::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_sw_version_isValid = ::OAService::fromJsonValue(m_sw_version, json[QString("sw_version")]);
    m_sw_version_isSet = !json[QString("sw_version")].isNull() && m_sw_version_isValid;

    m_disabled_isValid = ::OAService::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_state_isValid = ::OAService::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_position_isValid = ::OAService::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_position_mode_isValid = ::OAService::fromJsonValue(m_position_mode, json[QString("position_mode")]);
    m_position_mode_isSet = !json[QString("position_mode")].isNull() && m_position_mode_isValid;

    m_workzone_isValid = ::OAService::fromJsonValue(m_workzone, json[QString("workzone")]);
    m_workzone_isSet = !json[QString("workzone")].isNull() && m_workzone_isValid;

    m_sensor_id_isValid = ::OAService::fromJsonValue(m_sensor_id, json[QString("sensor_id")]);
    m_sensor_id_isSet = !json[QString("sensor_id")].isNull() && m_sensor_id_isValid;

    m_bands_isValid = ::OAService::fromJsonValue(m_bands, json[QString("bands")]);
    m_bands_isSet = !json[QString("bands")].isNull() && m_bands_isValid;

    if(json["band_options"].isArray()){
        auto arr = json["band_options"].toArray();
        m_band_options_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QString> item;
                m_band_options_isValid &= ::OAService::fromJsonValue(item, jval);
                m_band_options_isSet = !jval.isNull() && m_band_options_isValid;
                m_band_options.push_back(item);
            }
        }
    }

    m_hw_info_isValid = ::OAService::fromJsonValue(m_hw_info, json[QString("hw_info")]);
    m_hw_info_isSet = !json[QString("hw_info")].isNull() && m_hw_info_isValid;

    m_timeout_status_isValid = ::OAService::fromJsonValue(m_timeout_status, json[QString("timeout_status")]);
    m_timeout_status_isSet = !json[QString("timeout_status")].isNull() && m_timeout_status_isValid;

    m_group_id_isValid = ::OAService::fromJsonValue(m_group_id, json[QString("group_id")]);
    m_group_id_isSet = !json[QString("group_id")].isNull() && m_group_id_isValid;
}

QString OAServiceJammer_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceJammer_info::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OAService::toJsonValue(m_id));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OAService::toJsonValue(m_model));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OAService::toJsonValue(m_serial));
    }
    if (m_sw_version_isSet) {
        obj.insert(QString("sw_version"), ::OAService::toJsonValue(m_sw_version));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OAService::toJsonValue(m_disabled));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OAService::toJsonValue(m_state));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OAService::toJsonValue(m_position));
    }
    if (m_position_mode.isSet()) {
        obj.insert(QString("position_mode"), ::OAService::toJsonValue(m_position_mode));
    }
    if (m_workzone.size() > 0) {
        obj.insert(QString("workzone"), ::OAService::toJsonValue(m_workzone));
    }
    if (m_sensor_id_isSet) {
        obj.insert(QString("sensor_id"), ::OAService::toJsonValue(m_sensor_id));
    }
    if (m_bands.size() > 0) {
        obj.insert(QString("bands"), ::OAService::toJsonValue(m_bands));
    }
    if (m_band_options.size() > 0) {
        
        obj.insert(QString("band_options"), toJsonValue(m_band_options));
    }
    if (m_hw_info.isSet()) {
        obj.insert(QString("hw_info"), ::OAService::toJsonValue(m_hw_info));
    }
    if (m_timeout_status.isSet()) {
        obj.insert(QString("timeout_status"), ::OAService::toJsonValue(m_timeout_status));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("group_id"), ::OAService::toJsonValue(m_group_id));
    }
    return obj;
}

QString OAServiceJammer_info::getId() const {
    return m_id;
}
void OAServiceJammer_info::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAServiceJammer_info::is_id_Set() const{
    return m_id_isSet;
}

bool OAServiceJammer_info::is_id_Valid() const{
    return m_id_isValid;
}

QString OAServiceJammer_info::getModel() const {
    return m_model;
}
void OAServiceJammer_info::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAServiceJammer_info::is_model_Set() const{
    return m_model_isSet;
}

bool OAServiceJammer_info::is_model_Valid() const{
    return m_model_isValid;
}

QString OAServiceJammer_info::getSerial() const {
    return m_serial;
}
void OAServiceJammer_info::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAServiceJammer_info::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAServiceJammer_info::is_serial_Valid() const{
    return m_serial_isValid;
}

QString OAServiceJammer_info::getSwVersion() const {
    return m_sw_version;
}
void OAServiceJammer_info::setSwVersion(const QString &sw_version) {
    m_sw_version = sw_version;
    m_sw_version_isSet = true;
}

bool OAServiceJammer_info::is_sw_version_Set() const{
    return m_sw_version_isSet;
}

bool OAServiceJammer_info::is_sw_version_Valid() const{
    return m_sw_version_isValid;
}

bool OAServiceJammer_info::isDisabled() const {
    return m_disabled;
}
void OAServiceJammer_info::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAServiceJammer_info::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAServiceJammer_info::is_disabled_Valid() const{
    return m_disabled_isValid;
}

OAServiceState OAServiceJammer_info::getState() const {
    return m_state;
}
void OAServiceJammer_info::setState(const OAServiceState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAServiceJammer_info::is_state_Set() const{
    return m_state_isSet;
}

bool OAServiceJammer_info::is_state_Valid() const{
    return m_state_isValid;
}

OAServiceGeo_position OAServiceJammer_info::getPosition() const {
    return m_position;
}
void OAServiceJammer_info::setPosition(const OAServiceGeo_position &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAServiceJammer_info::is_position_Set() const{
    return m_position_isSet;
}

bool OAServiceJammer_info::is_position_Valid() const{
    return m_position_isValid;
}

OAServiceGeo_position_mode OAServiceJammer_info::getPositionMode() const {
    return m_position_mode;
}
void OAServiceJammer_info::setPositionMode(const OAServiceGeo_position_mode &position_mode) {
    m_position_mode = position_mode;
    m_position_mode_isSet = true;
}

bool OAServiceJammer_info::is_position_mode_Set() const{
    return m_position_mode_isSet;
}

bool OAServiceJammer_info::is_position_mode_Valid() const{
    return m_position_mode_isValid;
}

QList<OAServiceWorkzone_sector> OAServiceJammer_info::getWorkzone() const {
    return m_workzone;
}
void OAServiceJammer_info::setWorkzone(const QList<OAServiceWorkzone_sector> &workzone) {
    m_workzone = workzone;
    m_workzone_isSet = true;
}

bool OAServiceJammer_info::is_workzone_Set() const{
    return m_workzone_isSet;
}

bool OAServiceJammer_info::is_workzone_Valid() const{
    return m_workzone_isValid;
}

QString OAServiceJammer_info::getSensorId() const {
    return m_sensor_id;
}
void OAServiceJammer_info::setSensorId(const QString &sensor_id) {
    m_sensor_id = sensor_id;
    m_sensor_id_isSet = true;
}

bool OAServiceJammer_info::is_sensor_id_Set() const{
    return m_sensor_id_isSet;
}

bool OAServiceJammer_info::is_sensor_id_Valid() const{
    return m_sensor_id_isValid;
}

QList<OAServiceBand> OAServiceJammer_info::getBands() const {
    return m_bands;
}
void OAServiceJammer_info::setBands(const QList<OAServiceBand> &bands) {
    m_bands = bands;
    m_bands_isSet = true;
}

bool OAServiceJammer_info::is_bands_Set() const{
    return m_bands_isSet;
}

bool OAServiceJammer_info::is_bands_Valid() const{
    return m_bands_isValid;
}

QList<QList<QString>> OAServiceJammer_info::getBandOptions() const {
    return m_band_options;
}
void OAServiceJammer_info::setBandOptions(const QList<QList<QString>> &band_options) {
    m_band_options = band_options;
    m_band_options_isSet = true;
}

bool OAServiceJammer_info::is_band_options_Set() const{
    return m_band_options_isSet;
}

bool OAServiceJammer_info::is_band_options_Valid() const{
    return m_band_options_isValid;
}

OAServiceHw_info OAServiceJammer_info::getHwInfo() const {
    return m_hw_info;
}
void OAServiceJammer_info::setHwInfo(const OAServiceHw_info &hw_info) {
    m_hw_info = hw_info;
    m_hw_info_isSet = true;
}

bool OAServiceJammer_info::is_hw_info_Set() const{
    return m_hw_info_isSet;
}

bool OAServiceJammer_info::is_hw_info_Valid() const{
    return m_hw_info_isValid;
}

OAServiceJammer_timeout_status OAServiceJammer_info::getTimeoutStatus() const {
    return m_timeout_status;
}
void OAServiceJammer_info::setTimeoutStatus(const OAServiceJammer_timeout_status &timeout_status) {
    m_timeout_status = timeout_status;
    m_timeout_status_isSet = true;
}

bool OAServiceJammer_info::is_timeout_status_Set() const{
    return m_timeout_status_isSet;
}

bool OAServiceJammer_info::is_timeout_status_Valid() const{
    return m_timeout_status_isValid;
}

QString OAServiceJammer_info::getGroupId() const {
    return m_group_id;
}
void OAServiceJammer_info::setGroupId(const QString &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAServiceJammer_info::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAServiceJammer_info::is_group_id_Valid() const{
    return m_group_id_isValid;
}

bool OAServiceJammer_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sw_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workzone.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_band_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hw_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceJammer_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_model_isValid && m_disabled_isValid && m_state_isValid && m_position_isValid && m_position_mode_isValid && m_workzone_isValid && m_bands_isValid && true;
}

} // namespace OAService
