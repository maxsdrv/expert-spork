/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceSet_position_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceSet_position_request::OAServiceSet_position_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceSet_position_request::OAServiceSet_position_request() {
    this->initializeModel();
}

OAServiceSet_position_request::~OAServiceSet_position_request() {}

void OAServiceSet_position_request::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;
}

void OAServiceSet_position_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceSet_position_request::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OAService::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_position_isValid = ::OAService::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;
}

QString OAServiceSet_position_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceSet_position_request::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OAService::toJsonValue(m_id));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OAService::toJsonValue(m_position));
    }
    return obj;
}

QString OAServiceSet_position_request::getId() const {
    return m_id;
}
void OAServiceSet_position_request::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAServiceSet_position_request::is_id_Set() const{
    return m_id_isSet;
}

bool OAServiceSet_position_request::is_id_Valid() const{
    return m_id_isValid;
}

OAServiceGeo_position OAServiceSet_position_request::getPosition() const {
    return m_position;
}
void OAServiceSet_position_request::setPosition(const OAServiceGeo_position &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAServiceSet_position_request::is_position_Set() const{
    return m_position_isSet;
}

bool OAServiceSet_position_request::is_position_Valid() const{
    return m_position_isValid;
}

bool OAServiceSet_position_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceSet_position_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_position_isValid && true;
}

} // namespace OAService
