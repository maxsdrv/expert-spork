/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceWs_reply.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceWs_reply::OAServiceWs_reply(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceWs_reply::OAServiceWs_reply() {
    this->initializeModel();
}

OAServiceWs_reply::~OAServiceWs_reply() {}

void OAServiceWs_reply::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_http_code_isSet = false;
    m_http_code_isValid = false;

    m_reply_text_isSet = false;
    m_reply_text_isValid = false;
}

void OAServiceWs_reply::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceWs_reply::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OAService::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_http_code_isValid = ::OAService::fromJsonValue(m_http_code, json[QString("http_code")]);
    m_http_code_isSet = !json[QString("http_code")].isNull() && m_http_code_isValid;

    m_reply_text_isValid = ::OAService::fromJsonValue(m_reply_text, json[QString("reply_text")]);
    m_reply_text_isSet = !json[QString("reply_text")].isNull() && m_reply_text_isValid;
}

QString OAServiceWs_reply::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceWs_reply::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OAService::toJsonValue(m_id));
    }
    if (m_http_code_isSet) {
        obj.insert(QString("http_code"), ::OAService::toJsonValue(m_http_code));
    }
    if (m_reply_text_isSet) {
        obj.insert(QString("reply_text"), ::OAService::toJsonValue(m_reply_text));
    }
    return obj;
}

QJsonValue OAServiceWs_reply::getId() const {
    return m_id;
}
void OAServiceWs_reply::setId(const QJsonValue &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAServiceWs_reply::is_id_Set() const{
    return m_id_isSet;
}

bool OAServiceWs_reply::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAServiceWs_reply::getHttpCode() const {
    return m_http_code;
}
void OAServiceWs_reply::setHttpCode(const qint32 &http_code) {
    m_http_code = http_code;
    m_http_code_isSet = true;
}

bool OAServiceWs_reply::is_http_code_Set() const{
    return m_http_code_isSet;
}

bool OAServiceWs_reply::is_http_code_Valid() const{
    return m_http_code_isValid;
}

QString OAServiceWs_reply::getReplyText() const {
    return m_reply_text;
}
void OAServiceWs_reply::setReplyText(const QString &reply_text) {
    m_reply_text = reply_text;
    m_reply_text_isSet = true;
}

bool OAServiceWs_reply::is_reply_text_Set() const{
    return m_reply_text_isSet;
}

bool OAServiceWs_reply::is_reply_text_Valid() const{
    return m_reply_text_isValid;
}

bool OAServiceWs_reply::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceWs_reply::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_http_code_isValid && m_reply_text_isValid && true;
}

} // namespace OAService
