/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceTrack_list.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceTrack_list::OAServiceTrack_list(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceTrack_list::OAServiceTrack_list() {
    this->initializeModel();
}

OAServiceTrack_list::~OAServiceTrack_list() {}

void OAServiceTrack_list::initializeModel() {

    m_tracks_isSet = false;
    m_tracks_isValid = false;
}

void OAServiceTrack_list::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceTrack_list::fromJsonObject(QJsonObject json) {

    m_tracks_isValid = ::OAService::fromJsonValue(m_tracks, json[QString("tracks")]);
    m_tracks_isSet = !json[QString("tracks")].isNull() && m_tracks_isValid;
}

QString OAServiceTrack_list::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceTrack_list::asJsonObject() const {
    QJsonObject obj;
    if (m_tracks.size() > 0) {
        obj.insert(QString("tracks"), ::OAService::toJsonValue(m_tracks));
    }
    return obj;
}

QList<OAServiceTrack_data> OAServiceTrack_list::getTracks() const {
    return m_tracks;
}
void OAServiceTrack_list::setTracks(const QList<OAServiceTrack_data> &tracks) {
    m_tracks = tracks;
    m_tracks_isSet = true;
}

bool OAServiceTrack_list::is_tracks_Set() const{
    return m_tracks_isSet;
}

bool OAServiceTrack_list::is_tracks_Valid() const{
    return m_tracks_isValid;
}

bool OAServiceTrack_list::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tracks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceTrack_list::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tracks_isValid && true;
}

} // namespace OAService
