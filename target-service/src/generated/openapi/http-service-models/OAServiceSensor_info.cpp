/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceSensor_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceSensor_info::OAServiceSensor_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceSensor_info::OAServiceSensor_info() {
    this->initializeModel();
}

OAServiceSensor_info::~OAServiceSensor_info() {}

void OAServiceSensor_info::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_sw_version_isSet = false;
    m_sw_version_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_position_mode_isSet = false;
    m_position_mode_isValid = false;

    m_workzone_isSet = false;
    m_workzone_isValid = false;

    m_jammer_ids_isSet = false;
    m_jammer_ids_isValid = false;

    m_jammer_mode_isSet = false;
    m_jammer_mode_isValid = false;

    m_jammer_auto_timeout_isSet = false;
    m_jammer_auto_timeout_isValid = false;

    m_hw_info_isSet = false;
    m_hw_info_isValid = false;
}

void OAServiceSensor_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceSensor_info::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OAService::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::OAService::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_model_isValid = ::OAService::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_serial_isValid = ::OAService::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_sw_version_isValid = ::OAService::fromJsonValue(m_sw_version, json[QString("sw_version")]);
    m_sw_version_isSet = !json[QString("sw_version")].isNull() && m_sw_version_isValid;

    m_disabled_isValid = ::OAService::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_state_isValid = ::OAService::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_position_isValid = ::OAService::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_position_mode_isValid = ::OAService::fromJsonValue(m_position_mode, json[QString("position_mode")]);
    m_position_mode_isSet = !json[QString("position_mode")].isNull() && m_position_mode_isValid;

    m_workzone_isValid = ::OAService::fromJsonValue(m_workzone, json[QString("workzone")]);
    m_workzone_isSet = !json[QString("workzone")].isNull() && m_workzone_isValid;

    m_jammer_ids_isValid = ::OAService::fromJsonValue(m_jammer_ids, json[QString("jammer_ids")]);
    m_jammer_ids_isSet = !json[QString("jammer_ids")].isNull() && m_jammer_ids_isValid;

    m_jammer_mode_isValid = ::OAService::fromJsonValue(m_jammer_mode, json[QString("jammer_mode")]);
    m_jammer_mode_isSet = !json[QString("jammer_mode")].isNull() && m_jammer_mode_isValid;

    m_jammer_auto_timeout_isValid = ::OAService::fromJsonValue(m_jammer_auto_timeout, json[QString("jammer_auto_timeout")]);
    m_jammer_auto_timeout_isSet = !json[QString("jammer_auto_timeout")].isNull() && m_jammer_auto_timeout_isValid;

    m_hw_info_isValid = ::OAService::fromJsonValue(m_hw_info, json[QString("hw_info")]);
    m_hw_info_isSet = !json[QString("hw_info")].isNull() && m_hw_info_isValid;
}

QString OAServiceSensor_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceSensor_info::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OAService::toJsonValue(m_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OAService::toJsonValue(m_type));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OAService::toJsonValue(m_model));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OAService::toJsonValue(m_serial));
    }
    if (m_sw_version_isSet) {
        obj.insert(QString("sw_version"), ::OAService::toJsonValue(m_sw_version));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OAService::toJsonValue(m_disabled));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OAService::toJsonValue(m_state));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OAService::toJsonValue(m_position));
    }
    if (m_position_mode.isSet()) {
        obj.insert(QString("position_mode"), ::OAService::toJsonValue(m_position_mode));
    }
    if (m_workzone.size() > 0) {
        obj.insert(QString("workzone"), ::OAService::toJsonValue(m_workzone));
    }
    if (m_jammer_ids.size() > 0) {
        obj.insert(QString("jammer_ids"), ::OAService::toJsonValue(m_jammer_ids));
    }
    if (m_jammer_mode.isSet()) {
        obj.insert(QString("jammer_mode"), ::OAService::toJsonValue(m_jammer_mode));
    }
    if (m_jammer_auto_timeout_isSet) {
        obj.insert(QString("jammer_auto_timeout"), ::OAService::toJsonValue(m_jammer_auto_timeout));
    }
    if (m_hw_info.isSet()) {
        obj.insert(QString("hw_info"), ::OAService::toJsonValue(m_hw_info));
    }
    return obj;
}

QString OAServiceSensor_info::getId() const {
    return m_id;
}
void OAServiceSensor_info::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAServiceSensor_info::is_id_Set() const{
    return m_id_isSet;
}

bool OAServiceSensor_info::is_id_Valid() const{
    return m_id_isValid;
}

OAServiceSensor_type OAServiceSensor_info::getType() const {
    return m_type;
}
void OAServiceSensor_info::setType(const OAServiceSensor_type &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAServiceSensor_info::is_type_Set() const{
    return m_type_isSet;
}

bool OAServiceSensor_info::is_type_Valid() const{
    return m_type_isValid;
}

QString OAServiceSensor_info::getModel() const {
    return m_model;
}
void OAServiceSensor_info::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAServiceSensor_info::is_model_Set() const{
    return m_model_isSet;
}

bool OAServiceSensor_info::is_model_Valid() const{
    return m_model_isValid;
}

QString OAServiceSensor_info::getSerial() const {
    return m_serial;
}
void OAServiceSensor_info::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAServiceSensor_info::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAServiceSensor_info::is_serial_Valid() const{
    return m_serial_isValid;
}

QString OAServiceSensor_info::getSwVersion() const {
    return m_sw_version;
}
void OAServiceSensor_info::setSwVersion(const QString &sw_version) {
    m_sw_version = sw_version;
    m_sw_version_isSet = true;
}

bool OAServiceSensor_info::is_sw_version_Set() const{
    return m_sw_version_isSet;
}

bool OAServiceSensor_info::is_sw_version_Valid() const{
    return m_sw_version_isValid;
}

bool OAServiceSensor_info::isDisabled() const {
    return m_disabled;
}
void OAServiceSensor_info::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAServiceSensor_info::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAServiceSensor_info::is_disabled_Valid() const{
    return m_disabled_isValid;
}

OAServiceState OAServiceSensor_info::getState() const {
    return m_state;
}
void OAServiceSensor_info::setState(const OAServiceState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAServiceSensor_info::is_state_Set() const{
    return m_state_isSet;
}

bool OAServiceSensor_info::is_state_Valid() const{
    return m_state_isValid;
}

OAServiceGeo_position OAServiceSensor_info::getPosition() const {
    return m_position;
}
void OAServiceSensor_info::setPosition(const OAServiceGeo_position &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAServiceSensor_info::is_position_Set() const{
    return m_position_isSet;
}

bool OAServiceSensor_info::is_position_Valid() const{
    return m_position_isValid;
}

OAServiceGeo_position_mode OAServiceSensor_info::getPositionMode() const {
    return m_position_mode;
}
void OAServiceSensor_info::setPositionMode(const OAServiceGeo_position_mode &position_mode) {
    m_position_mode = position_mode;
    m_position_mode_isSet = true;
}

bool OAServiceSensor_info::is_position_mode_Set() const{
    return m_position_mode_isSet;
}

bool OAServiceSensor_info::is_position_mode_Valid() const{
    return m_position_mode_isValid;
}

QList<OAServiceWorkzone_sector> OAServiceSensor_info::getWorkzone() const {
    return m_workzone;
}
void OAServiceSensor_info::setWorkzone(const QList<OAServiceWorkzone_sector> &workzone) {
    m_workzone = workzone;
    m_workzone_isSet = true;
}

bool OAServiceSensor_info::is_workzone_Set() const{
    return m_workzone_isSet;
}

bool OAServiceSensor_info::is_workzone_Valid() const{
    return m_workzone_isValid;
}

QList<QString> OAServiceSensor_info::getJammerIds() const {
    return m_jammer_ids;
}
void OAServiceSensor_info::setJammerIds(const QList<QString> &jammer_ids) {
    m_jammer_ids = jammer_ids;
    m_jammer_ids_isSet = true;
}

bool OAServiceSensor_info::is_jammer_ids_Set() const{
    return m_jammer_ids_isSet;
}

bool OAServiceSensor_info::is_jammer_ids_Valid() const{
    return m_jammer_ids_isValid;
}

OAServiceJammer_mode OAServiceSensor_info::getJammerMode() const {
    return m_jammer_mode;
}
void OAServiceSensor_info::setJammerMode(const OAServiceJammer_mode &jammer_mode) {
    m_jammer_mode = jammer_mode;
    m_jammer_mode_isSet = true;
}

bool OAServiceSensor_info::is_jammer_mode_Set() const{
    return m_jammer_mode_isSet;
}

bool OAServiceSensor_info::is_jammer_mode_Valid() const{
    return m_jammer_mode_isValid;
}

qint32 OAServiceSensor_info::getJammerAutoTimeout() const {
    return m_jammer_auto_timeout;
}
void OAServiceSensor_info::setJammerAutoTimeout(const qint32 &jammer_auto_timeout) {
    m_jammer_auto_timeout = jammer_auto_timeout;
    m_jammer_auto_timeout_isSet = true;
}

bool OAServiceSensor_info::is_jammer_auto_timeout_Set() const{
    return m_jammer_auto_timeout_isSet;
}

bool OAServiceSensor_info::is_jammer_auto_timeout_Valid() const{
    return m_jammer_auto_timeout_isValid;
}

OAServiceHw_info OAServiceSensor_info::getHwInfo() const {
    return m_hw_info;
}
void OAServiceSensor_info::setHwInfo(const OAServiceHw_info &hw_info) {
    m_hw_info = hw_info;
    m_hw_info_isSet = true;
}

bool OAServiceSensor_info::is_hw_info_Set() const{
    return m_hw_info_isSet;
}

bool OAServiceSensor_info::is_hw_info_Valid() const{
    return m_hw_info_isValid;
}

bool OAServiceSensor_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sw_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workzone.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_jammer_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_jammer_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jammer_auto_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hw_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceSensor_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_type_isValid && m_model_isValid && m_disabled_isValid && m_state_isValid && m_position_isValid && m_position_mode_isValid && m_workzone_isValid && true;
}

} // namespace OAService
