/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceJammer_timeout_status.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceJammer_timeout_status::OAServiceJammer_timeout_status(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceJammer_timeout_status::OAServiceJammer_timeout_status() {
    this->initializeModel();
}

OAServiceJammer_timeout_status::~OAServiceJammer_timeout_status() {}

void OAServiceJammer_timeout_status::initializeModel() {

    m_started_isSet = false;
    m_started_isValid = false;

    m_now_isSet = false;
    m_now_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;
}

void OAServiceJammer_timeout_status::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceJammer_timeout_status::fromJsonObject(QJsonObject json) {

    m_started_isValid = ::OAService::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;

    m_now_isValid = ::OAService::fromJsonValue(m_now, json[QString("now")]);
    m_now_isSet = !json[QString("now")].isNull() && m_now_isValid;

    m_duration_isValid = ::OAService::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;
}

QString OAServiceJammer_timeout_status::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceJammer_timeout_status::asJsonObject() const {
    QJsonObject obj;
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OAService::toJsonValue(m_started));
    }
    if (m_now_isSet) {
        obj.insert(QString("now"), ::OAService::toJsonValue(m_now));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OAService::toJsonValue(m_duration));
    }
    return obj;
}

QDateTime OAServiceJammer_timeout_status::getStarted() const {
    return m_started;
}
void OAServiceJammer_timeout_status::setStarted(const QDateTime &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAServiceJammer_timeout_status::is_started_Set() const{
    return m_started_isSet;
}

bool OAServiceJammer_timeout_status::is_started_Valid() const{
    return m_started_isValid;
}

QDateTime OAServiceJammer_timeout_status::getNow() const {
    return m_now;
}
void OAServiceJammer_timeout_status::setNow(const QDateTime &now) {
    m_now = now;
    m_now_isSet = true;
}

bool OAServiceJammer_timeout_status::is_now_Set() const{
    return m_now_isSet;
}

bool OAServiceJammer_timeout_status::is_now_Valid() const{
    return m_now_isValid;
}

qint32 OAServiceJammer_timeout_status::getDuration() const {
    return m_duration;
}
void OAServiceJammer_timeout_status::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAServiceJammer_timeout_status::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAServiceJammer_timeout_status::is_duration_Valid() const{
    return m_duration_isValid;
}

bool OAServiceJammer_timeout_status::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_now_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceJammer_timeout_status::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_started_isValid && m_now_isValid && m_duration_isValid && true;
}

} // namespace OAService
