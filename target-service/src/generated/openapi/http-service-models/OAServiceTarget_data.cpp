/**
 * DDS Provider REST API
 * REST API of `dds-target-provider`.
 *
 * The version of the OpenAPI document: 2.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAServiceTarget_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAServiceHelpers.h"

namespace OAService {

OAServiceTarget_data::OAServiceTarget_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAServiceTarget_data::OAServiceTarget_data() {
    this->initializeModel();
}

OAServiceTarget_data::~OAServiceTarget_data() {}

void OAServiceTarget_data::initializeModel() {

    m_target_id_isSet = false;
    m_target_id_isValid = false;

    m_sensor_id_isSet = false;
    m_sensor_id_isValid = false;

    m_track_id_isSet = false;
    m_track_id_isValid = false;

    m_camera_track_isSet = false;
    m_camera_track_isValid = false;

    m_alarm_ids_isSet = false;
    m_alarm_ids_isValid = false;

    m_cls_ids_isSet = false;
    m_cls_ids_isValid = false;

    m_class_name_isSet = false;
    m_class_name_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_alarm_status_isSet = false;
    m_alarm_status_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;
}

void OAServiceTarget_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAServiceTarget_data::fromJsonObject(QJsonObject json) {

    m_target_id_isValid = ::OAService::fromJsonValue(m_target_id, json[QString("target_id")]);
    m_target_id_isSet = !json[QString("target_id")].isNull() && m_target_id_isValid;

    m_sensor_id_isValid = ::OAService::fromJsonValue(m_sensor_id, json[QString("sensor_id")]);
    m_sensor_id_isSet = !json[QString("sensor_id")].isNull() && m_sensor_id_isValid;

    m_track_id_isValid = ::OAService::fromJsonValue(m_track_id, json[QString("track_id")]);
    m_track_id_isSet = !json[QString("track_id")].isNull() && m_track_id_isValid;

    m_camera_track_isValid = ::OAService::fromJsonValue(m_camera_track, json[QString("camera_track")]);
    m_camera_track_isSet = !json[QString("camera_track")].isNull() && m_camera_track_isValid;

    m_alarm_ids_isValid = ::OAService::fromJsonValue(m_alarm_ids, json[QString("alarm_ids")]);
    m_alarm_ids_isSet = !json[QString("alarm_ids")].isNull() && m_alarm_ids_isValid;

    m_cls_ids_isValid = ::OAService::fromJsonValue(m_cls_ids, json[QString("cls_ids")]);
    m_cls_ids_isSet = !json[QString("cls_ids")].isNull() && m_cls_ids_isValid;

    m_class_name_isValid = ::OAService::fromJsonValue(m_class_name, json[QString("class_name")]);
    m_class_name_isSet = !json[QString("class_name")].isNull() && m_class_name_isValid;

    m_attributes_isValid = ::OAService::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_alarm_status_isValid = ::OAService::fromJsonValue(m_alarm_status, json[QString("alarm_status")]);
    m_alarm_status_isSet = !json[QString("alarm_status")].isNull() && m_alarm_status_isValid;

    m_position_isValid = ::OAService::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_last_updated_isValid = ::OAService::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;
}

QString OAServiceTarget_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAServiceTarget_data::asJsonObject() const {
    QJsonObject obj;
    if (m_target_id_isSet) {
        obj.insert(QString("target_id"), ::OAService::toJsonValue(m_target_id));
    }
    if (m_sensor_id_isSet) {
        obj.insert(QString("sensor_id"), ::OAService::toJsonValue(m_sensor_id));
    }
    if (m_track_id_isSet) {
        obj.insert(QString("track_id"), ::OAService::toJsonValue(m_track_id));
    }
    if (m_camera_track.isSet()) {
        obj.insert(QString("camera_track"), ::OAService::toJsonValue(m_camera_track));
    }
    if (m_alarm_ids.size() > 0) {
        obj.insert(QString("alarm_ids"), ::OAService::toJsonValue(m_alarm_ids));
    }
    if (m_cls_ids.size() > 0) {
        obj.insert(QString("cls_ids"), ::OAService::toJsonValue(m_cls_ids));
    }
    if (m_class_name.isSet()) {
        obj.insert(QString("class_name"), ::OAService::toJsonValue(m_class_name));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OAService::toJsonValue(m_attributes));
    }
    if (m_alarm_status.isSet()) {
        obj.insert(QString("alarm_status"), ::OAService::toJsonValue(m_alarm_status));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OAService::toJsonValue(m_position));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OAService::toJsonValue(m_last_updated));
    }
    return obj;
}

QString OAServiceTarget_data::getTargetId() const {
    return m_target_id;
}
void OAServiceTarget_data::setTargetId(const QString &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAServiceTarget_data::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAServiceTarget_data::is_target_id_Valid() const{
    return m_target_id_isValid;
}

QString OAServiceTarget_data::getSensorId() const {
    return m_sensor_id;
}
void OAServiceTarget_data::setSensorId(const QString &sensor_id) {
    m_sensor_id = sensor_id;
    m_sensor_id_isSet = true;
}

bool OAServiceTarget_data::is_sensor_id_Set() const{
    return m_sensor_id_isSet;
}

bool OAServiceTarget_data::is_sensor_id_Valid() const{
    return m_sensor_id_isValid;
}

QString OAServiceTarget_data::getTrackId() const {
    return m_track_id;
}
void OAServiceTarget_data::setTrackId(const QString &track_id) {
    m_track_id = track_id;
    m_track_id_isSet = true;
}

bool OAServiceTarget_data::is_track_id_Set() const{
    return m_track_id_isSet;
}

bool OAServiceTarget_data::is_track_id_Valid() const{
    return m_track_id_isValid;
}

OAServiceCamera_track OAServiceTarget_data::getCameraTrack() const {
    return m_camera_track;
}
void OAServiceTarget_data::setCameraTrack(const OAServiceCamera_track &camera_track) {
    m_camera_track = camera_track;
    m_camera_track_isSet = true;
}

bool OAServiceTarget_data::is_camera_track_Set() const{
    return m_camera_track_isSet;
}

bool OAServiceTarget_data::is_camera_track_Valid() const{
    return m_camera_track_isValid;
}

QList<QString> OAServiceTarget_data::getAlarmIds() const {
    return m_alarm_ids;
}
void OAServiceTarget_data::setAlarmIds(const QList<QString> &alarm_ids) {
    m_alarm_ids = alarm_ids;
    m_alarm_ids_isSet = true;
}

bool OAServiceTarget_data::is_alarm_ids_Set() const{
    return m_alarm_ids_isSet;
}

bool OAServiceTarget_data::is_alarm_ids_Valid() const{
    return m_alarm_ids_isValid;
}

QList<QString> OAServiceTarget_data::getClsIds() const {
    return m_cls_ids;
}
void OAServiceTarget_data::setClsIds(const QList<QString> &cls_ids) {
    m_cls_ids = cls_ids;
    m_cls_ids_isSet = true;
}

bool OAServiceTarget_data::is_cls_ids_Set() const{
    return m_cls_ids_isSet;
}

bool OAServiceTarget_data::is_cls_ids_Valid() const{
    return m_cls_ids_isValid;
}

OAServiceClass_name OAServiceTarget_data::getClassName() const {
    return m_class_name;
}
void OAServiceTarget_data::setClassName(const OAServiceClass_name &class_name) {
    m_class_name = class_name;
    m_class_name_isSet = true;
}

bool OAServiceTarget_data::is_class_name_Set() const{
    return m_class_name_isSet;
}

bool OAServiceTarget_data::is_class_name_Valid() const{
    return m_class_name_isValid;
}

OAServiceTarget_data_attributes OAServiceTarget_data::getAttributes() const {
    return m_attributes;
}
void OAServiceTarget_data::setAttributes(const OAServiceTarget_data_attributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAServiceTarget_data::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAServiceTarget_data::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAServiceAlarm_status OAServiceTarget_data::getAlarmStatus() const {
    return m_alarm_status;
}
void OAServiceTarget_data::setAlarmStatus(const OAServiceAlarm_status &alarm_status) {
    m_alarm_status = alarm_status;
    m_alarm_status_isSet = true;
}

bool OAServiceTarget_data::is_alarm_status_Set() const{
    return m_alarm_status_isSet;
}

bool OAServiceTarget_data::is_alarm_status_Valid() const{
    return m_alarm_status_isValid;
}

OAServiceTarget_data_position OAServiceTarget_data::getPosition() const {
    return m_position;
}
void OAServiceTarget_data::setPosition(const OAServiceTarget_data_position &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAServiceTarget_data::is_position_Set() const{
    return m_position_isSet;
}

bool OAServiceTarget_data::is_position_Valid() const{
    return m_position_isValid;
}

QDateTime OAServiceTarget_data::getLastUpdated() const {
    return m_last_updated;
}
void OAServiceTarget_data::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAServiceTarget_data::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAServiceTarget_data::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

bool OAServiceTarget_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_camera_track.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cls_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAServiceTarget_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_id_isValid && m_class_name_isValid && m_alarm_status_isValid && m_last_updated_isValid && true;
}

} // namespace OAService
