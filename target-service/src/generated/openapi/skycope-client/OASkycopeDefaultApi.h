/**
 * 
 * Description text
 *
 * The version of the OpenAPI document: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OASkycope_OASkycopeDefaultApi_H
#define OASkycope_OASkycopeDefaultApi_H

#include "OASkycopeHelpers.h"
#include "OASkycopeHttpRequest.h"
#include "OASkycopeServerConfiguration.h"
#include "OASkycopeOauth.h"

#include "OASkycopeAuth_token.h"
#include "OASkycopeMassDefense.h"
#include "OASkycopeModel.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OASkycope {

class OASkycopeDefaultApi : public QObject {
    Q_OBJECT

public:
    OASkycopeDefaultApi(const int timeOut = 0);
    ~OASkycopeDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OASkycopeServerVariable> &variables = QMap<QString, OASkycopeServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OASkycopeServerVariable> &variables =  QMap<QString, OASkycopeServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OASkycopeServerVariable> &variables =  QMap<QString, OASkycopeServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteAutoDefense(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteMassDefense(const QString &id);

    /**
    * @param[in]  full QString [required]
    * @param[in]  ts QString [required]
    * @param[in]  uuid QString [required]
    */
    virtual void getData(const QString &full, const QString &ts, const QString &uuid);


    virtual void getDefenseData();


    virtual void login();

    /**
    * @param[in]  id QString [required]
    */
    virtual void postAutoDefense(const QString &id);

    /**
    * @param[in]  oa_skycope_model OASkycopeModel [required]
    */
    virtual void postData(const OASkycopeModel &oa_skycope_model);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oa_skycope_mass_defense OASkycopeMassDefense [required]
    */
    virtual void postDefenseData(const QString &id, const OASkycopeMassDefense &oa_skycope_mass_defense);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OASkycopeServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OASkycopeHttpRequestInput _latestInput;
    OASkycopeHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteAutoDefenseCallback(OASkycopeHttpRequestWorker *worker);
    void deleteMassDefenseCallback(OASkycopeHttpRequestWorker *worker);
    void getDataCallback(OASkycopeHttpRequestWorker *worker);
    void getDefenseDataCallback(OASkycopeHttpRequestWorker *worker);
    void loginCallback(OASkycopeHttpRequestWorker *worker);
    void postAutoDefenseCallback(OASkycopeHttpRequestWorker *worker);
    void postDataCallback(OASkycopeHttpRequestWorker *worker);
    void postDefenseDataCallback(OASkycopeHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteAutoDefenseSignal();
    void deleteMassDefenseSignal();
    void getDataSignal(OASkycopeModel summary);
    void getDefenseDataSignal(QMap<QString, OASkycopeMassDefense> summary);
    void loginSignal(OASkycopeAuth_token summary);
    void postAutoDefenseSignal();
    void postDataSignal();
    void postDefenseDataSignal();


    void deleteAutoDefenseSignalFull(OASkycopeHttpRequestWorker *worker);
    void deleteMassDefenseSignalFull(OASkycopeHttpRequestWorker *worker);
    void getDataSignalFull(OASkycopeHttpRequestWorker *worker, OASkycopeModel summary);
    void getDefenseDataSignalFull(OASkycopeHttpRequestWorker *worker, QMap<QString, OASkycopeMassDefense> summary);
    void loginSignalFull(OASkycopeHttpRequestWorker *worker, OASkycopeAuth_token summary);
    void postAutoDefenseSignalFull(OASkycopeHttpRequestWorker *worker);
    void postDataSignalFull(OASkycopeHttpRequestWorker *worker);
    void postDefenseDataSignalFull(OASkycopeHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteAutoDefenseSignalError() instead")
    void deleteAutoDefenseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAutoDefenseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMassDefenseSignalError() instead")
    void deleteMassDefenseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMassDefenseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDataSignalError() instead")
    void getDataSignalE(OASkycopeModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDataSignalError(OASkycopeModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefenseDataSignalError() instead")
    void getDefenseDataSignalE(QMap<QString, OASkycopeMassDefense> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefenseDataSignalError(QMap<QString, OASkycopeMassDefense> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginSignalError() instead")
    void loginSignalE(OASkycopeAuth_token summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalError(OASkycopeAuth_token summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAutoDefenseSignalError() instead")
    void postAutoDefenseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postAutoDefenseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDataSignalError() instead")
    void postDataSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postDataSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDefenseDataSignalError() instead")
    void postDefenseDataSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postDefenseDataSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteAutoDefenseSignalErrorFull() instead")
    void deleteAutoDefenseSignalEFull(OASkycopeHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAutoDefenseSignalErrorFull(OASkycopeHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMassDefenseSignalErrorFull() instead")
    void deleteMassDefenseSignalEFull(OASkycopeHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMassDefenseSignalErrorFull(OASkycopeHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDataSignalErrorFull() instead")
    void getDataSignalEFull(OASkycopeHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDataSignalErrorFull(OASkycopeHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefenseDataSignalErrorFull() instead")
    void getDefenseDataSignalEFull(OASkycopeHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefenseDataSignalErrorFull(OASkycopeHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginSignalErrorFull() instead")
    void loginSignalEFull(OASkycopeHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalErrorFull(OASkycopeHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAutoDefenseSignalErrorFull() instead")
    void postAutoDefenseSignalEFull(OASkycopeHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAutoDefenseSignalErrorFull(OASkycopeHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDataSignalErrorFull() instead")
    void postDataSignalEFull(OASkycopeHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDataSignalErrorFull(OASkycopeHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDefenseDataSignalErrorFull() instead")
    void postDefenseDataSignalEFull(OASkycopeHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDefenseDataSignalErrorFull(OASkycopeHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OASkycope
#endif
