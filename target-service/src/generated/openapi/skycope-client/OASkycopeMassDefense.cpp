/**
 * 
 * Description text
 *
 * The version of the OpenAPI document: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OASkycopeMassDefense.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OASkycopeHelpers.h"

namespace OASkycope {

OASkycopeMassDefense::OASkycopeMassDefense(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OASkycopeMassDefense::OASkycopeMassDefense() {
    this->initializeModel();
}

OASkycopeMassDefense::~OASkycopeMassDefense() {}

void OASkycopeMassDefense::initializeModel() {

    m_azimuth_isSet = false;
    m_azimuth_isValid = false;

    m_current_isSet = false;
    m_current_isValid = false;

    m_directional_defense_isSet = false;
    m_directional_defense_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_frequency_options_isSet = false;
    m_frequency_options_isValid = false;

    m_in_progress_isSet = false;
    m_in_progress_isValid = false;

    m_sensor_name_isSet = false;
    m_sensor_name_isValid = false;

    m_strategy_isSet = false;
    m_strategy_isValid = false;

    m_timing_options_isSet = false;
    m_timing_options_isValid = false;
}

void OASkycopeMassDefense::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OASkycopeMassDefense::fromJsonObject(QJsonObject json) {

    m_azimuth_isValid = ::OASkycope::fromJsonValue(m_azimuth, json[QString("azimuth")]);
    m_azimuth_isSet = !json[QString("azimuth")].isNull() && m_azimuth_isValid;

    m_current_isValid = ::OASkycope::fromJsonValue(m_current, json[QString("current")]);
    m_current_isSet = !json[QString("current")].isNull() && m_current_isValid;

    m_directional_defense_isValid = ::OASkycope::fromJsonValue(m_directional_defense, json[QString("directional_defense")]);
    m_directional_defense_isSet = !json[QString("directional_defense")].isNull() && m_directional_defense_isValid;

    m_duration_isValid = ::OASkycope::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_frequency_isValid = ::OASkycope::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_frequency_options_isValid = ::OASkycope::fromJsonValue(m_frequency_options, json[QString("frequencyOptions")]);
    m_frequency_options_isSet = !json[QString("frequencyOptions")].isNull() && m_frequency_options_isValid;

    m_in_progress_isValid = ::OASkycope::fromJsonValue(m_in_progress, json[QString("in_progress")]);
    m_in_progress_isSet = !json[QString("in_progress")].isNull() && m_in_progress_isValid;

    m_sensor_name_isValid = ::OASkycope::fromJsonValue(m_sensor_name, json[QString("sensor_name")]);
    m_sensor_name_isSet = !json[QString("sensor_name")].isNull() && m_sensor_name_isValid;

    m_strategy_isValid = ::OASkycope::fromJsonValue(m_strategy, json[QString("strategy")]);
    m_strategy_isSet = !json[QString("strategy")].isNull() && m_strategy_isValid;

    m_timing_options_isValid = ::OASkycope::fromJsonValue(m_timing_options, json[QString("timingOptions")]);
    m_timing_options_isSet = !json[QString("timingOptions")].isNull() && m_timing_options_isValid;
}

QString OASkycopeMassDefense::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OASkycopeMassDefense::asJsonObject() const {
    QJsonObject obj;
    if (m_azimuth_isSet) {
        obj.insert(QString("azimuth"), ::OASkycope::toJsonValue(m_azimuth));
    }
    if (m_current_isSet) {
        obj.insert(QString("current"), ::OASkycope::toJsonValue(m_current));
    }
    if (m_directional_defense_isSet) {
        obj.insert(QString("directional_defense"), ::OASkycope::toJsonValue(m_directional_defense));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OASkycope::toJsonValue(m_duration));
    }
    if (m_frequency.size() > 0) {
        obj.insert(QString("frequency"), ::OASkycope::toJsonValue(m_frequency));
    }
    if (m_frequency_options.size() > 0) {
        obj.insert(QString("frequencyOptions"), ::OASkycope::toJsonValue(m_frequency_options));
    }
    if (m_in_progress_isSet) {
        obj.insert(QString("in_progress"), ::OASkycope::toJsonValue(m_in_progress));
    }
    if (m_sensor_name_isSet) {
        obj.insert(QString("sensor_name"), ::OASkycope::toJsonValue(m_sensor_name));
    }
    if (m_strategy_isSet) {
        obj.insert(QString("strategy"), ::OASkycope::toJsonValue(m_strategy));
    }
    if (m_timing_options.size() > 0) {
        obj.insert(QString("timingOptions"), ::OASkycope::toJsonValue(m_timing_options));
    }
    return obj;
}

qint32 OASkycopeMassDefense::getAzimuth() const {
    return m_azimuth;
}
void OASkycopeMassDefense::setAzimuth(const qint32 &azimuth) {
    m_azimuth = azimuth;
    m_azimuth_isSet = true;
}

bool OASkycopeMassDefense::is_azimuth_Set() const{
    return m_azimuth_isSet;
}

bool OASkycopeMassDefense::is_azimuth_Valid() const{
    return m_azimuth_isValid;
}

qint32 OASkycopeMassDefense::getCurrent() const {
    return m_current;
}
void OASkycopeMassDefense::setCurrent(const qint32 &current) {
    m_current = current;
    m_current_isSet = true;
}

bool OASkycopeMassDefense::is_current_Set() const{
    return m_current_isSet;
}

bool OASkycopeMassDefense::is_current_Valid() const{
    return m_current_isValid;
}

bool OASkycopeMassDefense::isDirectionalDefense() const {
    return m_directional_defense;
}
void OASkycopeMassDefense::setDirectionalDefense(const bool &directional_defense) {
    m_directional_defense = directional_defense;
    m_directional_defense_isSet = true;
}

bool OASkycopeMassDefense::is_directional_defense_Set() const{
    return m_directional_defense_isSet;
}

bool OASkycopeMassDefense::is_directional_defense_Valid() const{
    return m_directional_defense_isValid;
}

qint32 OASkycopeMassDefense::getDuration() const {
    return m_duration;
}
void OASkycopeMassDefense::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OASkycopeMassDefense::is_duration_Set() const{
    return m_duration_isSet;
}

bool OASkycopeMassDefense::is_duration_Valid() const{
    return m_duration_isValid;
}

QList<QString> OASkycopeMassDefense::getFrequency() const {
    return m_frequency;
}
void OASkycopeMassDefense::setFrequency(const QList<QString> &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OASkycopeMassDefense::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OASkycopeMassDefense::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QList<OASkycopeFrequencyOption> OASkycopeMassDefense::getFrequencyOptions() const {
    return m_frequency_options;
}
void OASkycopeMassDefense::setFrequencyOptions(const QList<OASkycopeFrequencyOption> &frequency_options) {
    m_frequency_options = frequency_options;
    m_frequency_options_isSet = true;
}

bool OASkycopeMassDefense::is_frequency_options_Set() const{
    return m_frequency_options_isSet;
}

bool OASkycopeMassDefense::is_frequency_options_Valid() const{
    return m_frequency_options_isValid;
}

bool OASkycopeMassDefense::isInProgress() const {
    return m_in_progress;
}
void OASkycopeMassDefense::setInProgress(const bool &in_progress) {
    m_in_progress = in_progress;
    m_in_progress_isSet = true;
}

bool OASkycopeMassDefense::is_in_progress_Set() const{
    return m_in_progress_isSet;
}

bool OASkycopeMassDefense::is_in_progress_Valid() const{
    return m_in_progress_isValid;
}

QString OASkycopeMassDefense::getSensorName() const {
    return m_sensor_name;
}
void OASkycopeMassDefense::setSensorName(const QString &sensor_name) {
    m_sensor_name = sensor_name;
    m_sensor_name_isSet = true;
}

bool OASkycopeMassDefense::is_sensor_name_Set() const{
    return m_sensor_name_isSet;
}

bool OASkycopeMassDefense::is_sensor_name_Valid() const{
    return m_sensor_name_isValid;
}

QString OASkycopeMassDefense::getStrategy() const {
    return m_strategy;
}
void OASkycopeMassDefense::setStrategy(const QString &strategy) {
    m_strategy = strategy;
    m_strategy_isSet = true;
}

bool OASkycopeMassDefense::is_strategy_Set() const{
    return m_strategy_isSet;
}

bool OASkycopeMassDefense::is_strategy_Valid() const{
    return m_strategy_isValid;
}

QList<qint32> OASkycopeMassDefense::getTimingOptions() const {
    return m_timing_options;
}
void OASkycopeMassDefense::setTimingOptions(const QList<qint32> &timing_options) {
    m_timing_options = timing_options;
    m_timing_options_isSet = true;
}

bool OASkycopeMassDefense::is_timing_options_Set() const{
    return m_timing_options_isSet;
}

bool OASkycopeMassDefense::is_timing_options_Valid() const{
    return m_timing_options_isValid;
}

bool OASkycopeMassDefense::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azimuth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directional_defense_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timing_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OASkycopeMassDefense::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_azimuth_isValid && m_directional_defense_isValid && m_duration_isValid && m_frequency_isValid && m_frequency_options_isValid && m_in_progress_isValid && m_sensor_name_isValid && m_strategy_isValid && m_timing_options_isValid && true;
}

} // namespace OASkycope
