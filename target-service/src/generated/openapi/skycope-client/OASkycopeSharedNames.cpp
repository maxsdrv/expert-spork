/**
 * 
 * Description text
 *
 * The version of the OpenAPI document: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OASkycopeSharedNames.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OASkycopeHelpers.h"

namespace OASkycope {

OASkycopeSharedNames::OASkycopeSharedNames(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OASkycopeSharedNames::OASkycopeSharedNames() {
    this->initializeModel();
}

OASkycopeSharedNames::~OASkycopeSharedNames() {}

void OASkycopeSharedNames::initializeModel() {

    m_devices_isSet = false;
    m_devices_isValid = false;

    m_ignored_devices_isSet = false;
    m_ignored_devices_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;
}

void OASkycopeSharedNames::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OASkycopeSharedNames::fromJsonObject(QJsonObject json) {

    m_devices_isValid = ::OASkycope::fromJsonValue(m_devices, json[QString("devices")]);
    m_devices_isSet = !json[QString("devices")].isNull() && m_devices_isValid;

    m_ignored_devices_isValid = ::OASkycope::fromJsonValue(m_ignored_devices, json[QString("ignored_devices")]);
    m_ignored_devices_isSet = !json[QString("ignored_devices")].isNull() && m_ignored_devices_isValid;

    m_protocol_isValid = ::OASkycope::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;
}

QString OASkycopeSharedNames::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OASkycopeSharedNames::asJsonObject() const {
    QJsonObject obj;
    if (m_devices.size() > 0) {
        obj.insert(QString("devices"), ::OASkycope::toJsonValue(m_devices));
    }
    if (m_ignored_devices_isSet) {
        obj.insert(QString("ignored_devices"), ::OASkycope::toJsonValue(m_ignored_devices));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OASkycope::toJsonValue(m_protocol));
    }
    return obj;
}

QList<QJsonValue> OASkycopeSharedNames::getDevices() const {
    return m_devices;
}
void OASkycopeSharedNames::setDevices(const QList<QJsonValue> &devices) {
    m_devices = devices;
    m_devices_isSet = true;
}

bool OASkycopeSharedNames::is_devices_Set() const{
    return m_devices_isSet;
}

bool OASkycopeSharedNames::is_devices_Valid() const{
    return m_devices_isValid;
}

QString OASkycopeSharedNames::getIgnoredDevices() const {
    return m_ignored_devices;
}
void OASkycopeSharedNames::setIgnoredDevices(const QString &ignored_devices) {
    m_ignored_devices = ignored_devices;
    m_ignored_devices_isSet = true;
}

bool OASkycopeSharedNames::is_ignored_devices_Set() const{
    return m_ignored_devices_isSet;
}

bool OASkycopeSharedNames::is_ignored_devices_Valid() const{
    return m_ignored_devices_isValid;
}

QString OASkycopeSharedNames::getProtocol() const {
    return m_protocol;
}
void OASkycopeSharedNames::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OASkycopeSharedNames::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OASkycopeSharedNames::is_protocol_Valid() const{
    return m_protocol_isValid;
}

bool OASkycopeSharedNames::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_devices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignored_devices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OASkycopeSharedNames::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OASkycope
