/**
 * 
 * Description text
 *
 * The version of the OpenAPI document: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OASkycopeModel.h
 *
 * 
 */

#ifndef OASkycopeModel_H
#define OASkycopeModel_H

#include <QJsonObject>

#include "OASkycopeDefenseStatus.h"
#include "OASkycopeDrone.h"
#include "OASkycopeDroneWifiDevice.h"
#include "OASkycopeObject.h"
#include "OASkycopeSensor.h"
#include <QMap>
#include <QString>

#include "OASkycopeEnum.h"
#include "OASkycopeObject.h"

namespace OASkycope {
class OASkycopeDefenseStatus;
class OASkycopeDrone;
class OASkycopeSensor;
class OASkycopeDroneWifiDevice;

class OASkycopeModel : public OASkycopeObject {
public:
    OASkycopeModel();
    OASkycopeModel(QString json);
    ~OASkycopeModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCenterLocation() const;
    void setCenterLocation(const QString &center_location);
    bool is_center_location_Set() const;
    bool is_center_location_Valid() const;

    bool isDbMigrationError() const;
    void setDbMigrationError(const bool &db_migration_error);
    bool is_db_migration_error_Set() const;
    bool is_db_migration_error_Valid() const;

    OASkycopeDefenseStatus getDefenseStatus() const;
    void setDefenseStatus(const OASkycopeDefenseStatus &defense_status);
    bool is_defense_status_Set() const;
    bool is_defense_status_Valid() const;

    QMap<QString, OASkycopeDrone> getDevicesInfo() const;
    void setDevicesInfo(const QMap<QString, OASkycopeDrone> &devices_info);
    bool is_devices_info_Set() const;
    bool is_devices_info_Valid() const;

    bool isDroneListEnabled() const;
    void setDroneListEnabled(const bool &drone_list_enabled);
    bool is_drone_list_enabled_Set() const;
    bool is_drone_list_enabled_Valid() const;

    qint32 getGpsLimit() const;
    void setGpsLimit(const qint32 &gps_limit);
    bool is_gps_limit_Set() const;
    bool is_gps_limit_Valid() const;

    bool isHasDanger() const;
    void setHasDanger(const bool &has_danger);
    bool is_has_danger_Set() const;
    bool is_has_danger_Valid() const;

    bool isHideDefenseFeatures() const;
    void setHideDefenseFeatures(const bool &hide_defense_features);
    bool is_hide_defense_features_Set() const;
    bool is_hide_defense_features_Valid() const;

    bool isHideDetectionPage() const;
    void setHideDetectionPage(const bool &hide_detection_page);
    bool is_hide_detection_page_Set() const;
    bool is_hide_detection_page_Valid() const;

    bool isHideSpectrumPage() const;
    void setHideSpectrumPage(const bool &hide_spectrum_page);
    bool is_hide_spectrum_page_Set() const;
    bool is_hide_spectrum_page_Valid() const;

    bool isIsAllExpired() const;
    void setIsAllExpired(const bool &is_all_expired);
    bool is_is_all_expired_Set() const;
    bool is_is_all_expired_Valid() const;

    bool isIsAnchorServer() const;
    void setIsAnchorServer(const bool &is_anchor_server);
    bool is_is_anchor_server_Set() const;
    bool is_is_anchor_server_Valid() const;

    bool isIsLocalMode() const;
    void setIsLocalMode(const bool &is_local_mode);
    bool is_is_local_mode_Set() const;
    bool is_is_local_mode_Valid() const;

    bool isIsRemoteIdEnabled() const;
    void setIsRemoteIdEnabled(const bool &is_remote_id_enabled);
    bool is_is_remote_id_enabled_Set() const;
    bool is_is_remote_id_enabled_Valid() const;

    bool isIsUnknownWifiEnabled() const;
    void setIsUnknownWifiEnabled(const bool &is_unknown_wifi_enabled);
    bool is_is_unknown_wifi_enabled_Set() const;
    bool is_is_unknown_wifi_enabled_Valid() const;

    qint32 getLfRadius() const;
    void setLfRadius(const qint32 &lf_radius);
    bool is_lf_radius_Set() const;
    bool is_lf_radius_Valid() const;

    bool isNonAiIgnorable() const;
    void setNonAiIgnorable(const bool &non_ai_ignorable);
    bool is_non_ai_ignorable_Set() const;
    bool is_non_ai_ignorable_Valid() const;

    OASkycopeObject getNondfResult() const;
    void setNondfResult(const OASkycopeObject &nondf_result);
    bool is_nondf_result_Set() const;
    bool is_nondf_result_Valid() const;

    bool isOfflineMapLoaded() const;
    void setOfflineMapLoaded(const bool &offline_map_loaded);
    bool is_offline_map_loaded_Set() const;
    bool is_offline_map_loaded_Valid() const;

    bool isOnlineMapEnabled() const;
    void setOnlineMapEnabled(const bool &online_map_enabled);
    bool is_online_map_enabled_Set() const;
    bool is_online_map_enabled_Valid() const;

    QMap<QString, OASkycopeSensor> getSensorsInfo() const;
    void setSensorsInfo(const QMap<QString, OASkycopeSensor> &sensors_info);
    bool is_sensors_info_Set() const;
    bool is_sensors_info_Valid() const;

    bool isSettingMode() const;
    void setSettingMode(const bool &setting_mode);
    bool is_setting_mode_Set() const;
    bool is_setting_mode_Valid() const;

    bool isShowEnhancedFeatures() const;
    void setShowEnhancedFeatures(const bool &show_enhanced_features);
    bool is_show_enhanced_features_Set() const;
    bool is_show_enhanced_features_Valid() const;

    qint32 getTotalDevices() const;
    void setTotalDevices(const qint32 &total_devices);
    bool is_total_devices_Set() const;
    bool is_total_devices_Valid() const;

    qint32 getTotalRemoteIds() const;
    void setTotalRemoteIds(const qint32 &total_remote_ids);
    bool is_total_remote_ids_Set() const;
    bool is_total_remote_ids_Valid() const;

    qint32 getTotalWifiDevices() const;
    void setTotalWifiDevices(const qint32 &total_wifi_devices);
    bool is_total_wifi_devices_Set() const;
    bool is_total_wifi_devices_Valid() const;

    QMap<QString, OASkycopeDroneWifiDevice> getUnknownWifiDevicesInfo() const;
    void setUnknownWifiDevicesInfo(const QMap<QString, OASkycopeDroneWifiDevice> &unknown_wifi_devices_info);
    bool is_unknown_wifi_devices_info_Set() const;
    bool is_unknown_wifi_devices_info_Valid() const;

    OASkycopeObject getUpgradeStatus() const;
    void setUpgradeStatus(const OASkycopeObject &upgrade_status);
    bool is_upgrade_status_Set() const;
    bool is_upgrade_status_Valid() const;

    OASkycopeObject getUserLocations() const;
    void setUserLocations(const OASkycopeObject &user_locations);
    bool is_user_locations_Set() const;
    bool is_user_locations_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_center_location;
    bool m_center_location_isSet;
    bool m_center_location_isValid;

    bool m_db_migration_error;
    bool m_db_migration_error_isSet;
    bool m_db_migration_error_isValid;

    OASkycopeDefenseStatus m_defense_status;
    bool m_defense_status_isSet;
    bool m_defense_status_isValid;

    QMap<QString, OASkycopeDrone> m_devices_info;
    bool m_devices_info_isSet;
    bool m_devices_info_isValid;

    bool m_drone_list_enabled;
    bool m_drone_list_enabled_isSet;
    bool m_drone_list_enabled_isValid;

    qint32 m_gps_limit;
    bool m_gps_limit_isSet;
    bool m_gps_limit_isValid;

    bool m_has_danger;
    bool m_has_danger_isSet;
    bool m_has_danger_isValid;

    bool m_hide_defense_features;
    bool m_hide_defense_features_isSet;
    bool m_hide_defense_features_isValid;

    bool m_hide_detection_page;
    bool m_hide_detection_page_isSet;
    bool m_hide_detection_page_isValid;

    bool m_hide_spectrum_page;
    bool m_hide_spectrum_page_isSet;
    bool m_hide_spectrum_page_isValid;

    bool m_is_all_expired;
    bool m_is_all_expired_isSet;
    bool m_is_all_expired_isValid;

    bool m_is_anchor_server;
    bool m_is_anchor_server_isSet;
    bool m_is_anchor_server_isValid;

    bool m_is_local_mode;
    bool m_is_local_mode_isSet;
    bool m_is_local_mode_isValid;

    bool m_is_remote_id_enabled;
    bool m_is_remote_id_enabled_isSet;
    bool m_is_remote_id_enabled_isValid;

    bool m_is_unknown_wifi_enabled;
    bool m_is_unknown_wifi_enabled_isSet;
    bool m_is_unknown_wifi_enabled_isValid;

    qint32 m_lf_radius;
    bool m_lf_radius_isSet;
    bool m_lf_radius_isValid;

    bool m_non_ai_ignorable;
    bool m_non_ai_ignorable_isSet;
    bool m_non_ai_ignorable_isValid;

    OASkycopeObject m_nondf_result;
    bool m_nondf_result_isSet;
    bool m_nondf_result_isValid;

    bool m_offline_map_loaded;
    bool m_offline_map_loaded_isSet;
    bool m_offline_map_loaded_isValid;

    bool m_online_map_enabled;
    bool m_online_map_enabled_isSet;
    bool m_online_map_enabled_isValid;

    QMap<QString, OASkycopeSensor> m_sensors_info;
    bool m_sensors_info_isSet;
    bool m_sensors_info_isValid;

    bool m_setting_mode;
    bool m_setting_mode_isSet;
    bool m_setting_mode_isValid;

    bool m_show_enhanced_features;
    bool m_show_enhanced_features_isSet;
    bool m_show_enhanced_features_isValid;

    qint32 m_total_devices;
    bool m_total_devices_isSet;
    bool m_total_devices_isValid;

    qint32 m_total_remote_ids;
    bool m_total_remote_ids_isSet;
    bool m_total_remote_ids_isValid;

    qint32 m_total_wifi_devices;
    bool m_total_wifi_devices_isSet;
    bool m_total_wifi_devices_isValid;

    QMap<QString, OASkycopeDroneWifiDevice> m_unknown_wifi_devices_info;
    bool m_unknown_wifi_devices_info_isSet;
    bool m_unknown_wifi_devices_info_isValid;

    OASkycopeObject m_upgrade_status;
    bool m_upgrade_status_isSet;
    bool m_upgrade_status_isValid;

    OASkycopeObject m_user_locations;
    bool m_user_locations_isSet;
    bool m_user_locations_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OASkycope

Q_DECLARE_METATYPE(OASkycope::OASkycopeModel)

#endif // OASkycopeModel_H
