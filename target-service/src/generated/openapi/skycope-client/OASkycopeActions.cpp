/**
 * 
 * Description text
 *
 * The version of the OpenAPI document: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OASkycopeActions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OASkycopeHelpers.h"

namespace OASkycope {

OASkycopeActions::OASkycopeActions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OASkycopeActions::OASkycopeActions() {
    this->initializeModel();
}

OASkycopeActions::~OASkycopeActions() {}

void OASkycopeActions::initializeModel() {

    m_can_cancel_defense_isSet = false;
    m_can_cancel_defense_isValid = false;

    m_can_friend_isSet = false;
    m_can_friend_isValid = false;

    m_can_ignore_isSet = false;
    m_can_ignore_isValid = false;

    m_can_ldval_test_isSet = false;
    m_can_ldval_test_isValid = false;

    m_can_manual_defend_isSet = false;
    m_can_manual_defend_isValid = false;

    m_can_smart_defend_isSet = false;
    m_can_smart_defend_isValid = false;

    m_is_decrypted_isSet = false;
    m_is_decrypted_isValid = false;

    m_is_spoofable_isSet = false;
    m_is_spoofable_isValid = false;
}

void OASkycopeActions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OASkycopeActions::fromJsonObject(QJsonObject json) {

    m_can_cancel_defense_isValid = ::OASkycope::fromJsonValue(m_can_cancel_defense, json[QString("can_cancel_defense")]);
    m_can_cancel_defense_isSet = !json[QString("can_cancel_defense")].isNull() && m_can_cancel_defense_isValid;

    m_can_friend_isValid = ::OASkycope::fromJsonValue(m_can_friend, json[QString("can_friend")]);
    m_can_friend_isSet = !json[QString("can_friend")].isNull() && m_can_friend_isValid;

    m_can_ignore_isValid = ::OASkycope::fromJsonValue(m_can_ignore, json[QString("can_ignore")]);
    m_can_ignore_isSet = !json[QString("can_ignore")].isNull() && m_can_ignore_isValid;

    m_can_ldval_test_isValid = ::OASkycope::fromJsonValue(m_can_ldval_test, json[QString("can_ldval_test")]);
    m_can_ldval_test_isSet = !json[QString("can_ldval_test")].isNull() && m_can_ldval_test_isValid;

    m_can_manual_defend_isValid = ::OASkycope::fromJsonValue(m_can_manual_defend, json[QString("can_manual_defend")]);
    m_can_manual_defend_isSet = !json[QString("can_manual_defend")].isNull() && m_can_manual_defend_isValid;

    m_can_smart_defend_isValid = ::OASkycope::fromJsonValue(m_can_smart_defend, json[QString("can_smart_defend")]);
    m_can_smart_defend_isSet = !json[QString("can_smart_defend")].isNull() && m_can_smart_defend_isValid;

    m_is_decrypted_isValid = ::OASkycope::fromJsonValue(m_is_decrypted, json[QString("is_decrypted")]);
    m_is_decrypted_isSet = !json[QString("is_decrypted")].isNull() && m_is_decrypted_isValid;

    m_is_spoofable_isValid = ::OASkycope::fromJsonValue(m_is_spoofable, json[QString("is_spoofable")]);
    m_is_spoofable_isSet = !json[QString("is_spoofable")].isNull() && m_is_spoofable_isValid;
}

QString OASkycopeActions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OASkycopeActions::asJsonObject() const {
    QJsonObject obj;
    if (m_can_cancel_defense_isSet) {
        obj.insert(QString("can_cancel_defense"), ::OASkycope::toJsonValue(m_can_cancel_defense));
    }
    if (m_can_friend_isSet) {
        obj.insert(QString("can_friend"), ::OASkycope::toJsonValue(m_can_friend));
    }
    if (m_can_ignore_isSet) {
        obj.insert(QString("can_ignore"), ::OASkycope::toJsonValue(m_can_ignore));
    }
    if (m_can_ldval_test_isSet) {
        obj.insert(QString("can_ldval_test"), ::OASkycope::toJsonValue(m_can_ldval_test));
    }
    if (m_can_manual_defend_isSet) {
        obj.insert(QString("can_manual_defend"), ::OASkycope::toJsonValue(m_can_manual_defend));
    }
    if (m_can_smart_defend_isSet) {
        obj.insert(QString("can_smart_defend"), ::OASkycope::toJsonValue(m_can_smart_defend));
    }
    if (m_is_decrypted_isSet) {
        obj.insert(QString("is_decrypted"), ::OASkycope::toJsonValue(m_is_decrypted));
    }
    if (m_is_spoofable_isSet) {
        obj.insert(QString("is_spoofable"), ::OASkycope::toJsonValue(m_is_spoofable));
    }
    return obj;
}

bool OASkycopeActions::isCanCancelDefense() const {
    return m_can_cancel_defense;
}
void OASkycopeActions::setCanCancelDefense(const bool &can_cancel_defense) {
    m_can_cancel_defense = can_cancel_defense;
    m_can_cancel_defense_isSet = true;
}

bool OASkycopeActions::is_can_cancel_defense_Set() const{
    return m_can_cancel_defense_isSet;
}

bool OASkycopeActions::is_can_cancel_defense_Valid() const{
    return m_can_cancel_defense_isValid;
}

bool OASkycopeActions::isCanFriend() const {
    return m_can_friend;
}
void OASkycopeActions::setCanFriend(const bool &can_friend) {
    m_can_friend = can_friend;
    m_can_friend_isSet = true;
}

bool OASkycopeActions::is_can_friend_Set() const{
    return m_can_friend_isSet;
}

bool OASkycopeActions::is_can_friend_Valid() const{
    return m_can_friend_isValid;
}

bool OASkycopeActions::isCanIgnore() const {
    return m_can_ignore;
}
void OASkycopeActions::setCanIgnore(const bool &can_ignore) {
    m_can_ignore = can_ignore;
    m_can_ignore_isSet = true;
}

bool OASkycopeActions::is_can_ignore_Set() const{
    return m_can_ignore_isSet;
}

bool OASkycopeActions::is_can_ignore_Valid() const{
    return m_can_ignore_isValid;
}

bool OASkycopeActions::isCanLdvalTest() const {
    return m_can_ldval_test;
}
void OASkycopeActions::setCanLdvalTest(const bool &can_ldval_test) {
    m_can_ldval_test = can_ldval_test;
    m_can_ldval_test_isSet = true;
}

bool OASkycopeActions::is_can_ldval_test_Set() const{
    return m_can_ldval_test_isSet;
}

bool OASkycopeActions::is_can_ldval_test_Valid() const{
    return m_can_ldval_test_isValid;
}

bool OASkycopeActions::isCanManualDefend() const {
    return m_can_manual_defend;
}
void OASkycopeActions::setCanManualDefend(const bool &can_manual_defend) {
    m_can_manual_defend = can_manual_defend;
    m_can_manual_defend_isSet = true;
}

bool OASkycopeActions::is_can_manual_defend_Set() const{
    return m_can_manual_defend_isSet;
}

bool OASkycopeActions::is_can_manual_defend_Valid() const{
    return m_can_manual_defend_isValid;
}

bool OASkycopeActions::isCanSmartDefend() const {
    return m_can_smart_defend;
}
void OASkycopeActions::setCanSmartDefend(const bool &can_smart_defend) {
    m_can_smart_defend = can_smart_defend;
    m_can_smart_defend_isSet = true;
}

bool OASkycopeActions::is_can_smart_defend_Set() const{
    return m_can_smart_defend_isSet;
}

bool OASkycopeActions::is_can_smart_defend_Valid() const{
    return m_can_smart_defend_isValid;
}

bool OASkycopeActions::isIsDecrypted() const {
    return m_is_decrypted;
}
void OASkycopeActions::setIsDecrypted(const bool &is_decrypted) {
    m_is_decrypted = is_decrypted;
    m_is_decrypted_isSet = true;
}

bool OASkycopeActions::is_is_decrypted_Set() const{
    return m_is_decrypted_isSet;
}

bool OASkycopeActions::is_is_decrypted_Valid() const{
    return m_is_decrypted_isValid;
}

qint32 OASkycopeActions::getIsSpoofable() const {
    return m_is_spoofable;
}
void OASkycopeActions::setIsSpoofable(const qint32 &is_spoofable) {
    m_is_spoofable = is_spoofable;
    m_is_spoofable_isSet = true;
}

bool OASkycopeActions::is_is_spoofable_Set() const{
    return m_is_spoofable_isSet;
}

bool OASkycopeActions::is_is_spoofable_Valid() const{
    return m_is_spoofable_isValid;
}

bool OASkycopeActions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_cancel_defense_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_friend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_ignore_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_ldval_test_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_manual_defend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_smart_defend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_decrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_spoofable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OASkycopeActions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OASkycope
