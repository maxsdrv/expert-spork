/**
 * 
 * Description text
 *
 * The version of the OpenAPI document: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OASkycopeSensor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OASkycopeHelpers.h"

namespace OASkycope {

OASkycopeSensor::OASkycopeSensor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OASkycopeSensor::OASkycopeSensor() {
    this->initializeModel();
}

OASkycopeSensor::~OASkycopeSensor() {}

void OASkycopeSensor::initializeModel() {

    m_ai_enabled_isSet = false;
    m_ai_enabled_isValid = false;

    m_antenna_isSet = false;
    m_antenna_isValid = false;

    m_auto_defense_status_isSet = false;
    m_auto_defense_status_isValid = false;

    m_capture_status_isSet = false;
    m_capture_status_isValid = false;

    m_compass_isSet = false;
    m_compass_isValid = false;

    m_compass_enabled_isSet = false;
    m_compass_enabled_isValid = false;

    m_configured_gps_isSet = false;
    m_configured_gps_isValid = false;

    m_core_protection_radius_isSet = false;
    m_core_protection_radius_isValid = false;

    m_defense_radius_isSet = false;
    m_defense_radius_isValid = false;

    m_detection_radius_isSet = false;
    m_detection_radius_isValid = false;

    m_df_cone_sectors_isSet = false;
    m_df_cone_sectors_isValid = false;

    m_disk_has_space_isSet = false;
    m_disk_has_space_isValid = false;

    m_dv_status_isSet = false;
    m_dv_status_isValid = false;

    m_gps_isSet = false;
    m_gps_isValid = false;

    m_gps_signal_isSet = false;
    m_gps_signal_isValid = false;

    m_gps_signal_good_isSet = false;
    m_gps_signal_good_isValid = false;

    m_has_tdd_pa_isSet = false;
    m_has_tdd_pa_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_is_anchor_server_isSet = false;
    m_is_anchor_server_isValid = false;

    m_is_df_enabled_isSet = false;
    m_is_df_enabled_isValid = false;

    m_is_rmservice_on_isSet = false;
    m_is_rmservice_on_isValid = false;

    m_is_wideband_enabled_isSet = false;
    m_is_wideband_enabled_isValid = false;

    m_license_language_isSet = false;
    m_license_language_isValid = false;

    m_mass_defense_status_isSet = false;
    m_mass_defense_status_isValid = false;

    m_mcu_status_isSet = false;
    m_mcu_status_isValid = false;

    m_mgmt_details_isSet = false;
    m_mgmt_details_isValid = false;

    m_nfz_spoof_status_isSet = false;
    m_nfz_spoof_status_isValid = false;

    m_noise_list_isSet = false;
    m_noise_list_isValid = false;

    m_ou_isSet = false;
    m_ou_isValid = false;

    m_rmservice_mgmt_port_isSet = false;
    m_rmservice_mgmt_port_isValid = false;

    m_rmservice_port_isSet = false;
    m_rmservice_port_isValid = false;

    m_sanity_test_status_isSet = false;
    m_sanity_test_status_isValid = false;

    m_sectors_isSet = false;
    m_sectors_isValid = false;

    m_sectors_label_isSet = false;
    m_sectors_label_isValid = false;

    m_sensor_name_isSet = false;
    m_sensor_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_termdate_isSet = false;
    m_termdate_isValid = false;

    m_wifi_status_isSet = false;
    m_wifi_status_isValid = false;
}

void OASkycopeSensor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OASkycopeSensor::fromJsonObject(QJsonObject json) {

    m_ai_enabled_isValid = ::OASkycope::fromJsonValue(m_ai_enabled, json[QString("ai_enabled")]);
    m_ai_enabled_isSet = !json[QString("ai_enabled")].isNull() && m_ai_enabled_isValid;

    m_antenna_isValid = ::OASkycope::fromJsonValue(m_antenna, json[QString("antenna")]);
    m_antenna_isSet = !json[QString("antenna")].isNull() && m_antenna_isValid;

    m_auto_defense_status_isValid = ::OASkycope::fromJsonValue(m_auto_defense_status, json[QString("auto_defense_status")]);
    m_auto_defense_status_isSet = !json[QString("auto_defense_status")].isNull() && m_auto_defense_status_isValid;

    m_capture_status_isValid = ::OASkycope::fromJsonValue(m_capture_status, json[QString("capture_status")]);
    m_capture_status_isSet = !json[QString("capture_status")].isNull() && m_capture_status_isValid;

    m_compass_isValid = ::OASkycope::fromJsonValue(m_compass, json[QString("compass")]);
    m_compass_isSet = !json[QString("compass")].isNull() && m_compass_isValid;

    m_compass_enabled_isValid = ::OASkycope::fromJsonValue(m_compass_enabled, json[QString("compass_enabled")]);
    m_compass_enabled_isSet = !json[QString("compass_enabled")].isNull() && m_compass_enabled_isValid;

    m_configured_gps_isValid = ::OASkycope::fromJsonValue(m_configured_gps, json[QString("configured_gps")]);
    m_configured_gps_isSet = !json[QString("configured_gps")].isNull() && m_configured_gps_isValid;

    m_core_protection_radius_isValid = ::OASkycope::fromJsonValue(m_core_protection_radius, json[QString("core_protection_radius")]);
    m_core_protection_radius_isSet = !json[QString("core_protection_radius")].isNull() && m_core_protection_radius_isValid;

    m_defense_radius_isValid = ::OASkycope::fromJsonValue(m_defense_radius, json[QString("defense_radius")]);
    m_defense_radius_isSet = !json[QString("defense_radius")].isNull() && m_defense_radius_isValid;

    m_detection_radius_isValid = ::OASkycope::fromJsonValue(m_detection_radius, json[QString("detection_radius")]);
    m_detection_radius_isSet = !json[QString("detection_radius")].isNull() && m_detection_radius_isValid;

    m_df_cone_sectors_isValid = ::OASkycope::fromJsonValue(m_df_cone_sectors, json[QString("df_cone_sectors")]);
    m_df_cone_sectors_isSet = !json[QString("df_cone_sectors")].isNull() && m_df_cone_sectors_isValid;

    m_disk_has_space_isValid = ::OASkycope::fromJsonValue(m_disk_has_space, json[QString("disk_has_space")]);
    m_disk_has_space_isSet = !json[QString("disk_has_space")].isNull() && m_disk_has_space_isValid;

    m_dv_status_isValid = ::OASkycope::fromJsonValue(m_dv_status, json[QString("dv_status")]);
    m_dv_status_isSet = !json[QString("dv_status")].isNull() && m_dv_status_isValid;

    m_gps_isValid = ::OASkycope::fromJsonValue(m_gps, json[QString("gps")]);
    m_gps_isSet = !json[QString("gps")].isNull() && m_gps_isValid;

    m_gps_signal_isValid = ::OASkycope::fromJsonValue(m_gps_signal, json[QString("gps_signal")]);
    m_gps_signal_isSet = !json[QString("gps_signal")].isNull() && m_gps_signal_isValid;

    m_gps_signal_good_isValid = ::OASkycope::fromJsonValue(m_gps_signal_good, json[QString("gps_signal_good")]);
    m_gps_signal_good_isSet = !json[QString("gps_signal_good")].isNull() && m_gps_signal_good_isValid;

    m_has_tdd_pa_isValid = ::OASkycope::fromJsonValue(m_has_tdd_pa, json[QString("has_tdd_pa")]);
    m_has_tdd_pa_isSet = !json[QString("has_tdd_pa")].isNull() && m_has_tdd_pa_isValid;

    m_ip_isValid = ::OASkycope::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_is_anchor_server_isValid = ::OASkycope::fromJsonValue(m_is_anchor_server, json[QString("is_anchor_server")]);
    m_is_anchor_server_isSet = !json[QString("is_anchor_server")].isNull() && m_is_anchor_server_isValid;

    m_is_df_enabled_isValid = ::OASkycope::fromJsonValue(m_is_df_enabled, json[QString("is_df_enabled")]);
    m_is_df_enabled_isSet = !json[QString("is_df_enabled")].isNull() && m_is_df_enabled_isValid;

    m_is_rmservice_on_isValid = ::OASkycope::fromJsonValue(m_is_rmservice_on, json[QString("is_rmservice_on")]);
    m_is_rmservice_on_isSet = !json[QString("is_rmservice_on")].isNull() && m_is_rmservice_on_isValid;

    m_is_wideband_enabled_isValid = ::OASkycope::fromJsonValue(m_is_wideband_enabled, json[QString("is_wideband_enabled")]);
    m_is_wideband_enabled_isSet = !json[QString("is_wideband_enabled")].isNull() && m_is_wideband_enabled_isValid;

    m_license_language_isValid = ::OASkycope::fromJsonValue(m_license_language, json[QString("license_language")]);
    m_license_language_isSet = !json[QString("license_language")].isNull() && m_license_language_isValid;

    m_mass_defense_status_isValid = ::OASkycope::fromJsonValue(m_mass_defense_status, json[QString("mass_defense_status")]);
    m_mass_defense_status_isSet = !json[QString("mass_defense_status")].isNull() && m_mass_defense_status_isValid;

    m_mcu_status_isValid = ::OASkycope::fromJsonValue(m_mcu_status, json[QString("mcu_status")]);
    m_mcu_status_isSet = !json[QString("mcu_status")].isNull() && m_mcu_status_isValid;

    m_mgmt_details_isValid = ::OASkycope::fromJsonValue(m_mgmt_details, json[QString("mgmt_details")]);
    m_mgmt_details_isSet = !json[QString("mgmt_details")].isNull() && m_mgmt_details_isValid;

    m_nfz_spoof_status_isValid = ::OASkycope::fromJsonValue(m_nfz_spoof_status, json[QString("nfz_spoof_status")]);
    m_nfz_spoof_status_isSet = !json[QString("nfz_spoof_status")].isNull() && m_nfz_spoof_status_isValid;

    m_noise_list_isValid = ::OASkycope::fromJsonValue(m_noise_list, json[QString("noise_list")]);
    m_noise_list_isSet = !json[QString("noise_list")].isNull() && m_noise_list_isValid;

    m_ou_isValid = ::OASkycope::fromJsonValue(m_ou, json[QString("ou")]);
    m_ou_isSet = !json[QString("ou")].isNull() && m_ou_isValid;

    m_rmservice_mgmt_port_isValid = ::OASkycope::fromJsonValue(m_rmservice_mgmt_port, json[QString("rmservice_mgmt_port")]);
    m_rmservice_mgmt_port_isSet = !json[QString("rmservice_mgmt_port")].isNull() && m_rmservice_mgmt_port_isValid;

    m_rmservice_port_isValid = ::OASkycope::fromJsonValue(m_rmservice_port, json[QString("rmservice_port")]);
    m_rmservice_port_isSet = !json[QString("rmservice_port")].isNull() && m_rmservice_port_isValid;

    m_sanity_test_status_isValid = ::OASkycope::fromJsonValue(m_sanity_test_status, json[QString("sanity_test_status")]);
    m_sanity_test_status_isSet = !json[QString("sanity_test_status")].isNull() && m_sanity_test_status_isValid;

    m_sectors_isValid = ::OASkycope::fromJsonValue(m_sectors, json[QString("sectors")]);
    m_sectors_isSet = !json[QString("sectors")].isNull() && m_sectors_isValid;

    m_sectors_label_isValid = ::OASkycope::fromJsonValue(m_sectors_label, json[QString("sectors_label")]);
    m_sectors_label_isSet = !json[QString("sectors_label")].isNull() && m_sectors_label_isValid;

    m_sensor_name_isValid = ::OASkycope::fromJsonValue(m_sensor_name, json[QString("sensor_name")]);
    m_sensor_name_isSet = !json[QString("sensor_name")].isNull() && m_sensor_name_isValid;

    m_status_isValid = ::OASkycope::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_termdate_isValid = ::OASkycope::fromJsonValue(m_termdate, json[QString("termdate")]);
    m_termdate_isSet = !json[QString("termdate")].isNull() && m_termdate_isValid;

    m_wifi_status_isValid = ::OASkycope::fromJsonValue(m_wifi_status, json[QString("wifi_status")]);
    m_wifi_status_isSet = !json[QString("wifi_status")].isNull() && m_wifi_status_isValid;
}

QString OASkycopeSensor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OASkycopeSensor::asJsonObject() const {
    QJsonObject obj;
    if (m_ai_enabled_isSet) {
        obj.insert(QString("ai_enabled"), ::OASkycope::toJsonValue(m_ai_enabled));
    }
    if (m_antenna_isSet) {
        obj.insert(QString("antenna"), ::OASkycope::toJsonValue(m_antenna));
    }
    if (m_auto_defense_status_isSet) {
        obj.insert(QString("auto_defense_status"), ::OASkycope::toJsonValue(m_auto_defense_status));
    }
    if (m_capture_status_isSet) {
        obj.insert(QString("capture_status"), ::OASkycope::toJsonValue(m_capture_status));
    }
    if (m_compass_isSet) {
        obj.insert(QString("compass"), ::OASkycope::toJsonValue(m_compass));
    }
    if (m_compass_enabled_isSet) {
        obj.insert(QString("compass_enabled"), ::OASkycope::toJsonValue(m_compass_enabled));
    }
    if (m_configured_gps_isSet) {
        obj.insert(QString("configured_gps"), ::OASkycope::toJsonValue(m_configured_gps));
    }
    if (m_core_protection_radius_isSet) {
        obj.insert(QString("core_protection_radius"), ::OASkycope::toJsonValue(m_core_protection_radius));
    }
    if (m_defense_radius_isSet) {
        obj.insert(QString("defense_radius"), ::OASkycope::toJsonValue(m_defense_radius));
    }
    if (m_detection_radius_isSet) {
        obj.insert(QString("detection_radius"), ::OASkycope::toJsonValue(m_detection_radius));
    }
    if (m_df_cone_sectors_isSet) {
        obj.insert(QString("df_cone_sectors"), ::OASkycope::toJsonValue(m_df_cone_sectors));
    }
    if (m_disk_has_space_isSet) {
        obj.insert(QString("disk_has_space"), ::OASkycope::toJsonValue(m_disk_has_space));
    }
    if (m_dv_status_isSet) {
        obj.insert(QString("dv_status"), ::OASkycope::toJsonValue(m_dv_status));
    }
    if (m_gps.isSet()) {
        obj.insert(QString("gps"), ::OASkycope::toJsonValue(m_gps));
    }
    if (m_gps_signal.size() > 0) {
        obj.insert(QString("gps_signal"), ::OASkycope::toJsonValue(m_gps_signal));
    }
    if (m_gps_signal_good_isSet) {
        obj.insert(QString("gps_signal_good"), ::OASkycope::toJsonValue(m_gps_signal_good));
    }
    if (m_has_tdd_pa_isSet) {
        obj.insert(QString("has_tdd_pa"), ::OASkycope::toJsonValue(m_has_tdd_pa));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OASkycope::toJsonValue(m_ip));
    }
    if (m_is_anchor_server_isSet) {
        obj.insert(QString("is_anchor_server"), ::OASkycope::toJsonValue(m_is_anchor_server));
    }
    if (m_is_df_enabled_isSet) {
        obj.insert(QString("is_df_enabled"), ::OASkycope::toJsonValue(m_is_df_enabled));
    }
    if (m_is_rmservice_on_isSet) {
        obj.insert(QString("is_rmservice_on"), ::OASkycope::toJsonValue(m_is_rmservice_on));
    }
    if (m_is_wideband_enabled_isSet) {
        obj.insert(QString("is_wideband_enabled"), ::OASkycope::toJsonValue(m_is_wideband_enabled));
    }
    if (m_license_language_isSet) {
        obj.insert(QString("license_language"), ::OASkycope::toJsonValue(m_license_language));
    }
    if (m_mass_defense_status_isSet) {
        obj.insert(QString("mass_defense_status"), ::OASkycope::toJsonValue(m_mass_defense_status));
    }
    if (m_mcu_status.isSet()) {
        obj.insert(QString("mcu_status"), ::OASkycope::toJsonValue(m_mcu_status));
    }
    if (m_mgmt_details.isSet()) {
        obj.insert(QString("mgmt_details"), ::OASkycope::toJsonValue(m_mgmt_details));
    }
    if (m_nfz_spoof_status.isSet()) {
        obj.insert(QString("nfz_spoof_status"), ::OASkycope::toJsonValue(m_nfz_spoof_status));
    }
    if (m_noise_list.size() > 0) {
        obj.insert(QString("noise_list"), ::OASkycope::toJsonValue(m_noise_list));
    }
    if (m_ou_isSet) {
        obj.insert(QString("ou"), ::OASkycope::toJsonValue(m_ou));
    }
    if (m_rmservice_mgmt_port_isSet) {
        obj.insert(QString("rmservice_mgmt_port"), ::OASkycope::toJsonValue(m_rmservice_mgmt_port));
    }
    if (m_rmservice_port_isSet) {
        obj.insert(QString("rmservice_port"), ::OASkycope::toJsonValue(m_rmservice_port));
    }
    if (m_sanity_test_status_isSet) {
        obj.insert(QString("sanity_test_status"), ::OASkycope::toJsonValue(m_sanity_test_status));
    }
    if (m_sectors_isSet) {
        obj.insert(QString("sectors"), ::OASkycope::toJsonValue(m_sectors));
    }
    if (m_sectors_label_isSet) {
        obj.insert(QString("sectors_label"), ::OASkycope::toJsonValue(m_sectors_label));
    }
    if (m_sensor_name_isSet) {
        obj.insert(QString("sensor_name"), ::OASkycope::toJsonValue(m_sensor_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OASkycope::toJsonValue(m_status));
    }
    if (m_termdate_isSet) {
        obj.insert(QString("termdate"), ::OASkycope::toJsonValue(m_termdate));
    }
    if (m_wifi_status.isSet()) {
        obj.insert(QString("wifi_status"), ::OASkycope::toJsonValue(m_wifi_status));
    }
    return obj;
}

bool OASkycopeSensor::isAiEnabled() const {
    return m_ai_enabled;
}
void OASkycopeSensor::setAiEnabled(const bool &ai_enabled) {
    m_ai_enabled = ai_enabled;
    m_ai_enabled_isSet = true;
}

bool OASkycopeSensor::is_ai_enabled_Set() const{
    return m_ai_enabled_isSet;
}

bool OASkycopeSensor::is_ai_enabled_Valid() const{
    return m_ai_enabled_isValid;
}

QString OASkycopeSensor::getAntenna() const {
    return m_antenna;
}
void OASkycopeSensor::setAntenna(const QString &antenna) {
    m_antenna = antenna;
    m_antenna_isSet = true;
}

bool OASkycopeSensor::is_antenna_Set() const{
    return m_antenna_isSet;
}

bool OASkycopeSensor::is_antenna_Valid() const{
    return m_antenna_isValid;
}

bool OASkycopeSensor::isAutoDefenseStatus() const {
    return m_auto_defense_status;
}
void OASkycopeSensor::setAutoDefenseStatus(const bool &auto_defense_status) {
    m_auto_defense_status = auto_defense_status;
    m_auto_defense_status_isSet = true;
}

bool OASkycopeSensor::is_auto_defense_status_Set() const{
    return m_auto_defense_status_isSet;
}

bool OASkycopeSensor::is_auto_defense_status_Valid() const{
    return m_auto_defense_status_isValid;
}

bool OASkycopeSensor::isCaptureStatus() const {
    return m_capture_status;
}
void OASkycopeSensor::setCaptureStatus(const bool &capture_status) {
    m_capture_status = capture_status;
    m_capture_status_isSet = true;
}

bool OASkycopeSensor::is_capture_status_Set() const{
    return m_capture_status_isSet;
}

bool OASkycopeSensor::is_capture_status_Valid() const{
    return m_capture_status_isValid;
}

qint32 OASkycopeSensor::getCompass() const {
    return m_compass;
}
void OASkycopeSensor::setCompass(const qint32 &compass) {
    m_compass = compass;
    m_compass_isSet = true;
}

bool OASkycopeSensor::is_compass_Set() const{
    return m_compass_isSet;
}

bool OASkycopeSensor::is_compass_Valid() const{
    return m_compass_isValid;
}

bool OASkycopeSensor::isCompassEnabled() const {
    return m_compass_enabled;
}
void OASkycopeSensor::setCompassEnabled(const bool &compass_enabled) {
    m_compass_enabled = compass_enabled;
    m_compass_enabled_isSet = true;
}

bool OASkycopeSensor::is_compass_enabled_Set() const{
    return m_compass_enabled_isSet;
}

bool OASkycopeSensor::is_compass_enabled_Valid() const{
    return m_compass_enabled_isValid;
}

bool OASkycopeSensor::isConfiguredGps() const {
    return m_configured_gps;
}
void OASkycopeSensor::setConfiguredGps(const bool &configured_gps) {
    m_configured_gps = configured_gps;
    m_configured_gps_isSet = true;
}

bool OASkycopeSensor::is_configured_gps_Set() const{
    return m_configured_gps_isSet;
}

bool OASkycopeSensor::is_configured_gps_Valid() const{
    return m_configured_gps_isValid;
}

qint32 OASkycopeSensor::getCoreProtectionRadius() const {
    return m_core_protection_radius;
}
void OASkycopeSensor::setCoreProtectionRadius(const qint32 &core_protection_radius) {
    m_core_protection_radius = core_protection_radius;
    m_core_protection_radius_isSet = true;
}

bool OASkycopeSensor::is_core_protection_radius_Set() const{
    return m_core_protection_radius_isSet;
}

bool OASkycopeSensor::is_core_protection_radius_Valid() const{
    return m_core_protection_radius_isValid;
}

qint32 OASkycopeSensor::getDefenseRadius() const {
    return m_defense_radius;
}
void OASkycopeSensor::setDefenseRadius(const qint32 &defense_radius) {
    m_defense_radius = defense_radius;
    m_defense_radius_isSet = true;
}

bool OASkycopeSensor::is_defense_radius_Set() const{
    return m_defense_radius_isSet;
}

bool OASkycopeSensor::is_defense_radius_Valid() const{
    return m_defense_radius_isValid;
}

qint32 OASkycopeSensor::getDetectionRadius() const {
    return m_detection_radius;
}
void OASkycopeSensor::setDetectionRadius(const qint32 &detection_radius) {
    m_detection_radius = detection_radius;
    m_detection_radius_isSet = true;
}

bool OASkycopeSensor::is_detection_radius_Set() const{
    return m_detection_radius_isSet;
}

bool OASkycopeSensor::is_detection_radius_Valid() const{
    return m_detection_radius_isValid;
}

OASkycopeObject OASkycopeSensor::getDfConeSectors() const {
    return m_df_cone_sectors;
}
void OASkycopeSensor::setDfConeSectors(const OASkycopeObject &df_cone_sectors) {
    m_df_cone_sectors = df_cone_sectors;
    m_df_cone_sectors_isSet = true;
}

bool OASkycopeSensor::is_df_cone_sectors_Set() const{
    return m_df_cone_sectors_isSet;
}

bool OASkycopeSensor::is_df_cone_sectors_Valid() const{
    return m_df_cone_sectors_isValid;
}

bool OASkycopeSensor::isDiskHasSpace() const {
    return m_disk_has_space;
}
void OASkycopeSensor::setDiskHasSpace(const bool &disk_has_space) {
    m_disk_has_space = disk_has_space;
    m_disk_has_space_isSet = true;
}

bool OASkycopeSensor::is_disk_has_space_Set() const{
    return m_disk_has_space_isSet;
}

bool OASkycopeSensor::is_disk_has_space_Valid() const{
    return m_disk_has_space_isValid;
}

bool OASkycopeSensor::isDvStatus() const {
    return m_dv_status;
}
void OASkycopeSensor::setDvStatus(const bool &dv_status) {
    m_dv_status = dv_status;
    m_dv_status_isSet = true;
}

bool OASkycopeSensor::is_dv_status_Set() const{
    return m_dv_status_isSet;
}

bool OASkycopeSensor::is_dv_status_Valid() const{
    return m_dv_status_isValid;
}

OASkycopeGps OASkycopeSensor::getGps() const {
    return m_gps;
}
void OASkycopeSensor::setGps(const OASkycopeGps &gps) {
    m_gps = gps;
    m_gps_isSet = true;
}

bool OASkycopeSensor::is_gps_Set() const{
    return m_gps_isSet;
}

bool OASkycopeSensor::is_gps_Valid() const{
    return m_gps_isValid;
}

QList<qint32> OASkycopeSensor::getGpsSignal() const {
    return m_gps_signal;
}
void OASkycopeSensor::setGpsSignal(const QList<qint32> &gps_signal) {
    m_gps_signal = gps_signal;
    m_gps_signal_isSet = true;
}

bool OASkycopeSensor::is_gps_signal_Set() const{
    return m_gps_signal_isSet;
}

bool OASkycopeSensor::is_gps_signal_Valid() const{
    return m_gps_signal_isValid;
}

bool OASkycopeSensor::isGpsSignalGood() const {
    return m_gps_signal_good;
}
void OASkycopeSensor::setGpsSignalGood(const bool &gps_signal_good) {
    m_gps_signal_good = gps_signal_good;
    m_gps_signal_good_isSet = true;
}

bool OASkycopeSensor::is_gps_signal_good_Set() const{
    return m_gps_signal_good_isSet;
}

bool OASkycopeSensor::is_gps_signal_good_Valid() const{
    return m_gps_signal_good_isValid;
}

bool OASkycopeSensor::isHasTddPa() const {
    return m_has_tdd_pa;
}
void OASkycopeSensor::setHasTddPa(const bool &has_tdd_pa) {
    m_has_tdd_pa = has_tdd_pa;
    m_has_tdd_pa_isSet = true;
}

bool OASkycopeSensor::is_has_tdd_pa_Set() const{
    return m_has_tdd_pa_isSet;
}

bool OASkycopeSensor::is_has_tdd_pa_Valid() const{
    return m_has_tdd_pa_isValid;
}

QString OASkycopeSensor::getIp() const {
    return m_ip;
}
void OASkycopeSensor::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OASkycopeSensor::is_ip_Set() const{
    return m_ip_isSet;
}

bool OASkycopeSensor::is_ip_Valid() const{
    return m_ip_isValid;
}

bool OASkycopeSensor::isIsAnchorServer() const {
    return m_is_anchor_server;
}
void OASkycopeSensor::setIsAnchorServer(const bool &is_anchor_server) {
    m_is_anchor_server = is_anchor_server;
    m_is_anchor_server_isSet = true;
}

bool OASkycopeSensor::is_is_anchor_server_Set() const{
    return m_is_anchor_server_isSet;
}

bool OASkycopeSensor::is_is_anchor_server_Valid() const{
    return m_is_anchor_server_isValid;
}

bool OASkycopeSensor::isIsDfEnabled() const {
    return m_is_df_enabled;
}
void OASkycopeSensor::setIsDfEnabled(const bool &is_df_enabled) {
    m_is_df_enabled = is_df_enabled;
    m_is_df_enabled_isSet = true;
}

bool OASkycopeSensor::is_is_df_enabled_Set() const{
    return m_is_df_enabled_isSet;
}

bool OASkycopeSensor::is_is_df_enabled_Valid() const{
    return m_is_df_enabled_isValid;
}

bool OASkycopeSensor::isIsRmserviceOn() const {
    return m_is_rmservice_on;
}
void OASkycopeSensor::setIsRmserviceOn(const bool &is_rmservice_on) {
    m_is_rmservice_on = is_rmservice_on;
    m_is_rmservice_on_isSet = true;
}

bool OASkycopeSensor::is_is_rmservice_on_Set() const{
    return m_is_rmservice_on_isSet;
}

bool OASkycopeSensor::is_is_rmservice_on_Valid() const{
    return m_is_rmservice_on_isValid;
}

bool OASkycopeSensor::isIsWidebandEnabled() const {
    return m_is_wideband_enabled;
}
void OASkycopeSensor::setIsWidebandEnabled(const bool &is_wideband_enabled) {
    m_is_wideband_enabled = is_wideband_enabled;
    m_is_wideband_enabled_isSet = true;
}

bool OASkycopeSensor::is_is_wideband_enabled_Set() const{
    return m_is_wideband_enabled_isSet;
}

bool OASkycopeSensor::is_is_wideband_enabled_Valid() const{
    return m_is_wideband_enabled_isValid;
}

QString OASkycopeSensor::getLicenseLanguage() const {
    return m_license_language;
}
void OASkycopeSensor::setLicenseLanguage(const QString &license_language) {
    m_license_language = license_language;
    m_license_language_isSet = true;
}

bool OASkycopeSensor::is_license_language_Set() const{
    return m_license_language_isSet;
}

bool OASkycopeSensor::is_license_language_Valid() const{
    return m_license_language_isValid;
}

bool OASkycopeSensor::isMassDefenseStatus() const {
    return m_mass_defense_status;
}
void OASkycopeSensor::setMassDefenseStatus(const bool &mass_defense_status) {
    m_mass_defense_status = mass_defense_status;
    m_mass_defense_status_isSet = true;
}

bool OASkycopeSensor::is_mass_defense_status_Set() const{
    return m_mass_defense_status_isSet;
}

bool OASkycopeSensor::is_mass_defense_status_Valid() const{
    return m_mass_defense_status_isValid;
}

OASkycopeMcuStatus OASkycopeSensor::getMcuStatus() const {
    return m_mcu_status;
}
void OASkycopeSensor::setMcuStatus(const OASkycopeMcuStatus &mcu_status) {
    m_mcu_status = mcu_status;
    m_mcu_status_isSet = true;
}

bool OASkycopeSensor::is_mcu_status_Set() const{
    return m_mcu_status_isSet;
}

bool OASkycopeSensor::is_mcu_status_Valid() const{
    return m_mcu_status_isValid;
}

OASkycopeMgmtDetails OASkycopeSensor::getMgmtDetails() const {
    return m_mgmt_details;
}
void OASkycopeSensor::setMgmtDetails(const OASkycopeMgmtDetails &mgmt_details) {
    m_mgmt_details = mgmt_details;
    m_mgmt_details_isSet = true;
}

bool OASkycopeSensor::is_mgmt_details_Set() const{
    return m_mgmt_details_isSet;
}

bool OASkycopeSensor::is_mgmt_details_Valid() const{
    return m_mgmt_details_isValid;
}

OASkycopeNfzSpoofStatus OASkycopeSensor::getNfzSpoofStatus() const {
    return m_nfz_spoof_status;
}
void OASkycopeSensor::setNfzSpoofStatus(const OASkycopeNfzSpoofStatus &nfz_spoof_status) {
    m_nfz_spoof_status = nfz_spoof_status;
    m_nfz_spoof_status_isSet = true;
}

bool OASkycopeSensor::is_nfz_spoof_status_Set() const{
    return m_nfz_spoof_status_isSet;
}

bool OASkycopeSensor::is_nfz_spoof_status_Valid() const{
    return m_nfz_spoof_status_isValid;
}

QList<QJsonValue> OASkycopeSensor::getNoiseList() const {
    return m_noise_list;
}
void OASkycopeSensor::setNoiseList(const QList<QJsonValue> &noise_list) {
    m_noise_list = noise_list;
    m_noise_list_isSet = true;
}

bool OASkycopeSensor::is_noise_list_Set() const{
    return m_noise_list_isSet;
}

bool OASkycopeSensor::is_noise_list_Valid() const{
    return m_noise_list_isValid;
}

QString OASkycopeSensor::getOu() const {
    return m_ou;
}
void OASkycopeSensor::setOu(const QString &ou) {
    m_ou = ou;
    m_ou_isSet = true;
}

bool OASkycopeSensor::is_ou_Set() const{
    return m_ou_isSet;
}

bool OASkycopeSensor::is_ou_Valid() const{
    return m_ou_isValid;
}

QString OASkycopeSensor::getRmserviceMgmtPort() const {
    return m_rmservice_mgmt_port;
}
void OASkycopeSensor::setRmserviceMgmtPort(const QString &rmservice_mgmt_port) {
    m_rmservice_mgmt_port = rmservice_mgmt_port;
    m_rmservice_mgmt_port_isSet = true;
}

bool OASkycopeSensor::is_rmservice_mgmt_port_Set() const{
    return m_rmservice_mgmt_port_isSet;
}

bool OASkycopeSensor::is_rmservice_mgmt_port_Valid() const{
    return m_rmservice_mgmt_port_isValid;
}

QString OASkycopeSensor::getRmservicePort() const {
    return m_rmservice_port;
}
void OASkycopeSensor::setRmservicePort(const QString &rmservice_port) {
    m_rmservice_port = rmservice_port;
    m_rmservice_port_isSet = true;
}

bool OASkycopeSensor::is_rmservice_port_Set() const{
    return m_rmservice_port_isSet;
}

bool OASkycopeSensor::is_rmservice_port_Valid() const{
    return m_rmservice_port_isValid;
}

bool OASkycopeSensor::isSanityTestStatus() const {
    return m_sanity_test_status;
}
void OASkycopeSensor::setSanityTestStatus(const bool &sanity_test_status) {
    m_sanity_test_status = sanity_test_status;
    m_sanity_test_status_isSet = true;
}

bool OASkycopeSensor::is_sanity_test_status_Set() const{
    return m_sanity_test_status_isSet;
}

bool OASkycopeSensor::is_sanity_test_status_Valid() const{
    return m_sanity_test_status_isValid;
}

QString OASkycopeSensor::getSectors() const {
    return m_sectors;
}
void OASkycopeSensor::setSectors(const QString &sectors) {
    m_sectors = sectors;
    m_sectors_isSet = true;
}

bool OASkycopeSensor::is_sectors_Set() const{
    return m_sectors_isSet;
}

bool OASkycopeSensor::is_sectors_Valid() const{
    return m_sectors_isValid;
}

QString OASkycopeSensor::getSectorsLabel() const {
    return m_sectors_label;
}
void OASkycopeSensor::setSectorsLabel(const QString &sectors_label) {
    m_sectors_label = sectors_label;
    m_sectors_label_isSet = true;
}

bool OASkycopeSensor::is_sectors_label_Set() const{
    return m_sectors_label_isSet;
}

bool OASkycopeSensor::is_sectors_label_Valid() const{
    return m_sectors_label_isValid;
}

QString OASkycopeSensor::getSensorName() const {
    return m_sensor_name;
}
void OASkycopeSensor::setSensorName(const QString &sensor_name) {
    m_sensor_name = sensor_name;
    m_sensor_name_isSet = true;
}

bool OASkycopeSensor::is_sensor_name_Set() const{
    return m_sensor_name_isSet;
}

bool OASkycopeSensor::is_sensor_name_Valid() const{
    return m_sensor_name_isValid;
}

OASkycopeStatus OASkycopeSensor::getStatus() const {
    return m_status;
}
void OASkycopeSensor::setStatus(const OASkycopeStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OASkycopeSensor::is_status_Set() const{
    return m_status_isSet;
}

bool OASkycopeSensor::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OASkycopeSensor::getTermdate() const {
    return m_termdate;
}
void OASkycopeSensor::setTermdate(const qint32 &termdate) {
    m_termdate = termdate;
    m_termdate_isSet = true;
}

bool OASkycopeSensor::is_termdate_Set() const{
    return m_termdate_isSet;
}

bool OASkycopeSensor::is_termdate_Valid() const{
    return m_termdate_isValid;
}

OASkycopeWifiStatus OASkycopeSensor::getWifiStatus() const {
    return m_wifi_status;
}
void OASkycopeSensor::setWifiStatus(const OASkycopeWifiStatus &wifi_status) {
    m_wifi_status = wifi_status;
    m_wifi_status_isSet = true;
}

bool OASkycopeSensor::is_wifi_status_Set() const{
    return m_wifi_status_isSet;
}

bool OASkycopeSensor::is_wifi_status_Valid() const{
    return m_wifi_status_isValid;
}

bool OASkycopeSensor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ai_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_antenna_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_defense_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capture_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compass_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compass_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configured_gps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_core_protection_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defense_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detection_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_df_cone_sectors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_has_space_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dv_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gps_signal.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gps_signal_good_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_tdd_pa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_anchor_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_df_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_rmservice_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_wideband_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mass_defense_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mcu_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mgmt_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfz_spoof_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_noise_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ou_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rmservice_mgmt_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rmservice_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sanity_test_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sectors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sectors_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_termdate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OASkycopeSensor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_defense_status_isValid && m_compass_isValid && m_defense_radius_isValid && m_gps_isValid && m_mcu_status_isValid && m_status_isValid && m_wifi_status_isValid && true;
}

} // namespace OASkycope
