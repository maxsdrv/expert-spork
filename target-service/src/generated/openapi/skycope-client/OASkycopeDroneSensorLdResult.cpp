/**
 * 
 * Description text
 *
 * The version of the OpenAPI document: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OASkycopeDroneSensorLdResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OASkycopeHelpers.h"

namespace OASkycope {

OASkycopeDroneSensorLdResult::OASkycopeDroneSensorLdResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OASkycopeDroneSensorLdResult::OASkycopeDroneSensorLdResult() {
    this->initializeModel();
}

OASkycopeDroneSensorLdResult::~OASkycopeDroneSensorLdResult() {}

void OASkycopeDroneSensorLdResult::initializeModel() {

    m_azimuth_isSet = false;
    m_azimuth_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_sensor_id_isSet = false;
    m_sensor_id_isValid = false;
}

void OASkycopeDroneSensorLdResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OASkycopeDroneSensorLdResult::fromJsonObject(QJsonObject json) {

    m_azimuth_isValid = ::OASkycope::fromJsonValue(m_azimuth, json[QString("azimuth")]);
    m_azimuth_isSet = !json[QString("azimuth")].isNull() && m_azimuth_isValid;

    m_distance_isValid = ::OASkycope::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_sensor_id_isValid = ::OASkycope::fromJsonValue(m_sensor_id, json[QString("sensor_id")]);
    m_sensor_id_isSet = !json[QString("sensor_id")].isNull() && m_sensor_id_isValid;
}

QString OASkycopeDroneSensorLdResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OASkycopeDroneSensorLdResult::asJsonObject() const {
    QJsonObject obj;
    if (m_azimuth_isSet) {
        obj.insert(QString("azimuth"), ::OASkycope::toJsonValue(m_azimuth));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OASkycope::toJsonValue(m_distance));
    }
    if (m_sensor_id_isSet) {
        obj.insert(QString("sensor_id"), ::OASkycope::toJsonValue(m_sensor_id));
    }
    return obj;
}

double OASkycopeDroneSensorLdResult::getAzimuth() const {
    return m_azimuth;
}
void OASkycopeDroneSensorLdResult::setAzimuth(const double &azimuth) {
    m_azimuth = azimuth;
    m_azimuth_isSet = true;
}

bool OASkycopeDroneSensorLdResult::is_azimuth_Set() const{
    return m_azimuth_isSet;
}

bool OASkycopeDroneSensorLdResult::is_azimuth_Valid() const{
    return m_azimuth_isValid;
}

QString OASkycopeDroneSensorLdResult::getDistance() const {
    return m_distance;
}
void OASkycopeDroneSensorLdResult::setDistance(const QString &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OASkycopeDroneSensorLdResult::is_distance_Set() const{
    return m_distance_isSet;
}

bool OASkycopeDroneSensorLdResult::is_distance_Valid() const{
    return m_distance_isValid;
}

QString OASkycopeDroneSensorLdResult::getSensorId() const {
    return m_sensor_id;
}
void OASkycopeDroneSensorLdResult::setSensorId(const QString &sensor_id) {
    m_sensor_id = sensor_id;
    m_sensor_id_isSet = true;
}

bool OASkycopeDroneSensorLdResult::is_sensor_id_Set() const{
    return m_sensor_id_isSet;
}

bool OASkycopeDroneSensorLdResult::is_sensor_id_Valid() const{
    return m_sensor_id_isValid;
}

bool OASkycopeDroneSensorLdResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azimuth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensor_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OASkycopeDroneSensorLdResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OASkycope
