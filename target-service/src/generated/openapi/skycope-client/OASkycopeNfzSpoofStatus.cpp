/**
 * 
 * Description text
 *
 * The version of the OpenAPI document: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OASkycopeNfzSpoofStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OASkycopeHelpers.h"

namespace OASkycope {

OASkycopeNfzSpoofStatus::OASkycopeNfzSpoofStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OASkycopeNfzSpoofStatus::OASkycopeNfzSpoofStatus() {
    this->initializeModel();
}

OASkycopeNfzSpoofStatus::~OASkycopeNfzSpoofStatus() {}

void OASkycopeNfzSpoofStatus::initializeModel() {

    m_direction_spoof_inprogress_isSet = false;
    m_direction_spoof_inprogress_isValid = false;

    m_nfz_height_isSet = false;
    m_nfz_height_isValid = false;

    m_nfz_inprogress_isSet = false;
    m_nfz_inprogress_isValid = false;

    m_nfz_latitude_isSet = false;
    m_nfz_latitude_isValid = false;

    m_nfz_longitude_isSet = false;
    m_nfz_longitude_isValid = false;
}

void OASkycopeNfzSpoofStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OASkycopeNfzSpoofStatus::fromJsonObject(QJsonObject json) {

    m_direction_spoof_inprogress_isValid = ::OASkycope::fromJsonValue(m_direction_spoof_inprogress, json[QString("direction_spoof_inprogress")]);
    m_direction_spoof_inprogress_isSet = !json[QString("direction_spoof_inprogress")].isNull() && m_direction_spoof_inprogress_isValid;

    m_nfz_height_isValid = ::OASkycope::fromJsonValue(m_nfz_height, json[QString("nfz_height")]);
    m_nfz_height_isSet = !json[QString("nfz_height")].isNull() && m_nfz_height_isValid;

    m_nfz_inprogress_isValid = ::OASkycope::fromJsonValue(m_nfz_inprogress, json[QString("nfz_inprogress")]);
    m_nfz_inprogress_isSet = !json[QString("nfz_inprogress")].isNull() && m_nfz_inprogress_isValid;

    m_nfz_latitude_isValid = ::OASkycope::fromJsonValue(m_nfz_latitude, json[QString("nfz_latitude")]);
    m_nfz_latitude_isSet = !json[QString("nfz_latitude")].isNull() && m_nfz_latitude_isValid;

    m_nfz_longitude_isValid = ::OASkycope::fromJsonValue(m_nfz_longitude, json[QString("nfz_longitude")]);
    m_nfz_longitude_isSet = !json[QString("nfz_longitude")].isNull() && m_nfz_longitude_isValid;
}

QString OASkycopeNfzSpoofStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OASkycopeNfzSpoofStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_direction_spoof_inprogress_isSet) {
        obj.insert(QString("direction_spoof_inprogress"), ::OASkycope::toJsonValue(m_direction_spoof_inprogress));
    }
    if (m_nfz_height_isSet) {
        obj.insert(QString("nfz_height"), ::OASkycope::toJsonValue(m_nfz_height));
    }
    if (m_nfz_inprogress_isSet) {
        obj.insert(QString("nfz_inprogress"), ::OASkycope::toJsonValue(m_nfz_inprogress));
    }
    if (m_nfz_latitude_isSet) {
        obj.insert(QString("nfz_latitude"), ::OASkycope::toJsonValue(m_nfz_latitude));
    }
    if (m_nfz_longitude_isSet) {
        obj.insert(QString("nfz_longitude"), ::OASkycope::toJsonValue(m_nfz_longitude));
    }
    return obj;
}

bool OASkycopeNfzSpoofStatus::isDirectionSpoofInprogress() const {
    return m_direction_spoof_inprogress;
}
void OASkycopeNfzSpoofStatus::setDirectionSpoofInprogress(const bool &direction_spoof_inprogress) {
    m_direction_spoof_inprogress = direction_spoof_inprogress;
    m_direction_spoof_inprogress_isSet = true;
}

bool OASkycopeNfzSpoofStatus::is_direction_spoof_inprogress_Set() const{
    return m_direction_spoof_inprogress_isSet;
}

bool OASkycopeNfzSpoofStatus::is_direction_spoof_inprogress_Valid() const{
    return m_direction_spoof_inprogress_isValid;
}

qint32 OASkycopeNfzSpoofStatus::getNfzHeight() const {
    return m_nfz_height;
}
void OASkycopeNfzSpoofStatus::setNfzHeight(const qint32 &nfz_height) {
    m_nfz_height = nfz_height;
    m_nfz_height_isSet = true;
}

bool OASkycopeNfzSpoofStatus::is_nfz_height_Set() const{
    return m_nfz_height_isSet;
}

bool OASkycopeNfzSpoofStatus::is_nfz_height_Valid() const{
    return m_nfz_height_isValid;
}

bool OASkycopeNfzSpoofStatus::isNfzInprogress() const {
    return m_nfz_inprogress;
}
void OASkycopeNfzSpoofStatus::setNfzInprogress(const bool &nfz_inprogress) {
    m_nfz_inprogress = nfz_inprogress;
    m_nfz_inprogress_isSet = true;
}

bool OASkycopeNfzSpoofStatus::is_nfz_inprogress_Set() const{
    return m_nfz_inprogress_isSet;
}

bool OASkycopeNfzSpoofStatus::is_nfz_inprogress_Valid() const{
    return m_nfz_inprogress_isValid;
}

qint32 OASkycopeNfzSpoofStatus::getNfzLatitude() const {
    return m_nfz_latitude;
}
void OASkycopeNfzSpoofStatus::setNfzLatitude(const qint32 &nfz_latitude) {
    m_nfz_latitude = nfz_latitude;
    m_nfz_latitude_isSet = true;
}

bool OASkycopeNfzSpoofStatus::is_nfz_latitude_Set() const{
    return m_nfz_latitude_isSet;
}

bool OASkycopeNfzSpoofStatus::is_nfz_latitude_Valid() const{
    return m_nfz_latitude_isValid;
}

qint32 OASkycopeNfzSpoofStatus::getNfzLongitude() const {
    return m_nfz_longitude;
}
void OASkycopeNfzSpoofStatus::setNfzLongitude(const qint32 &nfz_longitude) {
    m_nfz_longitude = nfz_longitude;
    m_nfz_longitude_isSet = true;
}

bool OASkycopeNfzSpoofStatus::is_nfz_longitude_Set() const{
    return m_nfz_longitude_isSet;
}

bool OASkycopeNfzSpoofStatus::is_nfz_longitude_Valid() const{
    return m_nfz_longitude_isValid;
}

bool OASkycopeNfzSpoofStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_direction_spoof_inprogress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfz_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfz_inprogress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfz_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfz_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OASkycopeNfzSpoofStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OASkycope
