/**
 * 
 * Description text
 *
 * The version of the OpenAPI document: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OASkycopeSpoofStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OASkycopeHelpers.h"

namespace OASkycope {

OASkycopeSpoofStatus::OASkycopeSpoofStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OASkycopeSpoofStatus::OASkycopeSpoofStatus() {
    this->initializeModel();
}

OASkycopeSpoofStatus::~OASkycopeSpoofStatus() {}

void OASkycopeSpoofStatus::initializeModel() {

    m_can_cancel_spoof_isSet = false;
    m_can_cancel_spoof_isValid = false;

    m_detection_direction_isSet = false;
    m_detection_direction_isValid = false;

    m_spoof_direction_isSet = false;
    m_spoof_direction_isValid = false;

    m_spoof_range_isSet = false;
    m_spoof_range_isValid = false;

    m_spoofing_isSet = false;
    m_spoofing_isValid = false;
}

void OASkycopeSpoofStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OASkycopeSpoofStatus::fromJsonObject(QJsonObject json) {

    m_can_cancel_spoof_isValid = ::OASkycope::fromJsonValue(m_can_cancel_spoof, json[QString("can_cancel_spoof")]);
    m_can_cancel_spoof_isSet = !json[QString("can_cancel_spoof")].isNull() && m_can_cancel_spoof_isValid;

    m_detection_direction_isValid = ::OASkycope::fromJsonValue(m_detection_direction, json[QString("detection_direction")]);
    m_detection_direction_isSet = !json[QString("detection_direction")].isNull() && m_detection_direction_isValid;

    m_spoof_direction_isValid = ::OASkycope::fromJsonValue(m_spoof_direction, json[QString("spoof_direction")]);
    m_spoof_direction_isSet = !json[QString("spoof_direction")].isNull() && m_spoof_direction_isValid;

    m_spoof_range_isValid = ::OASkycope::fromJsonValue(m_spoof_range, json[QString("spoof_range")]);
    m_spoof_range_isSet = !json[QString("spoof_range")].isNull() && m_spoof_range_isValid;

    m_spoofing_isValid = ::OASkycope::fromJsonValue(m_spoofing, json[QString("spoofing")]);
    m_spoofing_isSet = !json[QString("spoofing")].isNull() && m_spoofing_isValid;
}

QString OASkycopeSpoofStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OASkycopeSpoofStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_can_cancel_spoof_isSet) {
        obj.insert(QString("can_cancel_spoof"), ::OASkycope::toJsonValue(m_can_cancel_spoof));
    }
    if (m_detection_direction_isSet) {
        obj.insert(QString("detection_direction"), ::OASkycope::toJsonValue(m_detection_direction));
    }
    if (m_spoof_direction_isSet) {
        obj.insert(QString("spoof_direction"), ::OASkycope::toJsonValue(m_spoof_direction));
    }
    if (m_spoof_range_isSet) {
        obj.insert(QString("spoof_range"), ::OASkycope::toJsonValue(m_spoof_range));
    }
    if (m_spoofing_isSet) {
        obj.insert(QString("spoofing"), ::OASkycope::toJsonValue(m_spoofing));
    }
    return obj;
}

bool OASkycopeSpoofStatus::isCanCancelSpoof() const {
    return m_can_cancel_spoof;
}
void OASkycopeSpoofStatus::setCanCancelSpoof(const bool &can_cancel_spoof) {
    m_can_cancel_spoof = can_cancel_spoof;
    m_can_cancel_spoof_isSet = true;
}

bool OASkycopeSpoofStatus::is_can_cancel_spoof_Set() const{
    return m_can_cancel_spoof_isSet;
}

bool OASkycopeSpoofStatus::is_can_cancel_spoof_Valid() const{
    return m_can_cancel_spoof_isValid;
}

qint32 OASkycopeSpoofStatus::getDetectionDirection() const {
    return m_detection_direction;
}
void OASkycopeSpoofStatus::setDetectionDirection(const qint32 &detection_direction) {
    m_detection_direction = detection_direction;
    m_detection_direction_isSet = true;
}

bool OASkycopeSpoofStatus::is_detection_direction_Set() const{
    return m_detection_direction_isSet;
}

bool OASkycopeSpoofStatus::is_detection_direction_Valid() const{
    return m_detection_direction_isValid;
}

qint32 OASkycopeSpoofStatus::getSpoofDirection() const {
    return m_spoof_direction;
}
void OASkycopeSpoofStatus::setSpoofDirection(const qint32 &spoof_direction) {
    m_spoof_direction = spoof_direction;
    m_spoof_direction_isSet = true;
}

bool OASkycopeSpoofStatus::is_spoof_direction_Set() const{
    return m_spoof_direction_isSet;
}

bool OASkycopeSpoofStatus::is_spoof_direction_Valid() const{
    return m_spoof_direction_isValid;
}

qint32 OASkycopeSpoofStatus::getSpoofRange() const {
    return m_spoof_range;
}
void OASkycopeSpoofStatus::setSpoofRange(const qint32 &spoof_range) {
    m_spoof_range = spoof_range;
    m_spoof_range_isSet = true;
}

bool OASkycopeSpoofStatus::is_spoof_range_Set() const{
    return m_spoof_range_isSet;
}

bool OASkycopeSpoofStatus::is_spoof_range_Valid() const{
    return m_spoof_range_isValid;
}

bool OASkycopeSpoofStatus::isSpoofing() const {
    return m_spoofing;
}
void OASkycopeSpoofStatus::setSpoofing(const bool &spoofing) {
    m_spoofing = spoofing;
    m_spoofing_isSet = true;
}

bool OASkycopeSpoofStatus::is_spoofing_Set() const{
    return m_spoofing_isSet;
}

bool OASkycopeSpoofStatus::is_spoofing_Valid() const{
    return m_spoofing_isValid;
}

bool OASkycopeSpoofStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_cancel_spoof_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detection_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spoof_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spoof_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spoofing_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OASkycopeSpoofStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OASkycope
