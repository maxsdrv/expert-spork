/**
 * 
 * Description text
 *
 * The version of the OpenAPI document: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OASkycopeActions.h
 *
 * 
 */

#ifndef OASkycopeActions_H
#define OASkycopeActions_H

#include <QJsonObject>


#include "OASkycopeEnum.h"
#include "OASkycopeObject.h"

namespace OASkycope {

class OASkycopeActions : public OASkycopeObject {
public:
    OASkycopeActions();
    OASkycopeActions(QString json);
    ~OASkycopeActions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isCanCancelDefense() const;
    void setCanCancelDefense(const bool &can_cancel_defense);
    bool is_can_cancel_defense_Set() const;
    bool is_can_cancel_defense_Valid() const;

    bool isCanFriend() const;
    void setCanFriend(const bool &can_friend);
    bool is_can_friend_Set() const;
    bool is_can_friend_Valid() const;

    bool isCanIgnore() const;
    void setCanIgnore(const bool &can_ignore);
    bool is_can_ignore_Set() const;
    bool is_can_ignore_Valid() const;

    bool isCanLdvalTest() const;
    void setCanLdvalTest(const bool &can_ldval_test);
    bool is_can_ldval_test_Set() const;
    bool is_can_ldval_test_Valid() const;

    bool isCanManualDefend() const;
    void setCanManualDefend(const bool &can_manual_defend);
    bool is_can_manual_defend_Set() const;
    bool is_can_manual_defend_Valid() const;

    bool isCanSmartDefend() const;
    void setCanSmartDefend(const bool &can_smart_defend);
    bool is_can_smart_defend_Set() const;
    bool is_can_smart_defend_Valid() const;

    bool isIsDecrypted() const;
    void setIsDecrypted(const bool &is_decrypted);
    bool is_is_decrypted_Set() const;
    bool is_is_decrypted_Valid() const;

    qint32 getIsSpoofable() const;
    void setIsSpoofable(const qint32 &is_spoofable);
    bool is_is_spoofable_Set() const;
    bool is_is_spoofable_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_can_cancel_defense;
    bool m_can_cancel_defense_isSet;
    bool m_can_cancel_defense_isValid;

    bool m_can_friend;
    bool m_can_friend_isSet;
    bool m_can_friend_isValid;

    bool m_can_ignore;
    bool m_can_ignore_isSet;
    bool m_can_ignore_isValid;

    bool m_can_ldval_test;
    bool m_can_ldval_test_isSet;
    bool m_can_ldval_test_isValid;

    bool m_can_manual_defend;
    bool m_can_manual_defend_isSet;
    bool m_can_manual_defend_isValid;

    bool m_can_smart_defend;
    bool m_can_smart_defend_isSet;
    bool m_can_smart_defend_isValid;

    bool m_is_decrypted;
    bool m_is_decrypted_isSet;
    bool m_is_decrypted_isValid;

    qint32 m_is_spoofable;
    bool m_is_spoofable_isSet;
    bool m_is_spoofable_isValid;
};

} // namespace OASkycope

Q_DECLARE_METATYPE(OASkycope::OASkycopeActions)

#endif // OASkycopeActions_H
