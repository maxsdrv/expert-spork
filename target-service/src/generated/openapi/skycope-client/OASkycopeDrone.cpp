/**
 * 
 * Description text
 *
 * The version of the OpenAPI document: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OASkycopeDrone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OASkycopeHelpers.h"

namespace OASkycope {

OASkycopeDrone::OASkycopeDrone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OASkycopeDrone::OASkycopeDrone() {
    this->initializeModel();
}

OASkycopeDrone::~OASkycopeDrone() {}

void OASkycopeDrone::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_bw_khz_isSet = false;
    m_bw_khz_isValid = false;

    m_color_trajectory_isSet = false;
    m_color_trajectory_isValid = false;

    m_detect_counter_isSet = false;
    m_detect_counter_isValid = false;

    m_detection_engine_isSet = false;
    m_detection_engine_isValid = false;

    m_df_marker_gps_isSet = false;
    m_df_marker_gps_isValid = false;

    m_drone_height_isSet = false;
    m_drone_height_isValid = false;

    m_fc_khz_and_count_isSet = false;
    m_fc_khz_and_count_isValid = false;

    m_fc_khz_and_count_recent_isSet = false;
    m_fc_khz_and_count_recent_isValid = false;

    m_finder_isSet = false;
    m_finder_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_frequency_hop_isSet = false;
    m_frequency_hop_isValid = false;

    m_gps_isSet = false;
    m_gps_isValid = false;

    m_gps_sector_isSet = false;
    m_gps_sector_isValid = false;

    m_gps_trajectory_isSet = false;
    m_gps_trajectory_isValid = false;

    m_gui_first_detected_at_isSet = false;
    m_gui_first_detected_at_isValid = false;

    m_gui_id_isSet = false;
    m_gui_id_isValid = false;

    m_gui_index_isSet = false;
    m_gui_index_isValid = false;

    m_home_gps_isSet = false;
    m_home_gps_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_in_defending_queue_isSet = false;
    m_in_defending_queue_isValid = false;

    m_is_dual_wbj_isSet = false;
    m_is_dual_wbj_isValid = false;

    m_is_ldval_testing_isSet = false;
    m_is_ldval_testing_isValid = false;

    m_is_remote_id_isSet = false;
    m_is_remote_id_isValid = false;

    m_is_triple_wbj_isSet = false;
    m_is_triple_wbj_isValid = false;

    m_is_wifi_tab_isSet = false;
    m_is_wifi_tab_isValid = false;

    m_ld_result_isSet = false;
    m_ld_result_isValid = false;

    m_lf_error_radius_isSet = false;
    m_lf_error_radius_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_modulation_isSet = false;
    m_modulation_isValid = false;

    m_paired_rc_isSet = false;
    m_paired_rc_isValid = false;

    m_prev_id_isSet = false;
    m_prev_id_isValid = false;

    m_remote_id_model_name_isSet = false;
    m_remote_id_model_name_isValid = false;

    m_seen_times_isSet = false;
    m_seen_times_isValid = false;

    m_sensor_ids_isSet = false;
    m_sensor_ids_isValid = false;

    m_sensors_isSet = false;
    m_sensors_isValid = false;

    m_shared_names_isSet = false;
    m_shared_names_isValid = false;

    m_r_signals_isSet = false;
    m_r_signals_isValid = false;

    m_spoof_status_isSet = false;
    m_spoof_status_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_switch_for_whitelist_isSet = false;
    m_switch_for_whitelist_isValid = false;

    m_threat_isSet = false;
    m_threat_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_wifi_mac_id_isSet = false;
    m_wifi_mac_id_isValid = false;

    m_wifi_ssid_isSet = false;
    m_wifi_ssid_isValid = false;

    m_wl_name_isSet = false;
    m_wl_name_isValid = false;
}

void OASkycopeDrone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OASkycopeDrone::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OASkycope::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_bw_khz_isValid = ::OASkycope::fromJsonValue(m_bw_khz, json[QString("bw_khz")]);
    m_bw_khz_isSet = !json[QString("bw_khz")].isNull() && m_bw_khz_isValid;

    m_color_trajectory_isValid = ::OASkycope::fromJsonValue(m_color_trajectory, json[QString("color_trajectory")]);
    m_color_trajectory_isSet = !json[QString("color_trajectory")].isNull() && m_color_trajectory_isValid;

    m_detect_counter_isValid = ::OASkycope::fromJsonValue(m_detect_counter, json[QString("detect_counter")]);
    m_detect_counter_isSet = !json[QString("detect_counter")].isNull() && m_detect_counter_isValid;

    m_detection_engine_isValid = ::OASkycope::fromJsonValue(m_detection_engine, json[QString("detection_engine")]);
    m_detection_engine_isSet = !json[QString("detection_engine")].isNull() && m_detection_engine_isValid;

    m_df_marker_gps_isValid = ::OASkycope::fromJsonValue(m_df_marker_gps, json[QString("df_marker_gps")]);
    m_df_marker_gps_isSet = !json[QString("df_marker_gps")].isNull() && m_df_marker_gps_isValid;

    m_drone_height_isValid = ::OASkycope::fromJsonValue(m_drone_height, json[QString("drone_height")]);
    m_drone_height_isSet = !json[QString("drone_height")].isNull() && m_drone_height_isValid;

    m_fc_khz_and_count_isValid = ::OASkycope::fromJsonValue(m_fc_khz_and_count, json[QString("fc_khz_and_count")]);
    m_fc_khz_and_count_isSet = !json[QString("fc_khz_and_count")].isNull() && m_fc_khz_and_count_isValid;

    if(json["fc_khz_and_count_recent"].isArray()){
        auto arr = json["fc_khz_and_count_recent"].toArray();
        m_fc_khz_and_count_recent_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<qint32> item;
                m_fc_khz_and_count_recent_isValid &= ::OASkycope::fromJsonValue(item, jval);
                m_fc_khz_and_count_recent_isSet = !jval.isNull() && m_fc_khz_and_count_recent_isValid;
                m_fc_khz_and_count_recent.push_back(item);
            }
        }
    }

    m_finder_isValid = ::OASkycope::fromJsonValue(m_finder, json[QString("finder")]);
    m_finder_isSet = !json[QString("finder")].isNull() && m_finder_isValid;

    m_frequency_isValid = ::OASkycope::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_frequency_hop_isValid = ::OASkycope::fromJsonValue(m_frequency_hop, json[QString("frequency_hop")]);
    m_frequency_hop_isSet = !json[QString("frequency_hop")].isNull() && m_frequency_hop_isValid;

    m_gps_isValid = ::OASkycope::fromJsonValue(m_gps, json[QString("gps")]);
    m_gps_isSet = !json[QString("gps")].isNull() && m_gps_isValid;

    if(json["gps_sector"].isObject()){
        auto varmap = json["gps_sector"].toObject().toVariantMap();
        m_gps_sector_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<OASkycopeGps> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_gps_sector_isValid &= ::OASkycope::fromJsonValue(item, jval);
                m_gps_sector_isSet &= !jval.isNull() && m_gps_sector_isValid;
                m_gps_sector.insert(m_gps_sector.end(), val, item);
            }
        }
    }

    m_gps_trajectory_isValid = ::OASkycope::fromJsonValue(m_gps_trajectory, json[QString("gps_trajectory")]);
    m_gps_trajectory_isSet = !json[QString("gps_trajectory")].isNull() && m_gps_trajectory_isValid;

    m_gui_first_detected_at_isValid = ::OASkycope::fromJsonValue(m_gui_first_detected_at, json[QString("gui_first_detected_at")]);
    m_gui_first_detected_at_isSet = !json[QString("gui_first_detected_at")].isNull() && m_gui_first_detected_at_isValid;

    m_gui_id_isValid = ::OASkycope::fromJsonValue(m_gui_id, json[QString("gui_id")]);
    m_gui_id_isSet = !json[QString("gui_id")].isNull() && m_gui_id_isValid;

    m_gui_index_isValid = ::OASkycope::fromJsonValue(m_gui_index, json[QString("gui_index")]);
    m_gui_index_isSet = !json[QString("gui_index")].isNull() && m_gui_index_isValid;

    m_home_gps_isValid = ::OASkycope::fromJsonValue(m_home_gps, json[QString("home_gps")]);
    m_home_gps_isSet = !json[QString("home_gps")].isNull() && m_home_gps_isValid;

    m_icon_isValid = ::OASkycope::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_id_isValid = ::OASkycope::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_in_defending_queue_isValid = ::OASkycope::fromJsonValue(m_in_defending_queue, json[QString("in_defending_queue")]);
    m_in_defending_queue_isSet = !json[QString("in_defending_queue")].isNull() && m_in_defending_queue_isValid;

    m_is_dual_wbj_isValid = ::OASkycope::fromJsonValue(m_is_dual_wbj, json[QString("is_dual_wbj")]);
    m_is_dual_wbj_isSet = !json[QString("is_dual_wbj")].isNull() && m_is_dual_wbj_isValid;

    m_is_ldval_testing_isValid = ::OASkycope::fromJsonValue(m_is_ldval_testing, json[QString("is_ldval_testing")]);
    m_is_ldval_testing_isSet = !json[QString("is_ldval_testing")].isNull() && m_is_ldval_testing_isValid;

    m_is_remote_id_isValid = ::OASkycope::fromJsonValue(m_is_remote_id, json[QString("is_remote_id")]);
    m_is_remote_id_isSet = !json[QString("is_remote_id")].isNull() && m_is_remote_id_isValid;

    m_is_triple_wbj_isValid = ::OASkycope::fromJsonValue(m_is_triple_wbj, json[QString("is_triple_wbj")]);
    m_is_triple_wbj_isSet = !json[QString("is_triple_wbj")].isNull() && m_is_triple_wbj_isValid;

    m_is_wifi_tab_isValid = ::OASkycope::fromJsonValue(m_is_wifi_tab, json[QString("is_wifi_tab")]);
    m_is_wifi_tab_isSet = !json[QString("is_wifi_tab")].isNull() && m_is_wifi_tab_isValid;

    m_ld_result_isValid = ::OASkycope::fromJsonValue(m_ld_result, json[QString("ld_result")]);
    m_ld_result_isSet = !json[QString("ld_result")].isNull() && m_ld_result_isValid;

    m_lf_error_radius_isValid = ::OASkycope::fromJsonValue(m_lf_error_radius, json[QString("lf_error_radius")]);
    m_lf_error_radius_isSet = !json[QString("lf_error_radius")].isNull() && m_lf_error_radius_isValid;

    m_model_isValid = ::OASkycope::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_modulation_isValid = ::OASkycope::fromJsonValue(m_modulation, json[QString("modulation")]);
    m_modulation_isSet = !json[QString("modulation")].isNull() && m_modulation_isValid;

    m_paired_rc_isValid = ::OASkycope::fromJsonValue(m_paired_rc, json[QString("paired_rc")]);
    m_paired_rc_isSet = !json[QString("paired_rc")].isNull() && m_paired_rc_isValid;

    m_prev_id_isValid = ::OASkycope::fromJsonValue(m_prev_id, json[QString("prev_id")]);
    m_prev_id_isSet = !json[QString("prev_id")].isNull() && m_prev_id_isValid;

    m_remote_id_model_name_isValid = ::OASkycope::fromJsonValue(m_remote_id_model_name, json[QString("remote_id_model_name")]);
    m_remote_id_model_name_isSet = !json[QString("remote_id_model_name")].isNull() && m_remote_id_model_name_isValid;

    m_seen_times_isValid = ::OASkycope::fromJsonValue(m_seen_times, json[QString("seen_times")]);
    m_seen_times_isSet = !json[QString("seen_times")].isNull() && m_seen_times_isValid;

    m_sensor_ids_isValid = ::OASkycope::fromJsonValue(m_sensor_ids, json[QString("sensor_ids")]);
    m_sensor_ids_isSet = !json[QString("sensor_ids")].isNull() && m_sensor_ids_isValid;

    m_sensors_isValid = ::OASkycope::fromJsonValue(m_sensors, json[QString("sensors")]);
    m_sensors_isSet = !json[QString("sensors")].isNull() && m_sensors_isValid;

    m_shared_names_isValid = ::OASkycope::fromJsonValue(m_shared_names, json[QString("shared_names")]);
    m_shared_names_isSet = !json[QString("shared_names")].isNull() && m_shared_names_isValid;

    m_r_signals_isValid = ::OASkycope::fromJsonValue(m_r_signals, json[QString("signals")]);
    m_r_signals_isSet = !json[QString("signals")].isNull() && m_r_signals_isValid;

    m_spoof_status_isValid = ::OASkycope::fromJsonValue(m_spoof_status, json[QString("spoof_status")]);
    m_spoof_status_isSet = !json[QString("spoof_status")].isNull() && m_spoof_status_isValid;

    m_status_isValid = ::OASkycope::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_switch_for_whitelist_isValid = ::OASkycope::fromJsonValue(m_switch_for_whitelist, json[QString("switch_for_whitelist")]);
    m_switch_for_whitelist_isSet = !json[QString("switch_for_whitelist")].isNull() && m_switch_for_whitelist_isValid;

    m_threat_isValid = ::OASkycope::fromJsonValue(m_threat, json[QString("threat")]);
    m_threat_isSet = !json[QString("threat")].isNull() && m_threat_isValid;

    m_type_isValid = ::OASkycope::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_wifi_mac_id_isValid = ::OASkycope::fromJsonValue(m_wifi_mac_id, json[QString("wifi_mac_id")]);
    m_wifi_mac_id_isSet = !json[QString("wifi_mac_id")].isNull() && m_wifi_mac_id_isValid;

    m_wifi_ssid_isValid = ::OASkycope::fromJsonValue(m_wifi_ssid, json[QString("wifi_ssid")]);
    m_wifi_ssid_isSet = !json[QString("wifi_ssid")].isNull() && m_wifi_ssid_isValid;

    m_wl_name_isValid = ::OASkycope::fromJsonValue(m_wl_name, json[QString("wl_name")]);
    m_wl_name_isSet = !json[QString("wl_name")].isNull() && m_wl_name_isValid;
}

QString OASkycopeDrone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OASkycopeDrone::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.isSet()) {
        obj.insert(QString("actions"), ::OASkycope::toJsonValue(m_actions));
    }
    if (m_bw_khz_isSet) {
        obj.insert(QString("bw_khz"), ::OASkycope::toJsonValue(m_bw_khz));
    }
    if (m_color_trajectory_isSet) {
        obj.insert(QString("color_trajectory"), ::OASkycope::toJsonValue(m_color_trajectory));
    }
    if (m_detect_counter_isSet) {
        obj.insert(QString("detect_counter"), ::OASkycope::toJsonValue(m_detect_counter));
    }
    if (m_detection_engine_isSet) {
        obj.insert(QString("detection_engine"), ::OASkycope::toJsonValue(m_detection_engine));
    }
    if (m_df_marker_gps.size() > 0) {
        obj.insert(QString("df_marker_gps"), ::OASkycope::toJsonValue(m_df_marker_gps));
    }
    if (m_drone_height_isSet) {
        obj.insert(QString("drone_height"), ::OASkycope::toJsonValue(m_drone_height));
    }
    if (m_fc_khz_and_count.isSet()) {
        obj.insert(QString("fc_khz_and_count"), ::OASkycope::toJsonValue(m_fc_khz_and_count));
    }
    if (m_fc_khz_and_count_recent.size() > 0) {
        
        obj.insert(QString("fc_khz_and_count_recent"), toJsonValue(m_fc_khz_and_count_recent));
    }
    if (m_finder_isSet) {
        obj.insert(QString("finder"), ::OASkycope::toJsonValue(m_finder));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OASkycope::toJsonValue(m_frequency));
    }
    if (m_frequency_hop_isSet) {
        obj.insert(QString("frequency_hop"), ::OASkycope::toJsonValue(m_frequency_hop));
    }
    if (m_gps.isSet()) {
        obj.insert(QString("gps"), ::OASkycope::toJsonValue(m_gps));
    }
    if (m_gps_sector.size() > 0) {
        
        obj.insert(QString("gps_sector"), toJsonValue(m_gps_sector));
    }
    if (m_gps_trajectory.size() > 0) {
        obj.insert(QString("gps_trajectory"), ::OASkycope::toJsonValue(m_gps_trajectory));
    }
    if (m_gui_first_detected_at_isSet) {
        obj.insert(QString("gui_first_detected_at"), ::OASkycope::toJsonValue(m_gui_first_detected_at));
    }
    if (m_gui_id_isSet) {
        obj.insert(QString("gui_id"), ::OASkycope::toJsonValue(m_gui_id));
    }
    if (m_gui_index_isSet) {
        obj.insert(QString("gui_index"), ::OASkycope::toJsonValue(m_gui_index));
    }
    if (m_home_gps_isSet) {
        obj.insert(QString("home_gps"), ::OASkycope::toJsonValue(m_home_gps));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OASkycope::toJsonValue(m_icon));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OASkycope::toJsonValue(m_id));
    }
    if (m_in_defending_queue_isSet) {
        obj.insert(QString("in_defending_queue"), ::OASkycope::toJsonValue(m_in_defending_queue));
    }
    if (m_is_dual_wbj_isSet) {
        obj.insert(QString("is_dual_wbj"), ::OASkycope::toJsonValue(m_is_dual_wbj));
    }
    if (m_is_ldval_testing_isSet) {
        obj.insert(QString("is_ldval_testing"), ::OASkycope::toJsonValue(m_is_ldval_testing));
    }
    if (m_is_remote_id_isSet) {
        obj.insert(QString("is_remote_id"), ::OASkycope::toJsonValue(m_is_remote_id));
    }
    if (m_is_triple_wbj_isSet) {
        obj.insert(QString("is_triple_wbj"), ::OASkycope::toJsonValue(m_is_triple_wbj));
    }
    if (m_is_wifi_tab_isSet) {
        obj.insert(QString("is_wifi_tab"), ::OASkycope::toJsonValue(m_is_wifi_tab));
    }
    if (m_ld_result.size() > 0) {
        obj.insert(QString("ld_result"), ::OASkycope::toJsonValue(m_ld_result));
    }
    if (m_lf_error_radius_isSet) {
        obj.insert(QString("lf_error_radius"), ::OASkycope::toJsonValue(m_lf_error_radius));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OASkycope::toJsonValue(m_model));
    }
    if (m_modulation_isSet) {
        obj.insert(QString("modulation"), ::OASkycope::toJsonValue(m_modulation));
    }
    if (m_paired_rc.isSet()) {
        obj.insert(QString("paired_rc"), ::OASkycope::toJsonValue(m_paired_rc));
    }
    if (m_prev_id_isSet) {
        obj.insert(QString("prev_id"), ::OASkycope::toJsonValue(m_prev_id));
    }
    if (m_remote_id_model_name_isSet) {
        obj.insert(QString("remote_id_model_name"), ::OASkycope::toJsonValue(m_remote_id_model_name));
    }
    if (m_seen_times_isSet) {
        obj.insert(QString("seen_times"), ::OASkycope::toJsonValue(m_seen_times));
    }
    if (m_sensor_ids.size() > 0) {
        obj.insert(QString("sensor_ids"), ::OASkycope::toJsonValue(m_sensor_ids));
    }
    if (m_sensors.size() > 0) {
        obj.insert(QString("sensors"), ::OASkycope::toJsonValue(m_sensors));
    }
    if (m_shared_names.isSet()) {
        obj.insert(QString("shared_names"), ::OASkycope::toJsonValue(m_shared_names));
    }
    if (m_r_signals.size() > 0) {
        obj.insert(QString("signals"), ::OASkycope::toJsonValue(m_r_signals));
    }
    if (m_spoof_status.isSet()) {
        obj.insert(QString("spoof_status"), ::OASkycope::toJsonValue(m_spoof_status));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OASkycope::toJsonValue(m_status));
    }
    if (m_switch_for_whitelist_isSet) {
        obj.insert(QString("switch_for_whitelist"), ::OASkycope::toJsonValue(m_switch_for_whitelist));
    }
    if (m_threat.isSet()) {
        obj.insert(QString("threat"), ::OASkycope::toJsonValue(m_threat));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OASkycope::toJsonValue(m_type));
    }
    if (m_wifi_mac_id_isSet) {
        obj.insert(QString("wifi_mac_id"), ::OASkycope::toJsonValue(m_wifi_mac_id));
    }
    if (m_wifi_ssid_isSet) {
        obj.insert(QString("wifi_ssid"), ::OASkycope::toJsonValue(m_wifi_ssid));
    }
    if (m_wl_name_isSet) {
        obj.insert(QString("wl_name"), ::OASkycope::toJsonValue(m_wl_name));
    }
    return obj;
}

OASkycopeActions OASkycopeDrone::getActions() const {
    return m_actions;
}
void OASkycopeDrone::setActions(const OASkycopeActions &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OASkycopeDrone::is_actions_Set() const{
    return m_actions_isSet;
}

bool OASkycopeDrone::is_actions_Valid() const{
    return m_actions_isValid;
}

qint32 OASkycopeDrone::getBwKhz() const {
    return m_bw_khz;
}
void OASkycopeDrone::setBwKhz(const qint32 &bw_khz) {
    m_bw_khz = bw_khz;
    m_bw_khz_isSet = true;
}

bool OASkycopeDrone::is_bw_khz_Set() const{
    return m_bw_khz_isSet;
}

bool OASkycopeDrone::is_bw_khz_Valid() const{
    return m_bw_khz_isValid;
}

QString OASkycopeDrone::getColorTrajectory() const {
    return m_color_trajectory;
}
void OASkycopeDrone::setColorTrajectory(const QString &color_trajectory) {
    m_color_trajectory = color_trajectory;
    m_color_trajectory_isSet = true;
}

bool OASkycopeDrone::is_color_trajectory_Set() const{
    return m_color_trajectory_isSet;
}

bool OASkycopeDrone::is_color_trajectory_Valid() const{
    return m_color_trajectory_isValid;
}

qint32 OASkycopeDrone::getDetectCounter() const {
    return m_detect_counter;
}
void OASkycopeDrone::setDetectCounter(const qint32 &detect_counter) {
    m_detect_counter = detect_counter;
    m_detect_counter_isSet = true;
}

bool OASkycopeDrone::is_detect_counter_Set() const{
    return m_detect_counter_isSet;
}

bool OASkycopeDrone::is_detect_counter_Valid() const{
    return m_detect_counter_isValid;
}

QString OASkycopeDrone::getDetectionEngine() const {
    return m_detection_engine;
}
void OASkycopeDrone::setDetectionEngine(const QString &detection_engine) {
    m_detection_engine = detection_engine;
    m_detection_engine_isSet = true;
}

bool OASkycopeDrone::is_detection_engine_Set() const{
    return m_detection_engine_isSet;
}

bool OASkycopeDrone::is_detection_engine_Valid() const{
    return m_detection_engine_isValid;
}

QList<OASkycopeGps> OASkycopeDrone::getDfMarkerGps() const {
    return m_df_marker_gps;
}
void OASkycopeDrone::setDfMarkerGps(const QList<OASkycopeGps> &df_marker_gps) {
    m_df_marker_gps = df_marker_gps;
    m_df_marker_gps_isSet = true;
}

bool OASkycopeDrone::is_df_marker_gps_Set() const{
    return m_df_marker_gps_isSet;
}

bool OASkycopeDrone::is_df_marker_gps_Valid() const{
    return m_df_marker_gps_isValid;
}

qint32 OASkycopeDrone::getDroneHeight() const {
    return m_drone_height;
}
void OASkycopeDrone::setDroneHeight(const qint32 &drone_height) {
    m_drone_height = drone_height;
    m_drone_height_isSet = true;
}

bool OASkycopeDrone::is_drone_height_Set() const{
    return m_drone_height_isSet;
}

bool OASkycopeDrone::is_drone_height_Valid() const{
    return m_drone_height_isValid;
}

OASkycopeFcKhzAndCount OASkycopeDrone::getFcKhzAndCount() const {
    return m_fc_khz_and_count;
}
void OASkycopeDrone::setFcKhzAndCount(const OASkycopeFcKhzAndCount &fc_khz_and_count) {
    m_fc_khz_and_count = fc_khz_and_count;
    m_fc_khz_and_count_isSet = true;
}

bool OASkycopeDrone::is_fc_khz_and_count_Set() const{
    return m_fc_khz_and_count_isSet;
}

bool OASkycopeDrone::is_fc_khz_and_count_Valid() const{
    return m_fc_khz_and_count_isValid;
}

QList<QList<qint32>> OASkycopeDrone::getFcKhzAndCountRecent() const {
    return m_fc_khz_and_count_recent;
}
void OASkycopeDrone::setFcKhzAndCountRecent(const QList<QList<qint32>> &fc_khz_and_count_recent) {
    m_fc_khz_and_count_recent = fc_khz_and_count_recent;
    m_fc_khz_and_count_recent_isSet = true;
}

bool OASkycopeDrone::is_fc_khz_and_count_recent_Set() const{
    return m_fc_khz_and_count_recent_isSet;
}

bool OASkycopeDrone::is_fc_khz_and_count_recent_Valid() const{
    return m_fc_khz_and_count_recent_isValid;
}

QString OASkycopeDrone::getFinder() const {
    return m_finder;
}
void OASkycopeDrone::setFinder(const QString &finder) {
    m_finder = finder;
    m_finder_isSet = true;
}

bool OASkycopeDrone::is_finder_Set() const{
    return m_finder_isSet;
}

bool OASkycopeDrone::is_finder_Valid() const{
    return m_finder_isValid;
}

QString OASkycopeDrone::getFrequency() const {
    return m_frequency;
}
void OASkycopeDrone::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OASkycopeDrone::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OASkycopeDrone::is_frequency_Valid() const{
    return m_frequency_isValid;
}

bool OASkycopeDrone::isFrequencyHop() const {
    return m_frequency_hop;
}
void OASkycopeDrone::setFrequencyHop(const bool &frequency_hop) {
    m_frequency_hop = frequency_hop;
    m_frequency_hop_isSet = true;
}

bool OASkycopeDrone::is_frequency_hop_Set() const{
    return m_frequency_hop_isSet;
}

bool OASkycopeDrone::is_frequency_hop_Valid() const{
    return m_frequency_hop_isValid;
}

OASkycopeGps OASkycopeDrone::getGps() const {
    return m_gps;
}
void OASkycopeDrone::setGps(const OASkycopeGps &gps) {
    m_gps = gps;
    m_gps_isSet = true;
}

bool OASkycopeDrone::is_gps_Set() const{
    return m_gps_isSet;
}

bool OASkycopeDrone::is_gps_Valid() const{
    return m_gps_isValid;
}

QMap<QString, QList<OASkycopeGps>> OASkycopeDrone::getGpsSector() const {
    return m_gps_sector;
}
void OASkycopeDrone::setGpsSector(const QMap<QString, QList<OASkycopeGps>> &gps_sector) {
    m_gps_sector = gps_sector;
    m_gps_sector_isSet = true;
}

bool OASkycopeDrone::is_gps_sector_Set() const{
    return m_gps_sector_isSet;
}

bool OASkycopeDrone::is_gps_sector_Valid() const{
    return m_gps_sector_isValid;
}

QList<QJsonValue> OASkycopeDrone::getGpsTrajectory() const {
    return m_gps_trajectory;
}
void OASkycopeDrone::setGpsTrajectory(const QList<QJsonValue> &gps_trajectory) {
    m_gps_trajectory = gps_trajectory;
    m_gps_trajectory_isSet = true;
}

bool OASkycopeDrone::is_gps_trajectory_Set() const{
    return m_gps_trajectory_isSet;
}

bool OASkycopeDrone::is_gps_trajectory_Valid() const{
    return m_gps_trajectory_isValid;
}

QString OASkycopeDrone::getGuiFirstDetectedAt() const {
    return m_gui_first_detected_at;
}
void OASkycopeDrone::setGuiFirstDetectedAt(const QString &gui_first_detected_at) {
    m_gui_first_detected_at = gui_first_detected_at;
    m_gui_first_detected_at_isSet = true;
}

bool OASkycopeDrone::is_gui_first_detected_at_Set() const{
    return m_gui_first_detected_at_isSet;
}

bool OASkycopeDrone::is_gui_first_detected_at_Valid() const{
    return m_gui_first_detected_at_isValid;
}

QString OASkycopeDrone::getGuiId() const {
    return m_gui_id;
}
void OASkycopeDrone::setGuiId(const QString &gui_id) {
    m_gui_id = gui_id;
    m_gui_id_isSet = true;
}

bool OASkycopeDrone::is_gui_id_Set() const{
    return m_gui_id_isSet;
}

bool OASkycopeDrone::is_gui_id_Valid() const{
    return m_gui_id_isValid;
}

QString OASkycopeDrone::getGuiIndex() const {
    return m_gui_index;
}
void OASkycopeDrone::setGuiIndex(const QString &gui_index) {
    m_gui_index = gui_index;
    m_gui_index_isSet = true;
}

bool OASkycopeDrone::is_gui_index_Set() const{
    return m_gui_index_isSet;
}

bool OASkycopeDrone::is_gui_index_Valid() const{
    return m_gui_index_isValid;
}

QString OASkycopeDrone::getHomeGps() const {
    return m_home_gps;
}
void OASkycopeDrone::setHomeGps(const QString &home_gps) {
    m_home_gps = home_gps;
    m_home_gps_isSet = true;
}

bool OASkycopeDrone::is_home_gps_Set() const{
    return m_home_gps_isSet;
}

bool OASkycopeDrone::is_home_gps_Valid() const{
    return m_home_gps_isValid;
}

QString OASkycopeDrone::getIcon() const {
    return m_icon;
}
void OASkycopeDrone::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OASkycopeDrone::is_icon_Set() const{
    return m_icon_isSet;
}

bool OASkycopeDrone::is_icon_Valid() const{
    return m_icon_isValid;
}

QString OASkycopeDrone::getId() const {
    return m_id;
}
void OASkycopeDrone::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OASkycopeDrone::is_id_Set() const{
    return m_id_isSet;
}

bool OASkycopeDrone::is_id_Valid() const{
    return m_id_isValid;
}

bool OASkycopeDrone::isInDefendingQueue() const {
    return m_in_defending_queue;
}
void OASkycopeDrone::setInDefendingQueue(const bool &in_defending_queue) {
    m_in_defending_queue = in_defending_queue;
    m_in_defending_queue_isSet = true;
}

bool OASkycopeDrone::is_in_defending_queue_Set() const{
    return m_in_defending_queue_isSet;
}

bool OASkycopeDrone::is_in_defending_queue_Valid() const{
    return m_in_defending_queue_isValid;
}

bool OASkycopeDrone::isIsDualWbj() const {
    return m_is_dual_wbj;
}
void OASkycopeDrone::setIsDualWbj(const bool &is_dual_wbj) {
    m_is_dual_wbj = is_dual_wbj;
    m_is_dual_wbj_isSet = true;
}

bool OASkycopeDrone::is_is_dual_wbj_Set() const{
    return m_is_dual_wbj_isSet;
}

bool OASkycopeDrone::is_is_dual_wbj_Valid() const{
    return m_is_dual_wbj_isValid;
}

bool OASkycopeDrone::isIsLdvalTesting() const {
    return m_is_ldval_testing;
}
void OASkycopeDrone::setIsLdvalTesting(const bool &is_ldval_testing) {
    m_is_ldval_testing = is_ldval_testing;
    m_is_ldval_testing_isSet = true;
}

bool OASkycopeDrone::is_is_ldval_testing_Set() const{
    return m_is_ldval_testing_isSet;
}

bool OASkycopeDrone::is_is_ldval_testing_Valid() const{
    return m_is_ldval_testing_isValid;
}

bool OASkycopeDrone::isIsRemoteId() const {
    return m_is_remote_id;
}
void OASkycopeDrone::setIsRemoteId(const bool &is_remote_id) {
    m_is_remote_id = is_remote_id;
    m_is_remote_id_isSet = true;
}

bool OASkycopeDrone::is_is_remote_id_Set() const{
    return m_is_remote_id_isSet;
}

bool OASkycopeDrone::is_is_remote_id_Valid() const{
    return m_is_remote_id_isValid;
}

bool OASkycopeDrone::isIsTripleWbj() const {
    return m_is_triple_wbj;
}
void OASkycopeDrone::setIsTripleWbj(const bool &is_triple_wbj) {
    m_is_triple_wbj = is_triple_wbj;
    m_is_triple_wbj_isSet = true;
}

bool OASkycopeDrone::is_is_triple_wbj_Set() const{
    return m_is_triple_wbj_isSet;
}

bool OASkycopeDrone::is_is_triple_wbj_Valid() const{
    return m_is_triple_wbj_isValid;
}

bool OASkycopeDrone::isIsWifiTab() const {
    return m_is_wifi_tab;
}
void OASkycopeDrone::setIsWifiTab(const bool &is_wifi_tab) {
    m_is_wifi_tab = is_wifi_tab;
    m_is_wifi_tab_isSet = true;
}

bool OASkycopeDrone::is_is_wifi_tab_Set() const{
    return m_is_wifi_tab_isSet;
}

bool OASkycopeDrone::is_is_wifi_tab_Valid() const{
    return m_is_wifi_tab_isValid;
}

QMap<QString, OASkycopeDroneSensorLdResult> OASkycopeDrone::getLdResult() const {
    return m_ld_result;
}
void OASkycopeDrone::setLdResult(const QMap<QString, OASkycopeDroneSensorLdResult> &ld_result) {
    m_ld_result = ld_result;
    m_ld_result_isSet = true;
}

bool OASkycopeDrone::is_ld_result_Set() const{
    return m_ld_result_isSet;
}

bool OASkycopeDrone::is_ld_result_Valid() const{
    return m_ld_result_isValid;
}

QString OASkycopeDrone::getLfErrorRadius() const {
    return m_lf_error_radius;
}
void OASkycopeDrone::setLfErrorRadius(const QString &lf_error_radius) {
    m_lf_error_radius = lf_error_radius;
    m_lf_error_radius_isSet = true;
}

bool OASkycopeDrone::is_lf_error_radius_Set() const{
    return m_lf_error_radius_isSet;
}

bool OASkycopeDrone::is_lf_error_radius_Valid() const{
    return m_lf_error_radius_isValid;
}

QString OASkycopeDrone::getModel() const {
    return m_model;
}
void OASkycopeDrone::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OASkycopeDrone::is_model_Set() const{
    return m_model_isSet;
}

bool OASkycopeDrone::is_model_Valid() const{
    return m_model_isValid;
}

QString OASkycopeDrone::getModulation() const {
    return m_modulation;
}
void OASkycopeDrone::setModulation(const QString &modulation) {
    m_modulation = modulation;
    m_modulation_isSet = true;
}

bool OASkycopeDrone::is_modulation_Set() const{
    return m_modulation_isSet;
}

bool OASkycopeDrone::is_modulation_Valid() const{
    return m_modulation_isValid;
}

OASkycopePairedRC OASkycopeDrone::getPairedRc() const {
    return m_paired_rc;
}
void OASkycopeDrone::setPairedRc(const OASkycopePairedRC &paired_rc) {
    m_paired_rc = paired_rc;
    m_paired_rc_isSet = true;
}

bool OASkycopeDrone::is_paired_rc_Set() const{
    return m_paired_rc_isSet;
}

bool OASkycopeDrone::is_paired_rc_Valid() const{
    return m_paired_rc_isValid;
}

QString OASkycopeDrone::getPrevId() const {
    return m_prev_id;
}
void OASkycopeDrone::setPrevId(const QString &prev_id) {
    m_prev_id = prev_id;
    m_prev_id_isSet = true;
}

bool OASkycopeDrone::is_prev_id_Set() const{
    return m_prev_id_isSet;
}

bool OASkycopeDrone::is_prev_id_Valid() const{
    return m_prev_id_isValid;
}

QString OASkycopeDrone::getRemoteIdModelName() const {
    return m_remote_id_model_name;
}
void OASkycopeDrone::setRemoteIdModelName(const QString &remote_id_model_name) {
    m_remote_id_model_name = remote_id_model_name;
    m_remote_id_model_name_isSet = true;
}

bool OASkycopeDrone::is_remote_id_model_name_Set() const{
    return m_remote_id_model_name_isSet;
}

bool OASkycopeDrone::is_remote_id_model_name_Valid() const{
    return m_remote_id_model_name_isValid;
}

qint32 OASkycopeDrone::getSeenTimes() const {
    return m_seen_times;
}
void OASkycopeDrone::setSeenTimes(const qint32 &seen_times) {
    m_seen_times = seen_times;
    m_seen_times_isSet = true;
}

bool OASkycopeDrone::is_seen_times_Set() const{
    return m_seen_times_isSet;
}

bool OASkycopeDrone::is_seen_times_Valid() const{
    return m_seen_times_isValid;
}

QList<QString> OASkycopeDrone::getSensorIds() const {
    return m_sensor_ids;
}
void OASkycopeDrone::setSensorIds(const QList<QString> &sensor_ids) {
    m_sensor_ids = sensor_ids;
    m_sensor_ids_isSet = true;
}

bool OASkycopeDrone::is_sensor_ids_Set() const{
    return m_sensor_ids_isSet;
}

bool OASkycopeDrone::is_sensor_ids_Valid() const{
    return m_sensor_ids_isValid;
}

QList<QString> OASkycopeDrone::getSensors() const {
    return m_sensors;
}
void OASkycopeDrone::setSensors(const QList<QString> &sensors) {
    m_sensors = sensors;
    m_sensors_isSet = true;
}

bool OASkycopeDrone::is_sensors_Set() const{
    return m_sensors_isSet;
}

bool OASkycopeDrone::is_sensors_Valid() const{
    return m_sensors_isValid;
}

OASkycopeSharedNames OASkycopeDrone::getSharedNames() const {
    return m_shared_names;
}
void OASkycopeDrone::setSharedNames(const OASkycopeSharedNames &shared_names) {
    m_shared_names = shared_names;
    m_shared_names_isSet = true;
}

bool OASkycopeDrone::is_shared_names_Set() const{
    return m_shared_names_isSet;
}

bool OASkycopeDrone::is_shared_names_Valid() const{
    return m_shared_names_isValid;
}

QList<qint32> OASkycopeDrone::getRSignals() const {
    return m_r_signals;
}
void OASkycopeDrone::setRSignals(const QList<qint32> &r_signals) {
    m_r_signals = r_signals;
    m_r_signals_isSet = true;
}

bool OASkycopeDrone::is_r_signals_Set() const{
    return m_r_signals_isSet;
}

bool OASkycopeDrone::is_r_signals_Valid() const{
    return m_r_signals_isValid;
}

OASkycopeSpoofStatus OASkycopeDrone::getSpoofStatus() const {
    return m_spoof_status;
}
void OASkycopeDrone::setSpoofStatus(const OASkycopeSpoofStatus &spoof_status) {
    m_spoof_status = spoof_status;
    m_spoof_status_isSet = true;
}

bool OASkycopeDrone::is_spoof_status_Set() const{
    return m_spoof_status_isSet;
}

bool OASkycopeDrone::is_spoof_status_Valid() const{
    return m_spoof_status_isValid;
}

QString OASkycopeDrone::getStatus() const {
    return m_status;
}
void OASkycopeDrone::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OASkycopeDrone::is_status_Set() const{
    return m_status_isSet;
}

bool OASkycopeDrone::is_status_Valid() const{
    return m_status_isValid;
}

bool OASkycopeDrone::isSwitchForWhitelist() const {
    return m_switch_for_whitelist;
}
void OASkycopeDrone::setSwitchForWhitelist(const bool &switch_for_whitelist) {
    m_switch_for_whitelist = switch_for_whitelist;
    m_switch_for_whitelist_isSet = true;
}

bool OASkycopeDrone::is_switch_for_whitelist_Set() const{
    return m_switch_for_whitelist_isSet;
}

bool OASkycopeDrone::is_switch_for_whitelist_Valid() const{
    return m_switch_for_whitelist_isValid;
}

OASkycopeThreat OASkycopeDrone::getThreat() const {
    return m_threat;
}
void OASkycopeDrone::setThreat(const OASkycopeThreat &threat) {
    m_threat = threat;
    m_threat_isSet = true;
}

bool OASkycopeDrone::is_threat_Set() const{
    return m_threat_isSet;
}

bool OASkycopeDrone::is_threat_Valid() const{
    return m_threat_isValid;
}

QString OASkycopeDrone::getType() const {
    return m_type;
}
void OASkycopeDrone::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OASkycopeDrone::is_type_Set() const{
    return m_type_isSet;
}

bool OASkycopeDrone::is_type_Valid() const{
    return m_type_isValid;
}

QString OASkycopeDrone::getWifiMacId() const {
    return m_wifi_mac_id;
}
void OASkycopeDrone::setWifiMacId(const QString &wifi_mac_id) {
    m_wifi_mac_id = wifi_mac_id;
    m_wifi_mac_id_isSet = true;
}

bool OASkycopeDrone::is_wifi_mac_id_Set() const{
    return m_wifi_mac_id_isSet;
}

bool OASkycopeDrone::is_wifi_mac_id_Valid() const{
    return m_wifi_mac_id_isValid;
}

QString OASkycopeDrone::getWifiSsid() const {
    return m_wifi_ssid;
}
void OASkycopeDrone::setWifiSsid(const QString &wifi_ssid) {
    m_wifi_ssid = wifi_ssid;
    m_wifi_ssid_isSet = true;
}

bool OASkycopeDrone::is_wifi_ssid_Set() const{
    return m_wifi_ssid_isSet;
}

bool OASkycopeDrone::is_wifi_ssid_Valid() const{
    return m_wifi_ssid_isValid;
}

QString OASkycopeDrone::getWlName() const {
    return m_wl_name;
}
void OASkycopeDrone::setWlName(const QString &wl_name) {
    m_wl_name = wl_name;
    m_wl_name_isSet = true;
}

bool OASkycopeDrone::is_wl_name_Set() const{
    return m_wl_name_isSet;
}

bool OASkycopeDrone::is_wl_name_Valid() const{
    return m_wl_name_isValid;
}

bool OASkycopeDrone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bw_khz_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_trajectory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detect_counter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detection_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_df_marker_gps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_drone_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fc_khz_and_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fc_khz_and_count_recent.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_finder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_hop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gps_sector.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gps_trajectory.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gui_first_detected_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gui_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gui_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_gps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_defending_queue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_dual_wbj_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ldval_testing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_remote_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_triple_wbj_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_wifi_tab_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ld_result.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lf_error_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modulation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paired_rc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prev_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_id_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seen_times_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensor_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_signals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_spoof_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_switch_for_whitelist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_mac_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_ssid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wl_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OASkycopeDrone::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fc_khz_and_count_recent_isValid && m_model_isValid && m_modulation_isValid && true;
}

} // namespace OASkycope
