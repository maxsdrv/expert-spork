/**
 * 
 * Description text
 *
 * The version of the OpenAPI document: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OASkycopeModule1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OASkycopeHelpers.h"

namespace OASkycope {

OASkycopeModule1::OASkycopeModule1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OASkycopeModule1::OASkycopeModule1() {
    this->initializeModel();
}

OASkycopeModule1::~OASkycopeModule1() {}

void OASkycopeModule1::initializeModel() {

    m_cpu_temp_isSet = false;
    m_cpu_temp_isValid = false;

    m_cpu_usage_isSet = false;
    m_cpu_usage_isValid = false;

    m_detecting_frequency_isSet = false;
    m_detecting_frequency_isValid = false;

    m_disk_io_usage_isSet = false;
    m_disk_io_usage_isValid = false;

    m_disk_usage_isSet = false;
    m_disk_usage_isValid = false;

    m_engine_status_isSet = false;
    m_engine_status_isValid = false;

    m_fixed_gain_isSet = false;
    m_fixed_gain_isValid = false;

    m_gpu_temp_isSet = false;
    m_gpu_temp_isValid = false;

    m_gpu_usage_isSet = false;
    m_gpu_usage_isValid = false;

    m_mem_usage_isSet = false;
    m_mem_usage_isValid = false;

    m_mgmt_status_isSet = false;
    m_mgmt_status_isValid = false;

    m_network_usage_isSet = false;
    m_network_usage_isValid = false;

    m_power_consumption_isSet = false;
    m_power_consumption_isValid = false;

    m_power_options_status_isSet = false;
    m_power_options_status_isValid = false;

    m_software_build_isSet = false;
    m_software_build_isValid = false;

    m_software_version_isSet = false;
    m_software_version_isValid = false;

    m_som_status_isSet = false;
    m_som_status_isValid = false;

    m_som_temp_isSet = false;
    m_som_temp_isValid = false;

    m_uptime_isSet = false;
    m_uptime_isValid = false;

    m_xpu_freq_isSet = false;
    m_xpu_freq_isValid = false;
}

void OASkycopeModule1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OASkycopeModule1::fromJsonObject(QJsonObject json) {

    m_cpu_temp_isValid = ::OASkycope::fromJsonValue(m_cpu_temp, json[QString("cpu_temp")]);
    m_cpu_temp_isSet = !json[QString("cpu_temp")].isNull() && m_cpu_temp_isValid;

    m_cpu_usage_isValid = ::OASkycope::fromJsonValue(m_cpu_usage, json[QString("cpu_usage")]);
    m_cpu_usage_isSet = !json[QString("cpu_usage")].isNull() && m_cpu_usage_isValid;

    m_detecting_frequency_isValid = ::OASkycope::fromJsonValue(m_detecting_frequency, json[QString("detecting_frequency")]);
    m_detecting_frequency_isSet = !json[QString("detecting_frequency")].isNull() && m_detecting_frequency_isValid;

    m_disk_io_usage_isValid = ::OASkycope::fromJsonValue(m_disk_io_usage, json[QString("disk_io_usage")]);
    m_disk_io_usage_isSet = !json[QString("disk_io_usage")].isNull() && m_disk_io_usage_isValid;

    m_disk_usage_isValid = ::OASkycope::fromJsonValue(m_disk_usage, json[QString("disk_usage")]);
    m_disk_usage_isSet = !json[QString("disk_usage")].isNull() && m_disk_usage_isValid;

    m_engine_status_isValid = ::OASkycope::fromJsonValue(m_engine_status, json[QString("engine_status")]);
    m_engine_status_isSet = !json[QString("engine_status")].isNull() && m_engine_status_isValid;

    m_fixed_gain_isValid = ::OASkycope::fromJsonValue(m_fixed_gain, json[QString("fixed_gain")]);
    m_fixed_gain_isSet = !json[QString("fixed_gain")].isNull() && m_fixed_gain_isValid;

    m_gpu_temp_isValid = ::OASkycope::fromJsonValue(m_gpu_temp, json[QString("gpu_temp")]);
    m_gpu_temp_isSet = !json[QString("gpu_temp")].isNull() && m_gpu_temp_isValid;

    m_gpu_usage_isValid = ::OASkycope::fromJsonValue(m_gpu_usage, json[QString("gpu_usage")]);
    m_gpu_usage_isSet = !json[QString("gpu_usage")].isNull() && m_gpu_usage_isValid;

    m_mem_usage_isValid = ::OASkycope::fromJsonValue(m_mem_usage, json[QString("mem_usage")]);
    m_mem_usage_isSet = !json[QString("mem_usage")].isNull() && m_mem_usage_isValid;

    m_mgmt_status_isValid = ::OASkycope::fromJsonValue(m_mgmt_status, json[QString("mgmt_status")]);
    m_mgmt_status_isSet = !json[QString("mgmt_status")].isNull() && m_mgmt_status_isValid;

    m_network_usage_isValid = ::OASkycope::fromJsonValue(m_network_usage, json[QString("network_usage")]);
    m_network_usage_isSet = !json[QString("network_usage")].isNull() && m_network_usage_isValid;

    m_power_consumption_isValid = ::OASkycope::fromJsonValue(m_power_consumption, json[QString("power_consumption")]);
    m_power_consumption_isSet = !json[QString("power_consumption")].isNull() && m_power_consumption_isValid;

    m_power_options_status_isValid = ::OASkycope::fromJsonValue(m_power_options_status, json[QString("power_options_status")]);
    m_power_options_status_isSet = !json[QString("power_options_status")].isNull() && m_power_options_status_isValid;

    m_software_build_isValid = ::OASkycope::fromJsonValue(m_software_build, json[QString("software_build")]);
    m_software_build_isSet = !json[QString("software_build")].isNull() && m_software_build_isValid;

    m_software_version_isValid = ::OASkycope::fromJsonValue(m_software_version, json[QString("software_version")]);
    m_software_version_isSet = !json[QString("software_version")].isNull() && m_software_version_isValid;

    m_som_status_isValid = ::OASkycope::fromJsonValue(m_som_status, json[QString("som_status")]);
    m_som_status_isSet = !json[QString("som_status")].isNull() && m_som_status_isValid;

    m_som_temp_isValid = ::OASkycope::fromJsonValue(m_som_temp, json[QString("som_temp")]);
    m_som_temp_isSet = !json[QString("som_temp")].isNull() && m_som_temp_isValid;

    m_uptime_isValid = ::OASkycope::fromJsonValue(m_uptime, json[QString("uptime")]);
    m_uptime_isSet = !json[QString("uptime")].isNull() && m_uptime_isValid;

    m_xpu_freq_isValid = ::OASkycope::fromJsonValue(m_xpu_freq, json[QString("xpu_freq")]);
    m_xpu_freq_isSet = !json[QString("xpu_freq")].isNull() && m_xpu_freq_isValid;
}

QString OASkycopeModule1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OASkycopeModule1::asJsonObject() const {
    QJsonObject obj;
    if (m_cpu_temp_isSet) {
        obj.insert(QString("cpu_temp"), ::OASkycope::toJsonValue(m_cpu_temp));
    }
    if (m_cpu_usage_isSet) {
        obj.insert(QString("cpu_usage"), ::OASkycope::toJsonValue(m_cpu_usage));
    }
    if (m_detecting_frequency.isSet()) {
        obj.insert(QString("detecting_frequency"), ::OASkycope::toJsonValue(m_detecting_frequency));
    }
    if (m_disk_io_usage.isSet()) {
        obj.insert(QString("disk_io_usage"), ::OASkycope::toJsonValue(m_disk_io_usage));
    }
    if (m_disk_usage_isSet) {
        obj.insert(QString("disk_usage"), ::OASkycope::toJsonValue(m_disk_usage));
    }
    if (m_engine_status_isSet) {
        obj.insert(QString("engine_status"), ::OASkycope::toJsonValue(m_engine_status));
    }
    if (m_fixed_gain.isSet()) {
        obj.insert(QString("fixed_gain"), ::OASkycope::toJsonValue(m_fixed_gain));
    }
    if (m_gpu_temp_isSet) {
        obj.insert(QString("gpu_temp"), ::OASkycope::toJsonValue(m_gpu_temp));
    }
    if (m_gpu_usage_isSet) {
        obj.insert(QString("gpu_usage"), ::OASkycope::toJsonValue(m_gpu_usage));
    }
    if (m_mem_usage_isSet) {
        obj.insert(QString("mem_usage"), ::OASkycope::toJsonValue(m_mem_usage));
    }
    if (m_mgmt_status_isSet) {
        obj.insert(QString("mgmt_status"), ::OASkycope::toJsonValue(m_mgmt_status));
    }
    if (m_network_usage.isSet()) {
        obj.insert(QString("network_usage"), ::OASkycope::toJsonValue(m_network_usage));
    }
    if (m_power_consumption_isSet) {
        obj.insert(QString("power_consumption"), ::OASkycope::toJsonValue(m_power_consumption));
    }
    if (m_power_options_status_isSet) {
        obj.insert(QString("power_options_status"), ::OASkycope::toJsonValue(m_power_options_status));
    }
    if (m_software_build_isSet) {
        obj.insert(QString("software_build"), ::OASkycope::toJsonValue(m_software_build));
    }
    if (m_software_version_isSet) {
        obj.insert(QString("software_version"), ::OASkycope::toJsonValue(m_software_version));
    }
    if (m_som_status.isSet()) {
        obj.insert(QString("som_status"), ::OASkycope::toJsonValue(m_som_status));
    }
    if (m_som_temp.isSet()) {
        obj.insert(QString("som_temp"), ::OASkycope::toJsonValue(m_som_temp));
    }
    if (m_uptime_isSet) {
        obj.insert(QString("uptime"), ::OASkycope::toJsonValue(m_uptime));
    }
    if (m_xpu_freq_isSet) {
        obj.insert(QString("xpu_freq"), ::OASkycope::toJsonValue(m_xpu_freq));
    }
    return obj;
}

double OASkycopeModule1::getCpuTemp() const {
    return m_cpu_temp;
}
void OASkycopeModule1::setCpuTemp(const double &cpu_temp) {
    m_cpu_temp = cpu_temp;
    m_cpu_temp_isSet = true;
}

bool OASkycopeModule1::is_cpu_temp_Set() const{
    return m_cpu_temp_isSet;
}

bool OASkycopeModule1::is_cpu_temp_Valid() const{
    return m_cpu_temp_isValid;
}

double OASkycopeModule1::getCpuUsage() const {
    return m_cpu_usage;
}
void OASkycopeModule1::setCpuUsage(const double &cpu_usage) {
    m_cpu_usage = cpu_usage;
    m_cpu_usage_isSet = true;
}

bool OASkycopeModule1::is_cpu_usage_Set() const{
    return m_cpu_usage_isSet;
}

bool OASkycopeModule1::is_cpu_usage_Valid() const{
    return m_cpu_usage_isValid;
}

OASkycopeDetectingFrequency OASkycopeModule1::getDetectingFrequency() const {
    return m_detecting_frequency;
}
void OASkycopeModule1::setDetectingFrequency(const OASkycopeDetectingFrequency &detecting_frequency) {
    m_detecting_frequency = detecting_frequency;
    m_detecting_frequency_isSet = true;
}

bool OASkycopeModule1::is_detecting_frequency_Set() const{
    return m_detecting_frequency_isSet;
}

bool OASkycopeModule1::is_detecting_frequency_Valid() const{
    return m_detecting_frequency_isValid;
}

OASkycopeDiskIoUsage OASkycopeModule1::getDiskIoUsage() const {
    return m_disk_io_usage;
}
void OASkycopeModule1::setDiskIoUsage(const OASkycopeDiskIoUsage &disk_io_usage) {
    m_disk_io_usage = disk_io_usage;
    m_disk_io_usage_isSet = true;
}

bool OASkycopeModule1::is_disk_io_usage_Set() const{
    return m_disk_io_usage_isSet;
}

bool OASkycopeModule1::is_disk_io_usage_Valid() const{
    return m_disk_io_usage_isValid;
}

QString OASkycopeModule1::getDiskUsage() const {
    return m_disk_usage;
}
void OASkycopeModule1::setDiskUsage(const QString &disk_usage) {
    m_disk_usage = disk_usage;
    m_disk_usage_isSet = true;
}

bool OASkycopeModule1::is_disk_usage_Set() const{
    return m_disk_usage_isSet;
}

bool OASkycopeModule1::is_disk_usage_Valid() const{
    return m_disk_usage_isValid;
}

QString OASkycopeModule1::getEngineStatus() const {
    return m_engine_status;
}
void OASkycopeModule1::setEngineStatus(const QString &engine_status) {
    m_engine_status = engine_status;
    m_engine_status_isSet = true;
}

bool OASkycopeModule1::is_engine_status_Set() const{
    return m_engine_status_isSet;
}

bool OASkycopeModule1::is_engine_status_Valid() const{
    return m_engine_status_isValid;
}

OASkycopeFixedGain OASkycopeModule1::getFixedGain() const {
    return m_fixed_gain;
}
void OASkycopeModule1::setFixedGain(const OASkycopeFixedGain &fixed_gain) {
    m_fixed_gain = fixed_gain;
    m_fixed_gain_isSet = true;
}

bool OASkycopeModule1::is_fixed_gain_Set() const{
    return m_fixed_gain_isSet;
}

bool OASkycopeModule1::is_fixed_gain_Valid() const{
    return m_fixed_gain_isValid;
}

double OASkycopeModule1::getGpuTemp() const {
    return m_gpu_temp;
}
void OASkycopeModule1::setGpuTemp(const double &gpu_temp) {
    m_gpu_temp = gpu_temp;
    m_gpu_temp_isSet = true;
}

bool OASkycopeModule1::is_gpu_temp_Set() const{
    return m_gpu_temp_isSet;
}

bool OASkycopeModule1::is_gpu_temp_Valid() const{
    return m_gpu_temp_isValid;
}

double OASkycopeModule1::getGpuUsage() const {
    return m_gpu_usage;
}
void OASkycopeModule1::setGpuUsage(const double &gpu_usage) {
    m_gpu_usage = gpu_usage;
    m_gpu_usage_isSet = true;
}

bool OASkycopeModule1::is_gpu_usage_Set() const{
    return m_gpu_usage_isSet;
}

bool OASkycopeModule1::is_gpu_usage_Valid() const{
    return m_gpu_usage_isValid;
}

double OASkycopeModule1::getMemUsage() const {
    return m_mem_usage;
}
void OASkycopeModule1::setMemUsage(const double &mem_usage) {
    m_mem_usage = mem_usage;
    m_mem_usage_isSet = true;
}

bool OASkycopeModule1::is_mem_usage_Set() const{
    return m_mem_usage_isSet;
}

bool OASkycopeModule1::is_mem_usage_Valid() const{
    return m_mem_usage_isValid;
}

QString OASkycopeModule1::getMgmtStatus() const {
    return m_mgmt_status;
}
void OASkycopeModule1::setMgmtStatus(const QString &mgmt_status) {
    m_mgmt_status = mgmt_status;
    m_mgmt_status_isSet = true;
}

bool OASkycopeModule1::is_mgmt_status_Set() const{
    return m_mgmt_status_isSet;
}

bool OASkycopeModule1::is_mgmt_status_Valid() const{
    return m_mgmt_status_isValid;
}

OASkycopeNetworkUsage OASkycopeModule1::getNetworkUsage() const {
    return m_network_usage;
}
void OASkycopeModule1::setNetworkUsage(const OASkycopeNetworkUsage &network_usage) {
    m_network_usage = network_usage;
    m_network_usage_isSet = true;
}

bool OASkycopeModule1::is_network_usage_Set() const{
    return m_network_usage_isSet;
}

bool OASkycopeModule1::is_network_usage_Valid() const{
    return m_network_usage_isValid;
}

qint32 OASkycopeModule1::getPowerConsumption() const {
    return m_power_consumption;
}
void OASkycopeModule1::setPowerConsumption(const qint32 &power_consumption) {
    m_power_consumption = power_consumption;
    m_power_consumption_isSet = true;
}

bool OASkycopeModule1::is_power_consumption_Set() const{
    return m_power_consumption_isSet;
}

bool OASkycopeModule1::is_power_consumption_Valid() const{
    return m_power_consumption_isValid;
}

QString OASkycopeModule1::getPowerOptionsStatus() const {
    return m_power_options_status;
}
void OASkycopeModule1::setPowerOptionsStatus(const QString &power_options_status) {
    m_power_options_status = power_options_status;
    m_power_options_status_isSet = true;
}

bool OASkycopeModule1::is_power_options_status_Set() const{
    return m_power_options_status_isSet;
}

bool OASkycopeModule1::is_power_options_status_Valid() const{
    return m_power_options_status_isValid;
}

QString OASkycopeModule1::getSoftwareBuild() const {
    return m_software_build;
}
void OASkycopeModule1::setSoftwareBuild(const QString &software_build) {
    m_software_build = software_build;
    m_software_build_isSet = true;
}

bool OASkycopeModule1::is_software_build_Set() const{
    return m_software_build_isSet;
}

bool OASkycopeModule1::is_software_build_Valid() const{
    return m_software_build_isValid;
}

QString OASkycopeModule1::getSoftwareVersion() const {
    return m_software_version;
}
void OASkycopeModule1::setSoftwareVersion(const QString &software_version) {
    m_software_version = software_version;
    m_software_version_isSet = true;
}

bool OASkycopeModule1::is_software_version_Set() const{
    return m_software_version_isSet;
}

bool OASkycopeModule1::is_software_version_Valid() const{
    return m_software_version_isValid;
}

OASkycopeSomStatus OASkycopeModule1::getSomStatus() const {
    return m_som_status;
}
void OASkycopeModule1::setSomStatus(const OASkycopeSomStatus &som_status) {
    m_som_status = som_status;
    m_som_status_isSet = true;
}

bool OASkycopeModule1::is_som_status_Set() const{
    return m_som_status_isSet;
}

bool OASkycopeModule1::is_som_status_Valid() const{
    return m_som_status_isValid;
}

OASkycopeSomTemp OASkycopeModule1::getSomTemp() const {
    return m_som_temp;
}
void OASkycopeModule1::setSomTemp(const OASkycopeSomTemp &som_temp) {
    m_som_temp = som_temp;
    m_som_temp_isSet = true;
}

bool OASkycopeModule1::is_som_temp_Set() const{
    return m_som_temp_isSet;
}

bool OASkycopeModule1::is_som_temp_Valid() const{
    return m_som_temp_isValid;
}

double OASkycopeModule1::getUptime() const {
    return m_uptime;
}
void OASkycopeModule1::setUptime(const double &uptime) {
    m_uptime = uptime;
    m_uptime_isSet = true;
}

bool OASkycopeModule1::is_uptime_Set() const{
    return m_uptime_isSet;
}

bool OASkycopeModule1::is_uptime_Valid() const{
    return m_uptime_isValid;
}

double OASkycopeModule1::getXpuFreq() const {
    return m_xpu_freq;
}
void OASkycopeModule1::setXpuFreq(const double &xpu_freq) {
    m_xpu_freq = xpu_freq;
    m_xpu_freq_isSet = true;
}

bool OASkycopeModule1::is_xpu_freq_Set() const{
    return m_xpu_freq_isSet;
}

bool OASkycopeModule1::is_xpu_freq_Valid() const{
    return m_xpu_freq_isValid;
}

bool OASkycopeModule1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpu_temp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detecting_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_io_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_gain.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gpu_temp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gpu_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mem_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mgmt_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_consumption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_options_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_software_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_software_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_som_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_som_temp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uptime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xpu_freq_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OASkycopeModule1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_software_build_isValid && m_software_version_isValid && true;
}

} // namespace OASkycope
