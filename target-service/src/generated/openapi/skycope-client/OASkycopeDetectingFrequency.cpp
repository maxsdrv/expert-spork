/**
 * 
 * Description text
 *
 * The version of the OpenAPI document: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OASkycopeDetectingFrequency.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OASkycopeHelpers.h"

namespace OASkycope {

OASkycopeDetectingFrequency::OASkycopeDetectingFrequency(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OASkycopeDetectingFrequency::OASkycopeDetectingFrequency() {
    this->initializeModel();
}

OASkycopeDetectingFrequency::~OASkycopeDetectingFrequency() {}

void OASkycopeDetectingFrequency::initializeModel() {

    m_r_1_isSet = false;
    m_r_1_isValid = false;
}

void OASkycopeDetectingFrequency::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OASkycopeDetectingFrequency::fromJsonObject(QJsonObject json) {

    m_r_1_isValid = ::OASkycope::fromJsonValue(m_r_1, json[QString("1")]);
    m_r_1_isSet = !json[QString("1")].isNull() && m_r_1_isValid;
}

QString OASkycopeDetectingFrequency::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OASkycopeDetectingFrequency::asJsonObject() const {
    QJsonObject obj;
    if (m_r_1.size() > 0) {
        obj.insert(QString("1"), ::OASkycope::toJsonValue(m_r_1));
    }
    return obj;
}

QList<QString> OASkycopeDetectingFrequency::getR1() const {
    return m_r_1;
}
void OASkycopeDetectingFrequency::setR1(const QList<QString> &r_1) {
    m_r_1 = r_1;
    m_r_1_isSet = true;
}

bool OASkycopeDetectingFrequency::is_r_1_Set() const{
    return m_r_1_isSet;
}

bool OASkycopeDetectingFrequency::is_r_1_Valid() const{
    return m_r_1_isValid;
}

bool OASkycopeDetectingFrequency::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_1.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OASkycopeDetectingFrequency::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OASkycope
