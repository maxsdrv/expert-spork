/**
 * 
 * Description text
 *
 * The version of the OpenAPI document: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OASkycopeMassDefense.h
 *
 * 
 */

#ifndef OASkycopeMassDefense_H
#define OASkycopeMassDefense_H

#include <QJsonObject>

#include "OASkycopeFrequencyOption.h"
#include <QList>
#include <QString>

#include "OASkycopeEnum.h"
#include "OASkycopeObject.h"

namespace OASkycope {
class OASkycopeFrequencyOption;

class OASkycopeMassDefense : public OASkycopeObject {
public:
    OASkycopeMassDefense();
    OASkycopeMassDefense(QString json);
    ~OASkycopeMassDefense() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAzimuth() const;
    void setAzimuth(const qint32 &azimuth);
    bool is_azimuth_Set() const;
    bool is_azimuth_Valid() const;

    qint32 getCurrent() const;
    void setCurrent(const qint32 &current);
    bool is_current_Set() const;
    bool is_current_Valid() const;

    bool isDirectionalDefense() const;
    void setDirectionalDefense(const bool &directional_defense);
    bool is_directional_defense_Set() const;
    bool is_directional_defense_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    QList<QString> getFrequency() const;
    void setFrequency(const QList<QString> &frequency);
    bool is_frequency_Set() const;
    bool is_frequency_Valid() const;

    QList<OASkycopeFrequencyOption> getFrequencyOptions() const;
    void setFrequencyOptions(const QList<OASkycopeFrequencyOption> &frequency_options);
    bool is_frequency_options_Set() const;
    bool is_frequency_options_Valid() const;

    bool isInProgress() const;
    void setInProgress(const bool &in_progress);
    bool is_in_progress_Set() const;
    bool is_in_progress_Valid() const;

    QString getSensorName() const;
    void setSensorName(const QString &sensor_name);
    bool is_sensor_name_Set() const;
    bool is_sensor_name_Valid() const;

    QString getStrategy() const;
    void setStrategy(const QString &strategy);
    bool is_strategy_Set() const;
    bool is_strategy_Valid() const;

    QList<qint32> getTimingOptions() const;
    void setTimingOptions(const QList<qint32> &timing_options);
    bool is_timing_options_Set() const;
    bool is_timing_options_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_azimuth;
    bool m_azimuth_isSet;
    bool m_azimuth_isValid;

    qint32 m_current;
    bool m_current_isSet;
    bool m_current_isValid;

    bool m_directional_defense;
    bool m_directional_defense_isSet;
    bool m_directional_defense_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    QList<QString> m_frequency;
    bool m_frequency_isSet;
    bool m_frequency_isValid;

    QList<OASkycopeFrequencyOption> m_frequency_options;
    bool m_frequency_options_isSet;
    bool m_frequency_options_isValid;

    bool m_in_progress;
    bool m_in_progress_isSet;
    bool m_in_progress_isValid;

    QString m_sensor_name;
    bool m_sensor_name_isSet;
    bool m_sensor_name_isValid;

    QString m_strategy;
    bool m_strategy_isSet;
    bool m_strategy_isValid;

    QList<qint32> m_timing_options;
    bool m_timing_options_isSet;
    bool m_timing_options_isValid;
};

} // namespace OASkycope

Q_DECLARE_METATYPE(OASkycope::OASkycopeMassDefense)

#endif // OASkycopeMassDefense_H
