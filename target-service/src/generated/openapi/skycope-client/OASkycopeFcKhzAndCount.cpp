/**
 * 
 * Description text
 *
 * The version of the OpenAPI document: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OASkycopeFcKhzAndCount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OASkycopeHelpers.h"

namespace OASkycope {

OASkycopeFcKhzAndCount::OASkycopeFcKhzAndCount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OASkycopeFcKhzAndCount::OASkycopeFcKhzAndCount() {
    this->initializeModel();
}

OASkycopeFcKhzAndCount::~OASkycopeFcKhzAndCount() {}

void OASkycopeFcKhzAndCount::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_fc_khz_and_count_isSet = false;
    m_fc_khz_and_count_isValid = false;
}

void OASkycopeFcKhzAndCount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OASkycopeFcKhzAndCount::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OASkycope::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_fc_khz_and_count_isValid = ::OASkycope::fromJsonValue(m_fc_khz_and_count, json[QString("fc_khz_and_count")]);
    m_fc_khz_and_count_isSet = !json[QString("fc_khz_and_count")].isNull() && m_fc_khz_and_count_isValid;
}

QString OASkycopeFcKhzAndCount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OASkycopeFcKhzAndCount::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OASkycope::toJsonValue(m_duration));
    }
    if (m_fc_khz_and_count.size() > 0) {
        obj.insert(QString("fc_khz_and_count"), ::OASkycope::toJsonValue(m_fc_khz_and_count));
    }
    return obj;
}

qint32 OASkycopeFcKhzAndCount::getDuration() const {
    return m_duration;
}
void OASkycopeFcKhzAndCount::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OASkycopeFcKhzAndCount::is_duration_Set() const{
    return m_duration_isSet;
}

bool OASkycopeFcKhzAndCount::is_duration_Valid() const{
    return m_duration_isValid;
}

QList<QJsonValue> OASkycopeFcKhzAndCount::getFcKhzAndCount() const {
    return m_fc_khz_and_count;
}
void OASkycopeFcKhzAndCount::setFcKhzAndCount(const QList<QJsonValue> &fc_khz_and_count) {
    m_fc_khz_and_count = fc_khz_and_count;
    m_fc_khz_and_count_isSet = true;
}

bool OASkycopeFcKhzAndCount::is_fc_khz_and_count_Set() const{
    return m_fc_khz_and_count_isSet;
}

bool OASkycopeFcKhzAndCount::is_fc_khz_and_count_Valid() const{
    return m_fc_khz_and_count_isValid;
}

bool OASkycopeFcKhzAndCount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fc_khz_and_count.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OASkycopeFcKhzAndCount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_duration_isValid && m_fc_khz_and_count_isValid && true;
}

} // namespace OASkycope
