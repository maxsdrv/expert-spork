/**
 * 
 * Description text
 *
 * The version of the OpenAPI document: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OASkycopePairedRC.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OASkycopeHelpers.h"

namespace OASkycope {

OASkycopePairedRC::OASkycopePairedRC(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OASkycopePairedRC::OASkycopePairedRC() {
    this->initializeModel();
}

OASkycopePairedRC::~OASkycopePairedRC() {}

void OASkycopePairedRC::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_gps_isSet = false;
    m_gps_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_ld_result_isSet = false;
    m_ld_result_isValid = false;
}

void OASkycopePairedRC::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OASkycopePairedRC::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OASkycope::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_status_isValid = ::OASkycope::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_gps_isValid = ::OASkycope::fromJsonValue(m_gps, json[QString("gps")]);
    m_gps_isSet = !json[QString("gps")].isNull() && m_gps_isValid;

    m_type_isValid = ::OASkycope::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_ld_result_isValid = ::OASkycope::fromJsonValue(m_ld_result, json[QString("ld_result")]);
    m_ld_result_isSet = !json[QString("ld_result")].isNull() && m_ld_result_isValid;
}

QString OASkycopePairedRC::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OASkycopePairedRC::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OASkycope::toJsonValue(m_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OASkycope::toJsonValue(m_status));
    }
    if (m_gps.isSet()) {
        obj.insert(QString("gps"), ::OASkycope::toJsonValue(m_gps));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OASkycope::toJsonValue(m_type));
    }
    if (m_ld_result.size() > 0) {
        obj.insert(QString("ld_result"), ::OASkycope::toJsonValue(m_ld_result));
    }
    return obj;
}

QString OASkycopePairedRC::getId() const {
    return m_id;
}
void OASkycopePairedRC::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OASkycopePairedRC::is_id_Set() const{
    return m_id_isSet;
}

bool OASkycopePairedRC::is_id_Valid() const{
    return m_id_isValid;
}

QString OASkycopePairedRC::getStatus() const {
    return m_status;
}
void OASkycopePairedRC::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OASkycopePairedRC::is_status_Set() const{
    return m_status_isSet;
}

bool OASkycopePairedRC::is_status_Valid() const{
    return m_status_isValid;
}

OASkycopeGps OASkycopePairedRC::getGps() const {
    return m_gps;
}
void OASkycopePairedRC::setGps(const OASkycopeGps &gps) {
    m_gps = gps;
    m_gps_isSet = true;
}

bool OASkycopePairedRC::is_gps_Set() const{
    return m_gps_isSet;
}

bool OASkycopePairedRC::is_gps_Valid() const{
    return m_gps_isValid;
}

QString OASkycopePairedRC::getType() const {
    return m_type;
}
void OASkycopePairedRC::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OASkycopePairedRC::is_type_Set() const{
    return m_type_isSet;
}

bool OASkycopePairedRC::is_type_Valid() const{
    return m_type_isValid;
}

QMap<QString, OASkycopeDroneSensorLdResult> OASkycopePairedRC::getLdResult() const {
    return m_ld_result;
}
void OASkycopePairedRC::setLdResult(const QMap<QString, OASkycopeDroneSensorLdResult> &ld_result) {
    m_ld_result = ld_result;
    m_ld_result_isSet = true;
}

bool OASkycopePairedRC::is_ld_result_Set() const{
    return m_ld_result_isSet;
}

bool OASkycopePairedRC::is_ld_result_Valid() const{
    return m_ld_result_isValid;
}

bool OASkycopePairedRC::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ld_result.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OASkycopePairedRC::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_gps_isValid && m_type_isValid && true;
}

} // namespace OASkycope
