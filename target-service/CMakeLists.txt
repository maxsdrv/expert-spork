cmake_minimum_required(VERSION 3.10)
cmake_policy(SET CMP0077 NEW)

include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/make/header-lint.cmake)

project(dss-target-provider)

set(IS_ROOT ON)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_CXX_STANDARD 20 CACHE STRING
    "The C++ standard whose features are requested to build this target")
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(APPLE)
    link_libraries("-framework CoreFoundation" "-framework IOKit" "-framework DiskArbitration")
endif()

if (CMAKE_BUILD_TYPE MATCHES "Release")
    set(LOG_VERBOSITY "INFO")
else()
    set(LOG_VERBOSITY "DEBUG")
endif()

if (NOT DEFINED MODULES_GLOBAL)
    set(MODULES_GLOBAL ${CMAKE_CURRENT_SOURCE_DIR}/modules)
endif()

if (MODULES_USE_GLOBAL)
    set(MODULES ${MODULES_GLOBAL})
else()
    set(MODULES ${CMAKE_CURRENT_SOURCE_DIR}/modules)
endif()

set(CMAKE_SCRIPTS_PATH ${MODULES_GLOBAL}/../cmake)
include(${CMAKE_SCRIPTS_PATH}/make.cmake)

definePaths(${PROJECT_NAME})
defineProjectIncludes(${CMAKE_CURRENT_BINARY_DIR})

set(GMOCK_SOURCE ${MODULES_GLOBAL}/googletest)
include(${MODULES_GLOBAL}/gqtest/gqtest.cmake)
include(${MODULES}/mpkit/mpk_module.cmake)
add_mpkit_item(boost)
add_mpkit_item(exceptions)
add_mpkit_item(json)
add_mpkit_item(httpws)
add_mpkit_item(log)
add_mpkit_item(qt)
add_mpkit_item(qttypes)
add_mpkit_item(rest)
add_mpkit_item(stable_link)
add_mpkit_item(types)
add_mpkit_item(utils)
add_mpkit_item(yaml)

if(NOT AVOID_LICENSECC)
    set(LICENSECC_SOURCE ${MODULES}/open-license-manager)
    set(LCC_PROJECT_NAME ${PROJECT_NAME})
    include_directories(${LICENSECC_SOURCE}/include)
    include_directories(${CMAKE_CURRENT_SOURCE_DIR}/license/${PROJECT_NAME}/include/licensecc/${PROJECT_NAME})
    include(${LICENSECC_SOURCE}/licensecc.cmake)

    option(ALLOW_DISABLE_LICENSE "Allow option to disable license check" OFF)
    if(ALLOW_DISABLE_LICENSE)
        add_definitions(-DALLOW_DISABLE_LICENSE)
    endif()
else()
    add_definitions(-DAVOID_LICENSECC)
endif()

set(DSS_CONFIGURATION "full" CACHE STRING "DSS configuration")
if(DSS_CONFIGURATION MATCHES "full")
    set(WITH_ALIA ON)
    set(WITH_RADAR_IQ ON)
    set(WITH_REST ON)
    set(WITH_SKYCOPE ON)
    set(WITH_TAMERLAN ON)
elseif(DSS_CONFIGURATION MATCHES "alia")
    set(WITH_ALIA ON)
elseif(DSS_CONFIGURATION MATCHES "radar-iq")
    set(WITH_RADAR_IQ ON)
elseif(DSS_CONFIGURATION MATCHES "imitators")
    set(WITH_REST ON)
elseif(DSS_CONFIGURATION MATCHES "tamerlan")
    set(WITH_TAMERLAN ON)
elseif(DSS_CONFIGURATION MATCHES "skycope")
    set(WITH_SKYCOPE ON)
endif()

add_subdirectory(src)
if (BUILD_EXAMPLES)
    add_subdirectory(examples)
endif()

include(${CMAKE_SCRIPTS_PATH}/pack.cmake)

if (UNIX)
    createPack(dss-target-service "service" dss-target-service)
    createPack(dss-libs "libs"
        mpkexceptions mpkjson mpklog mpkqt mpkqttypes mpkutils mpkyaml
        mpknet core httpconnector rest)
    if (BUILD_EXAMPLES)
        createPack(dss-examples "examples" dss-sensor-imitator dss-tamerlan-imitator)
    endif()
endif()
