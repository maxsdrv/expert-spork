openapi: 3.0.1
info:
  title: DSS sensor REST API
  description: REST API of dss sensor.
  version: 1.0.4
servers:
  - url: http://127.0.0.1/api/v1
paths:
  /get_channel_info:
    get:
      summary: Get channel info
      description: Gets number of sensor channels and their capabilities
      operationId: get_channel_info
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channel_info'
      security:
      - bearer_auth: []
  /get_diagnostic_data:
    get:
      summary: Get diagnostic data
      description: Gets various diagnostic data - integral state, temperatures, voltages, workloads e.t.c
      operationId: get_diagnostic_data
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sensor_diagnostic_data'
      security:
      - bearer_auth: []
  /get_firmware_version:
    get:
      summary: Get firmware version
      description: Gets current firmware version implemented in the sensor
      operationId: get_firmware_version
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
      security:
      - bearer_auth: []
  /get_geolocation:
    get:
      summary: Get geolocation info
      description: Gets sensor geolocation info - coordinates, azimuth (if applicable)
      operationId: get_geolocation
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/geolocation'
      security:
      - bearer_auth: []
  /get_jammers:
    get:
      summary: Get jammers list
      description: Get summary of all jammers
      operationId: get_jammers
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jammer_list'
      security:
      - bearer_auth: []
  /get_jammer:
    get:
      summary: Find jammer by ID
      description: Returns a single jammer
      operationId: get_jammer
      parameters:
        - name: jammer_id
          in: query
          description: ID of jammer to return
          required: true
          schema:
            $ref: '#/components/schemas/unit_id'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jammer'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /set_jammer:
    put:
      summary: Update an existing jammer
      description: Update an existing jammer by Id
      operationId: set_jammer
      requestBody:
        description: Update an existent jammer in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jammer'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jammer'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /get_jammer_mode:
    get:
      summary: Get jammer mode
      description: Gets current jammer mode - automatic or manual
      operationId: get_jammer_mode
      parameters:
        - name: jammer_id
          in: query
          description: ID of jammer to return
          required: true
          schema:
            $ref: '#/components/schemas/unit_id'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jammer_mode'
      security:
      - bearer_auth: []
  /get_jammer_state:
    get:
      summary: Get jammer state
      description: Gets current jammer state - on or off
      operationId: get_jammer_state
      parameters:
        - name: jammer_id
          in: query
          description: ID of jammer to return
          required: true
          schema:
            $ref: '#/components/schemas/unit_id'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jammer_state'
      security:
      - bearer_auth: []
  /get_jammer_timeout:
    get:
      summary: Get jammer timeout
      description: Gets current jammer switch off timeout in seconds (in auto mode)
      operationId: get_jammer_timeout
      parameters:
        - name: jammer_id
          in: query
          description: ID of jammer to return
          required: true
          schema:
            $ref: '#/components/schemas/unit_id'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
      security:
      - bearer_auth: []
  /get_network_settings:
    get:
      summary: Get network settings
      description: Gets current network configuration of the sensor
      operationId: get_network_settings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/network_settings'
      security:
      - bearer_auth: []
  /get_protocol_version:
    get:
      summary: Get protocol version
      description: Gets current protocol version implemented in the sensor
      operationId: get_protocol_version
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                pattern: '^\d+\.\d+\.\d+$'
      security:
      - bearer_auth: []
  /list_targets:
    get:
      summary: Get list of detected targets
      description: Gets list of last detected targets
      operationId: list_targets
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/target_data'
      security:
      - bearer_auth: []
  /set_geolocation:
    post:
      summary: Set geolocation info
      description: Sets sensor geolocation info - coordinates, azimuth (if applicable)
      operationId: set_geolocation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/geolocation'
      responses:
        "200":
          description: Successful operation
          content: {}
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
  /set_jammer_mode:
    post:
      summary: Set jammer mode
      description: Sets current jammer mode - automatic or manual
      operationId: set_jammer_mode
      parameters:
        - name: jammer_id
          in: query
          description: ID of jammer that needs to be updated
          required: true
          schema:
            $ref: '#/components/schemas/unit_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - mode
              properties:
                mode:
                  $ref: '#/components/schemas/jammer_mode'
      responses:
        "200":
          description: Successful operation
          content: {}
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
  /set_jammer_state:
    post:
      summary: Set jammer state
      description: Sets current jammer state - on or off (if in manual mode)
      operationId: set_jammer_state
      parameters:
        - name: jammer_id
          in: query
          description: ID of jammer that needs to be updated
          required: true
          schema:
            $ref: '#/components/schemas/unit_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - state
              properties:
                state:
                  $ref: '#/components/schemas/jammer_state'
      responses:
        "200":
          description: Successful operation
          content: {}
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
  /set_jammer_timeout:
    post:
      summary: Set jammer timeout
      description: Sets current jammer switch off timeout in seconds (in auto mode)
      operationId: set_jammer_timeout
      parameters:
        - name: jammer_id
          in: query
          description: ID of jammer that needs to be updated
          required: true
          schema:
            $ref: '#/components/schemas/unit_id'
      requestBody:
        content:
          application/json:
            schema:
              type: integer
      responses:
        "200":
          description: Successful operation
          content: {}
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
  /set_network_settings:
    post:
      summary: Set network settings
      description: Updates and apply current network configuration of the sensor
      operationId: set_network_settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/network_settings'
      responses:
        "200":
          description: Successful operation
          content: {}
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
  /subscribe:
    post:
      summary: Subscribe to target notifications
      description: Pseudo-call to describe target notifications
      operationId: subscribe
      responses:
        "200":
          description: Successful operation
          content: {}
      callbacks:
        target_update:
          /target_update:
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/target_data'
              responses:
                "200":
                  description: Successful operation
                  content: {}
      security:
      - bearer_auth: []

components:
  schemas:
    unit_id:
      type: string
      description: Sensor/Jammer UUID
    channel_info:
      type: object
      required:
        - number
        - range
      properties:
        number:
          type: integer
        range:
          type: number
          format: double
        view_angle:
          type: object
          required:
            - min
            - max
          properties:
            min:
              type: number
              format: double
            max:
              type: number
              format: double
        jammer_ids:
          type: array
          description: List of matching jammer IDs
          items:
            type: string
    channel_list:
      type: array
      items:
        $ref: '#/components/schemas/channel_info'
    coordinate:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        altitude:
          type: number
          format: double
    error:
      type: object
      required:
        - code
        - description
      properties:
        code:
          type: integer
        description:
          type: string
    geolocation:
      type: object
      required:
        - coordinate
      properties:
        coordinate:
          $ref: '#/components/schemas/coordinate'
        azimuth:
          type: number
          format: double
    jammer:
      type: object
      required:
        - id
        - jammer_mode
        - jammer_state
        - sensor_id
      properties:
        id:
          type: string
        jammer_mode:
          $ref: '#/components/schemas/jammer_mode'
        jammer_state:
          $ref: '#/components/schemas/jammer_state'
        jammer_timeout:
          type: integer
        sensor_id:
          type: string
          description: Matching sensor ID
        band:
          type: string
          example: 2.4G
          description: Label that means working band frequency
    jammer_list:
      type: array
      items:
        $ref: '#/components/schemas/jammer'
    jammer_mode:
      type: string
      enum: [auto, manual]
    jammer_state:
      type: string
      enum: [on, off]
    network_settings:
      type: object
      required:
        - address
        - dns
        - gateway
        - netmask
        - use_dhcp
      properties:
        address:
          type: string
          format: ipv4
        dns:
          type: string
          format: ipv4
        gateway:
          type: string
          format: ipv4
        netmask:
          type: string
          format: ipv4
        use_dhcp:
          type: boolean
    target_data:
      type: object
      required:
        - channel
        - type
        - id
        - description
        - timestamp
      properties:
        channel:
          type: integer
        type:
          type: string
          enum: [target_data]
        id:
          type: integer
        description:
          type: string
        bearing:
          type: number
          format: double
        distance:
          type: number
          format: double
        coordinate:
          $ref: '#/components/schemas/coordinate'
        frequencies:
          type: array
          items:
            type: integer
        blocks_count:
          type: integer
        timestamp:
          type: string
          format: date-time
    sensor_diagnostic_data:
      type: object
      required:
        - state
      properties:
        state:
          type: string
          enum: [ok, failure]
        cpu_temp:
          type: number
          format: double
        # Put more data here
  securitySchemes:
    bearer_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
