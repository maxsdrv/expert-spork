openapi: 3.1.0
info:
  title: api.v1
paths:
  /api.v1.JammerService/Jammers:
    post:
      tags:
        - api.v1.JammerService
      summary: Jammers
      operationId: api.v1.JammerService.Jammers
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/google.protobuf.Empty'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api.v1.JammersResponse'
  /api.v1.JammerService/JammerInfo:
    post:
      tags:
        - api.v1.JammerService
      summary: JammerInfo
      description: Get jammer ID list with SensorInfo first
      operationId: api.v1.JammerService.JammerInfo
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/api.v1.JammerInfoRequest'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api.v1.JammerInfoResponse'
  /api.v1.JammerService/JammerInfoDynamic:
    post:
      tags:
        - api.v1.JammerService
      summary: JammerInfoDynamic
      description: Get the initial jammer state with the first stream message
      operationId: api.v1.JammerService.JammerInfoDynamic
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/connect+json:
            schema:
              $ref: '#/components/schemas/api.v1.JammerInfoRequest'
          application/connect+proto:
            schema:
              $ref: '#/components/schemas/api.v1.JammerInfoRequest'
          application/grpc:
            schema:
              $ref: '#/components/schemas/api.v1.JammerInfoRequest'
          application/grpc+proto:
            schema:
              $ref: '#/components/schemas/api.v1.JammerInfoRequest'
          application/grpc+json:
            schema:
              $ref: '#/components/schemas/api.v1.JammerInfoRequest'
          application/grpc-web:
            schema:
              $ref: '#/components/schemas/api.v1.JammerInfoRequest'
          application/grpc-web+proto:
            schema:
              $ref: '#/components/schemas/api.v1.JammerInfoRequest'
          application/grpc-web+json:
            schema:
              $ref: '#/components/schemas/api.v1.JammerInfoRequest'
        required: true
      responses:
        default:
          description: Error
          content:
            application/connect+json:
              schema:
                $ref: '#/components/schemas/connect.error'
            application/connect+proto:
              schema:
                $ref: '#/components/schemas/connect.error'
            application/grpc:
              schema:
                $ref: '#/components/schemas/connect.error'
            application/grpc+proto:
              schema:
                $ref: '#/components/schemas/connect.error'
            application/grpc+json:
              schema:
                $ref: '#/components/schemas/connect.error'
            application/grpc-web:
              schema:
                $ref: '#/components/schemas/connect.error'
            application/grpc-web+proto:
              schema:
                $ref: '#/components/schemas/connect.error'
            application/grpc-web+json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/connect+json:
              schema:
                $ref: '#/components/schemas/api.v1.JammerInfoDynamicResponse'
            application/connect+proto:
              schema:
                $ref: '#/components/schemas/api.v1.JammerInfoDynamicResponse'
            application/grpc:
              schema:
                $ref: '#/components/schemas/api.v1.JammerInfoDynamicResponse'
            application/grpc+proto:
              schema:
                $ref: '#/components/schemas/api.v1.JammerInfoDynamicResponse'
            application/grpc+json:
              schema:
                $ref: '#/components/schemas/api.v1.JammerInfoDynamicResponse'
            application/grpc-web:
              schema:
                $ref: '#/components/schemas/api.v1.JammerInfoDynamicResponse'
            application/grpc-web+proto:
              schema:
                $ref: '#/components/schemas/api.v1.JammerInfoDynamicResponse'
            application/grpc-web+json:
              schema:
                $ref: '#/components/schemas/api.v1.JammerInfoDynamicResponse'
  /api.v1.JammerService/Groups:
    post:
      tags:
        - api.v1.JammerService
      summary: Groups
      operationId: api.v1.JammerService.Groups
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/google.protobuf.Empty'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api.v1.GroupsResponse'
  /api.v1.JammerService/SetJammerBands:
    post:
      tags:
        - api.v1.JammerService
      summary: SetJammerBands
      description: |-
        (Sets jammer's per-band activity for manual mode)
         - empty bands array stops all bands immediately
         - after duration seconds jamming stops
         - if requested while already started the new request will start instead of existing one
         - on device error no action but 200 response before
         - timer_status presense in jammer_info indicates timer is run
      operationId: api.v1.JammerService.SetJammerBands
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/api.v1.SetJammerBandsRequest'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/google.protobuf.Empty'
components:
  schemas:
    api.v1.GeoPositionMode:
      type: string
      title: GeoPositionMode
      enum:
        - GEO_POSITION_MODE_AUTO
        - GEO_POSITION_MODE_MANUAL
        - GEO_POSITION_MODE_ALWAYS_MANUAL
    api.v1.Band:
      type: object
      properties:
        label:
          type: string
          title: label
          nullable: true
        active:
          type: boolean
          title: active
          nullable: true
      title: Band
      required:
        - label
        - active
      additionalProperties: false
    api.v1.BandOptions:
      type: object
      properties:
        bands:
          type: array
          items:
            type: string
          title: bands
      title: BandOptions
      required:
        - bands
      additionalProperties: false
    api.v1.GeoCoordinate:
      type: object
      properties:
        latitude:
          exclusiveMaximum: 90
          type: number
          title: latitude
          minimum: -90
          format: double
          description: Latitude in decimal degrees
          nullable: true
        longitude:
          exclusiveMaximum: 180
          type: number
          title: longitude
          minimum: -180
          format: double
          description: Longitude in decimal degrees
          nullable: true
        altitude:
          type: number
          title: altitude
          format: double
          description: Altitude in meters above sea level
          nullable: true
      title: GeoCoordinate
      required:
        - latitude
        - longitude
      additionalProperties: false
    api.v1.GeoPosition:
      type: object
      properties:
        azimuth:
          exclusiveMaximum: 360
          type: number
          title: azimuth
          format: double
          nullable: true
        coordinate:
          title: coordinate
          nullable: true
          $ref: '#/components/schemas/api.v1.GeoCoordinate'
      title: GeoPosition
      required:
        - azimuth
        - coordinate
      additionalProperties: false
    api.v1.GroupsResponse:
      type: object
      properties:
        jammerGroups:
          type: array
          items:
            $ref: '#/components/schemas/api.v1.JammerGroup'
          title: jammer_groups
      title: GroupsResponse
      required:
        - jammerGroups
      additionalProperties: false
    api.v1.HwInfo:
      type: object
      properties:
        temperature:
          type: string
          title: temperature
          nullable: true
        voltage:
          type: string
          title: voltage
          nullable: true
        current:
          type: string
          title: current
          nullable: true
      title: HwInfo
      additionalProperties: false
    api.v1.JammerGroup:
      type: object
      properties:
        groupId:
          type: string
          title: group_id
          format: uuid
          nullable: true
        name:
          type: string
          title: name
          nullable: true
      title: JammerGroup
      required:
        - groupId
        - name
      additionalProperties: false
    api.v1.JammerInfoDynamicRequest:
      type: object
      properties:
        jammerId:
          type: string
          title: jammer_id
          format: uuid
          nullable: true
      title: JammerInfoDynamicRequest
      required:
        - jammerId
      additionalProperties: false
    api.v1.JammerInfoDynamicResponse:
      type: object
      properties:
        disabled:
          type: boolean
          title: disabled
          nullable: true
        state:
          type: string
          title: state
          nullable: true
        position:
          title: position
          nullable: true
          $ref: '#/components/schemas/api.v1.GeoPosition'
        positionMode:
          title: position_mode
          nullable: true
          $ref: '#/components/schemas/api.v1.GeoPositionMode'
        workzone:
          type: array
          items:
            $ref: '#/components/schemas/api.v1.WorkzoneSector'
          title: workzone
        bands:
          type: array
          items:
            $ref: '#/components/schemas/api.v1.Band'
          title: bands
        bandOptions:
          type: array
          items:
            $ref: '#/components/schemas/api.v1.BandOptions'
          title: band_options
        hwInfo:
          title: hw_info
          nullable: true
          $ref: '#/components/schemas/api.v1.HwInfo'
        timeoutStatus:
          title: timeout_status
          nullable: true
          $ref: '#/components/schemas/api.v1.JammerTimeoutStatus'
      title: JammerInfoDynamicResponse
      required:
        - disabled
        - state
        - position
        - positionMode
        - workzone
        - bands
      additionalProperties: false
    api.v1.JammerInfoRequest:
      type: object
      properties:
        jammerId:
          type: string
          title: jammer_id
          format: uuid
          nullable: true
      title: JammerInfoRequest
      required:
        - jammerId
      additionalProperties: false
    api.v1.JammerInfoResponse:
      type: object
      properties:
        model:
          type: string
          title: model
          nullable: true
        serial:
          type: string
          title: serial
          nullable: true
        swVersion:
          type: string
          title: sw_version
          nullable: true
        sensorId:
          type: string
          title: sensor_id
          format: uuid
          nullable: true
        groupId:
          type: string
          title: group_id
          nullable: true
      title: JammerInfoResponse
      required:
        - model
      additionalProperties: false
    api.v1.JammerTimeoutStatus:
      type: object
      properties:
        started:
          title: started
          nullable: true
          $ref: '#/components/schemas/google.protobuf.Timestamp'
        now:
          title: now
          nullable: true
          $ref: '#/components/schemas/google.protobuf.Timestamp'
        duration:
          type: integer
          title: duration
          format: int32
          nullable: true
      title: JammerTimeoutStatus
      required:
        - started
        - now
        - duration
      additionalProperties: false
    api.v1.JammersResponse:
      type: object
      properties:
        jammerIdList:
          type: array
          items:
            type: string
            format: uuid
          title: jammer_id_list
      title: JammersResponse
      required:
        - jammerIdList
      additionalProperties: false
    api.v1.SetJammerBandsRequest:
      type: object
      properties:
        jammerId:
          type: string
          title: jammer_id
          format: uuid
          nullable: true
        bandsActive:
          type: array
          items:
            type: string
          title: bands_active
          description: |-
            List of active bands. Skycope backend requires the right order of labels.
             Bands not listed will be switched Off.
             Example: ["2.4GHz", "5.8GHz"]
        duration:
          type: integer
          title: duration
          format: int32
          description: Jammer will be stopped after the 'duration' seconds
          nullable: true
      title: SetJammerBandsRequest
      required:
        - jammerId
        - bandsActive
        - duration
      additionalProperties: false
    api.v1.WorkzoneSector:
      type: object
      properties:
        number:
          type: integer
          title: number
          format: int32
          nullable: true
        distance:
          type: number
          title: distance
          format: double
          nullable: true
        minAngle:
          exclusiveMaximum: 360
          type: number
          title: min_angle
          format: double
          nullable: true
        maxAngle:
          exclusiveMaximum: 360
          type: number
          title: max_angle
          format: double
          nullable: true
      title: WorkzoneSector
      required:
        - number
        - distance
        - minAngle
        - maxAngle
      additionalProperties: false
    google.protobuf.Empty:
      type: object
      description: |-
        A generic empty message that you can re-use to avoid defining duplicated
         empty messages in your APIs. A typical example is to use it as the request
         or the response type of an API method. For instance:

             service Foo {
               rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
             }
    google.protobuf.Timestamp:
      type: string
      examples:
        - 1s
        - 1.000340012s
      format: date-time
      description: |-
        A Timestamp represents a point in time independent of any time zone or local
         calendar, encoded as a count of seconds and fractions of seconds at
         nanosecond resolution. The count is relative to an epoch at UTC midnight on
         January 1, 1970, in the proleptic Gregorian calendar which extends the
         Gregorian calendar backwards to year one.

         All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
         second table is needed for interpretation, using a [24-hour linear
         smear](https://developers.google.com/time/smear).

         The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
         restricting to that range, we ensure that we can convert to and from [RFC
         3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.

         # Examples

         Example 1: Compute Timestamp from POSIX `time()`.

             Timestamp timestamp;
             timestamp.set_seconds(time(NULL));
             timestamp.set_nanos(0);

         Example 2: Compute Timestamp from POSIX `gettimeofday()`.

             struct timeval tv;
             gettimeofday(&tv, NULL);

             Timestamp timestamp;
             timestamp.set_seconds(tv.tv_sec);
             timestamp.set_nanos(tv.tv_usec * 1000);

         Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.

             FILETIME ft;
             GetSystemTimeAsFileTime(&ft);
             UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;

             // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
             // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
             Timestamp timestamp;
             timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
             timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));

         Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.

             long millis = System.currentTimeMillis();

             Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
                 .setNanos((int) ((millis % 1000) * 1000000)).build();

         Example 5: Compute Timestamp from Java `Instant.now()`.

             Instant now = Instant.now();

             Timestamp timestamp =
                 Timestamp.newBuilder().setSeconds(now.getEpochSecond())
                     .setNanos(now.getNano()).build();

         Example 6: Compute Timestamp from current time in Python.

             timestamp = Timestamp()
             timestamp.GetCurrentTime()

         # JSON Mapping

         In JSON format, the Timestamp type is encoded as a string in the
         [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
         format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
         where {year} is always expressed using four digits while {month}, {day},
         {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
         seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
         are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
         is required. A proto3 JSON serializer should always use UTC (as indicated by
         "Z") when printing the Timestamp type and a proto3 JSON parser should be
         able to accept both UTC and other timezones (as indicated by an offset).

         For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
         01:30 UTC on January 15, 2017.

         In JavaScript, one can convert a Date object to this format using the
         standard
         [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
         method. In Python, a standard `datetime.datetime` object can be converted
         to this format using
         [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with
         the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
         the Joda Time's [`ISODateTimeFormat.dateTime()`](
         http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()
         ) to obtain a formatter capable of generating timestamps in this format.
    connect-protocol-version:
      type: number
      title: Connect-Protocol-Version
      enum:
        - 1
      description: Define the version of the Connect protocol
      const: 1
    connect-timeout-header:
      type: number
      title: Connect-Timeout-Ms
      description: Define the timeout, in ms
    connect.error:
      type: object
      properties:
        code:
          type: string
          examples:
            - not_found
          enum:
            - canceled
            - unknown
            - invalid_argument
            - deadline_exceeded
            - not_found
            - already_exists
            - permission_denied
            - resource_exhausted
            - failed_precondition
            - aborted
            - out_of_range
            - unimplemented
            - internal
            - unavailable
            - data_loss
            - unauthenticated
          description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
        message:
          type: string
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
        detail:
          $ref: '#/components/schemas/google.protobuf.Any'
      title: Connect Error
      additionalProperties: true
      description: 'Error type returned by Connect: https://connectrpc.com/docs/go/errors/#http-representation'
    google.protobuf.Any:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
          format: binary
        debug:
          type: object
          additionalProperties: true
      additionalProperties: true
      description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
security: []
tags:
  - name: api.v1.JammerService
