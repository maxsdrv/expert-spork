syntax = "proto3";

package api.v1;

import "buf/validate/validate.proto";
import "google/protobuf/empty.proto";

import "components.proto";

service SensorService {
  rpc Sensors(google.protobuf.Empty) returns (SensorsResponse) {}

  rpc SensorInfoDynamic(SensorInfoDynamicRequest) returns (stream SensorInfoDynamicResponse) {}
  
  // Sets current jammer mode - automatic or manual
  // MANUAL:
  // - accepts requests via set_jammer_bands 
  // AUTO:
  // - starts jamming of any DRONE object 
  // - jamming runs for "timeout" duration then stops and runs again if detection event is present
  // - manual requests via set_jammer_bands take preference above automatic jamming (except for empty bands request which does not stop jamming in AUTO mode currently)
  // Switching:
  // - switching of modes is allowed at any moment
  // - if mode changed while jamming runs it will run until timeout, then may run again according to the new mode
  rpc SetJammerMode(SetJammerModeRequest) returns (google.protobuf.Empty) {}
}

message SensorInfo {
  optional string sensor_id = 1 [(buf.validate.field).required = true, (buf.validate.field).string.uuid = true];
  // List of connected jammer IDs
  repeated string jammer_ids = 11 [(buf.validate.field).repeated.items.string.uuid = true];
  optional SensorType type = 2 [(buf.validate.field).required = true];
  optional string model = 3 [(buf.validate.field).required = true];
  optional string serial = 4;
  optional string sw_version = 5;
}

message SensorsResponse {
  repeated SensorInfo sensor_infos = 1 [(buf.validate.field).required = true];
}

message SensorInfoDynamicRequest {
  optional string sensor_id = 1 [(buf.validate.field).required = true, (buf.validate.field).string.uuid = true];
}

message SensorInfoDynamicResponse {
  optional bool disabled = 6 [(buf.validate.field).required = true];
  optional string state = 7 [(buf.validate.field).required = true];
  optional GeoPosition position = 8 [(buf.validate.field).required = true];
  optional GeoPositionMode position_mode = 9 [(buf.validate.field).required = true];
  repeated WorkzoneSector workzones = 10 [(buf.validate.field).required = true];
  optional JammerMode jammer_mode = 12;
  // Jammer timeout in AUTO mode in seconds
  optional int32 jammer_auto_timeout = 13;
  optional HwInfo hw_info = 14;
}

message SetJammerModeRequest {
  optional string sensor_id = 1 [(buf.validate.field).required = true, (buf.validate.field).string.uuid = true];
  optional JammerMode jammer_mode = 2 [(buf.validate.field).required = true];
  // Timeout for AUTO mode in seconds, ignored for MANUAL
  optional int32 timeout = 3 [(buf.validate.field).required = true];
}

enum SensorType {
  SENSOR_RFD = 0;
  SENSOR_RADAR = 1;
  SENSOR_CAMERA = 2;
}

enum JammerMode {
  JAMMER_AUTO = 0;
  JAMMER_MANUAL = 1;
}


