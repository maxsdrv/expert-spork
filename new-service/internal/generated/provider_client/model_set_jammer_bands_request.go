/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provider_client

import (
	"encoding/json"
	"fmt"
)

// checks if the SetJammerBandsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetJammerBandsRequest{}

// SetJammerBandsRequest struct for SetJammerBandsRequest
type SetJammerBandsRequest struct {
	// Matching sensor ID identification string based on UUID
	Id string `json:"id"`
	// List of active bands. Skycope backend requires the right order of labels. Bands not listed will be switched Off.
	BandsActive []string `json:"bands_active"`
	// Jammer will be stopped after the 'duration' seconds
	Duration int32 `json:"duration"`
	// Generated by client and WS reply will be matched by this value
	WsReplyId *string `json:"ws_reply_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SetJammerBandsRequest SetJammerBandsRequest

// NewSetJammerBandsRequest instantiates a new SetJammerBandsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetJammerBandsRequest(id string, bandsActive []string, duration int32) *SetJammerBandsRequest {
	this := SetJammerBandsRequest{}
	this.Id = id
	this.BandsActive = bandsActive
	this.Duration = duration
	var wsReplyId string = ""
	this.WsReplyId = &wsReplyId
	return &this
}

// NewSetJammerBandsRequestWithDefaults instantiates a new SetJammerBandsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetJammerBandsRequestWithDefaults() *SetJammerBandsRequest {
	this := SetJammerBandsRequest{}
	var wsReplyId string = ""
	this.WsReplyId = &wsReplyId
	return &this
}

// GetId returns the Id field value
func (o *SetJammerBandsRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SetJammerBandsRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SetJammerBandsRequest) SetId(v string) {
	o.Id = v
}

// GetBandsActive returns the BandsActive field value
func (o *SetJammerBandsRequest) GetBandsActive() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.BandsActive
}

// GetBandsActiveOk returns a tuple with the BandsActive field value
// and a boolean to check if the value has been set.
func (o *SetJammerBandsRequest) GetBandsActiveOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BandsActive, true
}

// SetBandsActive sets field value
func (o *SetJammerBandsRequest) SetBandsActive(v []string) {
	o.BandsActive = v
}

// GetDuration returns the Duration field value
func (o *SetJammerBandsRequest) GetDuration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *SetJammerBandsRequest) GetDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *SetJammerBandsRequest) SetDuration(v int32) {
	o.Duration = v
}

// GetWsReplyId returns the WsReplyId field value if set, zero value otherwise.
func (o *SetJammerBandsRequest) GetWsReplyId() string {
	if o == nil || IsNil(o.WsReplyId) {
		var ret string
		return ret
	}
	return *o.WsReplyId
}

// GetWsReplyIdOk returns a tuple with the WsReplyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetJammerBandsRequest) GetWsReplyIdOk() (*string, bool) {
	if o == nil || IsNil(o.WsReplyId) {
		return nil, false
	}
	return o.WsReplyId, true
}

// HasWsReplyId returns a boolean if a field has been set.
func (o *SetJammerBandsRequest) HasWsReplyId() bool {
	if o != nil && !IsNil(o.WsReplyId) {
		return true
	}

	return false
}

// SetWsReplyId gets a reference to the given string and assigns it to the WsReplyId field.
func (o *SetJammerBandsRequest) SetWsReplyId(v string) {
	o.WsReplyId = &v
}

func (o SetJammerBandsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetJammerBandsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["bands_active"] = o.BandsActive
	toSerialize["duration"] = o.Duration
	if !IsNil(o.WsReplyId) {
		toSerialize["ws_reply_id"] = o.WsReplyId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SetJammerBandsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"bands_active",
		"duration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetJammerBandsRequest := _SetJammerBandsRequest{}

	err = json.Unmarshal(data, &varSetJammerBandsRequest)

	if err != nil {
		return err
	}

	*o = SetJammerBandsRequest(varSetJammerBandsRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "bands_active")
		delete(additionalProperties, "duration")
		delete(additionalProperties, "ws_reply_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSetJammerBandsRequest struct {
	value *SetJammerBandsRequest
	isSet bool
}

func (v NullableSetJammerBandsRequest) Get() *SetJammerBandsRequest {
	return v.value
}

func (v *NullableSetJammerBandsRequest) Set(val *SetJammerBandsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSetJammerBandsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSetJammerBandsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetJammerBandsRequest(val *SetJammerBandsRequest) *NullableSetJammerBandsRequest {
	return &NullableSetJammerBandsRequest{value: val, isSet: true}
}

func (v NullableSetJammerBandsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetJammerBandsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


