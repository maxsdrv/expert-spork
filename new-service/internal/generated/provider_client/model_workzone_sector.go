/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provider_client

import (
	"encoding/json"
	"fmt"
)

// checks if the WorkzoneSector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkzoneSector{}

// WorkzoneSector struct for WorkzoneSector
type WorkzoneSector struct {
	Number int32 `json:"number"`
	Distance float64 `json:"distance"`
	MinAngle float64 `json:"min_angle"`
	MaxAngle float64 `json:"max_angle"`
	AdditionalProperties map[string]interface{}
}

type _WorkzoneSector WorkzoneSector

// NewWorkzoneSector instantiates a new WorkzoneSector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkzoneSector(number int32, distance float64, minAngle float64, maxAngle float64) *WorkzoneSector {
	this := WorkzoneSector{}
	this.Number = number
	this.Distance = distance
	this.MinAngle = minAngle
	this.MaxAngle = maxAngle
	return &this
}

// NewWorkzoneSectorWithDefaults instantiates a new WorkzoneSector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkzoneSectorWithDefaults() *WorkzoneSector {
	this := WorkzoneSector{}
	return &this
}

// GetNumber returns the Number field value
func (o *WorkzoneSector) GetNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *WorkzoneSector) GetNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *WorkzoneSector) SetNumber(v int32) {
	o.Number = v
}

// GetDistance returns the Distance field value
func (o *WorkzoneSector) GetDistance() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value
// and a boolean to check if the value has been set.
func (o *WorkzoneSector) GetDistanceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Distance, true
}

// SetDistance sets field value
func (o *WorkzoneSector) SetDistance(v float64) {
	o.Distance = v
}

// GetMinAngle returns the MinAngle field value
func (o *WorkzoneSector) GetMinAngle() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.MinAngle
}

// GetMinAngleOk returns a tuple with the MinAngle field value
// and a boolean to check if the value has been set.
func (o *WorkzoneSector) GetMinAngleOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinAngle, true
}

// SetMinAngle sets field value
func (o *WorkzoneSector) SetMinAngle(v float64) {
	o.MinAngle = v
}

// GetMaxAngle returns the MaxAngle field value
func (o *WorkzoneSector) GetMaxAngle() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.MaxAngle
}

// GetMaxAngleOk returns a tuple with the MaxAngle field value
// and a boolean to check if the value has been set.
func (o *WorkzoneSector) GetMaxAngleOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxAngle, true
}

// SetMaxAngle sets field value
func (o *WorkzoneSector) SetMaxAngle(v float64) {
	o.MaxAngle = v
}

func (o WorkzoneSector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkzoneSector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["number"] = o.Number
	toSerialize["distance"] = o.Distance
	toSerialize["min_angle"] = o.MinAngle
	toSerialize["max_angle"] = o.MaxAngle

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WorkzoneSector) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"number",
		"distance",
		"min_angle",
		"max_angle",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkzoneSector := _WorkzoneSector{}

	err = json.Unmarshal(data, &varWorkzoneSector)

	if err != nil {
		return err
	}

	*o = WorkzoneSector(varWorkzoneSector)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "number")
		delete(additionalProperties, "distance")
		delete(additionalProperties, "min_angle")
		delete(additionalProperties, "max_angle")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkzoneSector struct {
	value *WorkzoneSector
	isSet bool
}

func (v NullableWorkzoneSector) Get() *WorkzoneSector {
	return v.value
}

func (v *NullableWorkzoneSector) Set(val *WorkzoneSector) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkzoneSector) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkzoneSector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkzoneSector(val *WorkzoneSector) *NullableWorkzoneSector {
	return &NullableWorkzoneSector{value: val, isSet: true}
}

func (v NullableWorkzoneSector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkzoneSector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


