/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provider_client

import (
	"encoding/json"
	"fmt"
)

// GeoPositionMode the model 'GeoPositionMode'
type GeoPositionMode string

// List of geo_position_mode
const (
	GEOPOSITIONMODE_AUTO GeoPositionMode = "AUTO"
	GEOPOSITIONMODE_MANUAL GeoPositionMode = "MANUAL"
	GEOPOSITIONMODE_ALWAYS_MANUAL GeoPositionMode = "ALWAYS_MANUAL"
	GEOPOSITIONMODE_UNKNOWN_DEFAULT_OPEN_API GeoPositionMode = "11184809"
)

// All allowed values of GeoPositionMode enum
var AllowedGeoPositionModeEnumValues = []GeoPositionMode{
	"AUTO",
	"MANUAL",
	"ALWAYS_MANUAL",
	"11184809",
}

func (v *GeoPositionMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GeoPositionMode(value)
	for _, existing := range AllowedGeoPositionModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GeoPositionMode", value)
}

// NewGeoPositionModeFromValue returns a pointer to a valid GeoPositionMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGeoPositionModeFromValue(v string) (*GeoPositionMode, error) {
	ev := GeoPositionMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GeoPositionMode: valid values are %v", v, AllowedGeoPositionModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GeoPositionMode) IsValid() bool {
	for _, existing := range AllowedGeoPositionModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to geo_position_mode value
func (v GeoPositionMode) Ptr() *GeoPositionMode {
	return &v
}

type NullableGeoPositionMode struct {
	value *GeoPositionMode
	isSet bool
}

func (v NullableGeoPositionMode) Get() *GeoPositionMode {
	return v.value
}

func (v *NullableGeoPositionMode) Set(val *GeoPositionMode) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoPositionMode) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoPositionMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoPositionMode(val *GeoPositionMode) *NullableGeoPositionMode {
	return &NullableGeoPositionMode{value: val, isSet: true}
}

func (v NullableGeoPositionMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoPositionMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

