/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provider_client

import (
	"encoding/json"
	"fmt"
)

// checks if the SensorInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SensorInfo{}

// SensorInfo struct for SensorInfo
type SensorInfo struct {
	// Matching sensor ID identification string based on UUID
	Id string `json:"id"`
	Type SensorType `json:"type"`
	// model type string
	Model string `json:"model"`
	// serial number string
	Serial *string `json:"serial,omitempty"`
	// Version string
	SwVersion *string `json:"sw_version,omitempty"`
	Disabled bool `json:"disabled"`
	State State `json:"state"`
	Position GeoPosition `json:"position"`
	PositionMode GeoPositionMode `json:"position_mode"`
	Workzone []WorkzoneSector `json:"workzone"`
	// List of matching jammer IDs
	JammerIds []string `json:"jammer_ids,omitempty"`
	JammerMode *JammerMode `json:"jammer_mode,omitempty"`
	// Jammer timeout in AUTO mode in seconds
	JammerAutoTimeout *int32 `json:"jammer_auto_timeout,omitempty"`
	HwInfo *HwInfo `json:"hw_info,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SensorInfo SensorInfo

// NewSensorInfo instantiates a new SensorInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensorInfo(id string, type_ SensorType, model string, disabled bool, state State, position GeoPosition, positionMode GeoPositionMode, workzone []WorkzoneSector) *SensorInfo {
	this := SensorInfo{}
	this.Id = id
	this.Type = type_
	this.Model = model
	this.Disabled = disabled
	this.State = state
	this.Position = position
	this.PositionMode = positionMode
	this.Workzone = workzone
	return &this
}

// NewSensorInfoWithDefaults instantiates a new SensorInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensorInfoWithDefaults() *SensorInfo {
	this := SensorInfo{}
	return &this
}

// GetId returns the Id field value
func (o *SensorInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SensorInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SensorInfo) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *SensorInfo) GetType() SensorType {
	if o == nil {
		var ret SensorType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SensorInfo) GetTypeOk() (*SensorType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SensorInfo) SetType(v SensorType) {
	o.Type = v
}

// GetModel returns the Model field value
func (o *SensorInfo) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *SensorInfo) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *SensorInfo) SetModel(v string) {
	o.Model = v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *SensorInfo) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorInfo) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *SensorInfo) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *SensorInfo) SetSerial(v string) {
	o.Serial = &v
}

// GetSwVersion returns the SwVersion field value if set, zero value otherwise.
func (o *SensorInfo) GetSwVersion() string {
	if o == nil || IsNil(o.SwVersion) {
		var ret string
		return ret
	}
	return *o.SwVersion
}

// GetSwVersionOk returns a tuple with the SwVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorInfo) GetSwVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SwVersion) {
		return nil, false
	}
	return o.SwVersion, true
}

// HasSwVersion returns a boolean if a field has been set.
func (o *SensorInfo) HasSwVersion() bool {
	if o != nil && !IsNil(o.SwVersion) {
		return true
	}

	return false
}

// SetSwVersion gets a reference to the given string and assigns it to the SwVersion field.
func (o *SensorInfo) SetSwVersion(v string) {
	o.SwVersion = &v
}

// GetDisabled returns the Disabled field value
func (o *SensorInfo) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *SensorInfo) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *SensorInfo) SetDisabled(v bool) {
	o.Disabled = v
}

// GetState returns the State field value
func (o *SensorInfo) GetState() State {
	if o == nil {
		var ret State
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *SensorInfo) GetStateOk() (*State, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *SensorInfo) SetState(v State) {
	o.State = v
}

// GetPosition returns the Position field value
func (o *SensorInfo) GetPosition() GeoPosition {
	if o == nil {
		var ret GeoPosition
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *SensorInfo) GetPositionOk() (*GeoPosition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *SensorInfo) SetPosition(v GeoPosition) {
	o.Position = v
}

// GetPositionMode returns the PositionMode field value
func (o *SensorInfo) GetPositionMode() GeoPositionMode {
	if o == nil {
		var ret GeoPositionMode
		return ret
	}

	return o.PositionMode
}

// GetPositionModeOk returns a tuple with the PositionMode field value
// and a boolean to check if the value has been set.
func (o *SensorInfo) GetPositionModeOk() (*GeoPositionMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PositionMode, true
}

// SetPositionMode sets field value
func (o *SensorInfo) SetPositionMode(v GeoPositionMode) {
	o.PositionMode = v
}

// GetWorkzone returns the Workzone field value
func (o *SensorInfo) GetWorkzone() []WorkzoneSector {
	if o == nil {
		var ret []WorkzoneSector
		return ret
	}

	return o.Workzone
}

// GetWorkzoneOk returns a tuple with the Workzone field value
// and a boolean to check if the value has been set.
func (o *SensorInfo) GetWorkzoneOk() ([]WorkzoneSector, bool) {
	if o == nil {
		return nil, false
	}
	return o.Workzone, true
}

// SetWorkzone sets field value
func (o *SensorInfo) SetWorkzone(v []WorkzoneSector) {
	o.Workzone = v
}

// GetJammerIds returns the JammerIds field value if set, zero value otherwise.
func (o *SensorInfo) GetJammerIds() []string {
	if o == nil || IsNil(o.JammerIds) {
		var ret []string
		return ret
	}
	return o.JammerIds
}

// GetJammerIdsOk returns a tuple with the JammerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorInfo) GetJammerIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.JammerIds) {
		return nil, false
	}
	return o.JammerIds, true
}

// HasJammerIds returns a boolean if a field has been set.
func (o *SensorInfo) HasJammerIds() bool {
	if o != nil && !IsNil(o.JammerIds) {
		return true
	}

	return false
}

// SetJammerIds gets a reference to the given []string and assigns it to the JammerIds field.
func (o *SensorInfo) SetJammerIds(v []string) {
	o.JammerIds = v
}

// GetJammerMode returns the JammerMode field value if set, zero value otherwise.
func (o *SensorInfo) GetJammerMode() JammerMode {
	if o == nil || IsNil(o.JammerMode) {
		var ret JammerMode
		return ret
	}
	return *o.JammerMode
}

// GetJammerModeOk returns a tuple with the JammerMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorInfo) GetJammerModeOk() (*JammerMode, bool) {
	if o == nil || IsNil(o.JammerMode) {
		return nil, false
	}
	return o.JammerMode, true
}

// HasJammerMode returns a boolean if a field has been set.
func (o *SensorInfo) HasJammerMode() bool {
	if o != nil && !IsNil(o.JammerMode) {
		return true
	}

	return false
}

// SetJammerMode gets a reference to the given JammerMode and assigns it to the JammerMode field.
func (o *SensorInfo) SetJammerMode(v JammerMode) {
	o.JammerMode = &v
}

// GetJammerAutoTimeout returns the JammerAutoTimeout field value if set, zero value otherwise.
func (o *SensorInfo) GetJammerAutoTimeout() int32 {
	if o == nil || IsNil(o.JammerAutoTimeout) {
		var ret int32
		return ret
	}
	return *o.JammerAutoTimeout
}

// GetJammerAutoTimeoutOk returns a tuple with the JammerAutoTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorInfo) GetJammerAutoTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.JammerAutoTimeout) {
		return nil, false
	}
	return o.JammerAutoTimeout, true
}

// HasJammerAutoTimeout returns a boolean if a field has been set.
func (o *SensorInfo) HasJammerAutoTimeout() bool {
	if o != nil && !IsNil(o.JammerAutoTimeout) {
		return true
	}

	return false
}

// SetJammerAutoTimeout gets a reference to the given int32 and assigns it to the JammerAutoTimeout field.
func (o *SensorInfo) SetJammerAutoTimeout(v int32) {
	o.JammerAutoTimeout = &v
}

// GetHwInfo returns the HwInfo field value if set, zero value otherwise.
func (o *SensorInfo) GetHwInfo() HwInfo {
	if o == nil || IsNil(o.HwInfo) {
		var ret HwInfo
		return ret
	}
	return *o.HwInfo
}

// GetHwInfoOk returns a tuple with the HwInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensorInfo) GetHwInfoOk() (*HwInfo, bool) {
	if o == nil || IsNil(o.HwInfo) {
		return nil, false
	}
	return o.HwInfo, true
}

// HasHwInfo returns a boolean if a field has been set.
func (o *SensorInfo) HasHwInfo() bool {
	if o != nil && !IsNil(o.HwInfo) {
		return true
	}

	return false
}

// SetHwInfo gets a reference to the given HwInfo and assigns it to the HwInfo field.
func (o *SensorInfo) SetHwInfo(v HwInfo) {
	o.HwInfo = &v
}

func (o SensorInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SensorInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	toSerialize["model"] = o.Model
	if !IsNil(o.Serial) {
		toSerialize["serial"] = o.Serial
	}
	if !IsNil(o.SwVersion) {
		toSerialize["sw_version"] = o.SwVersion
	}
	toSerialize["disabled"] = o.Disabled
	toSerialize["state"] = o.State
	toSerialize["position"] = o.Position
	toSerialize["position_mode"] = o.PositionMode
	toSerialize["workzone"] = o.Workzone
	if !IsNil(o.JammerIds) {
		toSerialize["jammer_ids"] = o.JammerIds
	}
	if !IsNil(o.JammerMode) {
		toSerialize["jammer_mode"] = o.JammerMode
	}
	if !IsNil(o.JammerAutoTimeout) {
		toSerialize["jammer_auto_timeout"] = o.JammerAutoTimeout
	}
	if !IsNil(o.HwInfo) {
		toSerialize["hw_info"] = o.HwInfo
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SensorInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"model",
		"disabled",
		"state",
		"position",
		"position_mode",
		"workzone",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSensorInfo := _SensorInfo{}

	err = json.Unmarshal(data, &varSensorInfo)

	if err != nil {
		return err
	}

	*o = SensorInfo(varSensorInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "model")
		delete(additionalProperties, "serial")
		delete(additionalProperties, "sw_version")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "state")
		delete(additionalProperties, "position")
		delete(additionalProperties, "position_mode")
		delete(additionalProperties, "workzone")
		delete(additionalProperties, "jammer_ids")
		delete(additionalProperties, "jammer_mode")
		delete(additionalProperties, "jammer_auto_timeout")
		delete(additionalProperties, "hw_info")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSensorInfo struct {
	value *SensorInfo
	isSet bool
}

func (v NullableSensorInfo) Get() *SensorInfo {
	return v.value
}

func (v *NullableSensorInfo) Set(val *SensorInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSensorInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSensorInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensorInfo(val *SensorInfo) *NullableSensorInfo {
	return &NullableSensorInfo{value: val, isSet: true}
}

func (v NullableSensorInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensorInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


