/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provider_client

import (
	"encoding/json"
	"fmt"
)

// checks if the TrackList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackList{}

// TrackList struct for TrackList
type TrackList struct {
	Tracks []TrackData `json:"tracks"`
	AdditionalProperties map[string]interface{}
}

type _TrackList TrackList

// NewTrackList instantiates a new TrackList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackList(tracks []TrackData) *TrackList {
	this := TrackList{}
	this.Tracks = tracks
	return &this
}

// NewTrackListWithDefaults instantiates a new TrackList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackListWithDefaults() *TrackList {
	this := TrackList{}
	return &this
}

// GetTracks returns the Tracks field value
func (o *TrackList) GetTracks() []TrackData {
	if o == nil {
		var ret []TrackData
		return ret
	}

	return o.Tracks
}

// GetTracksOk returns a tuple with the Tracks field value
// and a boolean to check if the value has been set.
func (o *TrackList) GetTracksOk() ([]TrackData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tracks, true
}

// SetTracks sets field value
func (o *TrackList) SetTracks(v []TrackData) {
	o.Tracks = v
}

func (o TrackList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tracks"] = o.Tracks

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TrackList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tracks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrackList := _TrackList{}

	err = json.Unmarshal(data, &varTrackList)

	if err != nil {
		return err
	}

	*o = TrackList(varTrackList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tracks")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTrackList struct {
	value *TrackList
	isSet bool
}

func (v NullableTrackList) Get() *TrackList {
	return v.value
}

func (v *NullableTrackList) Set(val *TrackList) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackList) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackList(val *TrackList) *NullableTrackList {
	return &NullableTrackList{value: val, isSet: true}
}

func (v NullableTrackList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


