/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provider_client

import (
	"encoding/json"
	"fmt"
)

// checks if the JammerInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JammerInfo{}

// JammerInfo struct for JammerInfo
type JammerInfo struct {
	// Matching sensor ID identification string based on UUID
	Id string `json:"id"`
	// model type string
	Model string `json:"model"`
	// serial number string
	Serial *string `json:"serial,omitempty"`
	// Version string
	SwVersion *string `json:"sw_version,omitempty"`
	Disabled bool `json:"disabled"`
	State State `json:"state"`
	Position GeoPosition `json:"position"`
	PositionMode GeoPositionMode `json:"position_mode"`
	Workzone []WorkzoneSector `json:"workzone"`
	// Matching sensor ID identification string based on UUID
	SensorId *string `json:"sensor_id,omitempty"`
	// List of available bands with corresponding activity status
	Bands []Band `json:"bands"`
	// The field is absent in case of all bands combinations are allowed
	BandOptions [][]string `json:"band_options,omitempty"`
	HwInfo *HwInfo `json:"hw_info,omitempty"`
	TimeoutStatus *JammerTimeoutStatus `json:"timeout_status,omitempty"`
	// jammer group id string
	GroupId *string `json:"group_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JammerInfo JammerInfo

// NewJammerInfo instantiates a new JammerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJammerInfo(id string, model string, disabled bool, state State, position GeoPosition, positionMode GeoPositionMode, workzone []WorkzoneSector, bands []Band) *JammerInfo {
	this := JammerInfo{}
	this.Id = id
	this.Model = model
	this.Disabled = disabled
	this.State = state
	this.Position = position
	this.PositionMode = positionMode
	this.Workzone = workzone
	this.Bands = bands
	return &this
}

// NewJammerInfoWithDefaults instantiates a new JammerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJammerInfoWithDefaults() *JammerInfo {
	this := JammerInfo{}
	return &this
}

// GetId returns the Id field value
func (o *JammerInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *JammerInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *JammerInfo) SetId(v string) {
	o.Id = v
}

// GetModel returns the Model field value
func (o *JammerInfo) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *JammerInfo) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *JammerInfo) SetModel(v string) {
	o.Model = v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *JammerInfo) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JammerInfo) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *JammerInfo) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *JammerInfo) SetSerial(v string) {
	o.Serial = &v
}

// GetSwVersion returns the SwVersion field value if set, zero value otherwise.
func (o *JammerInfo) GetSwVersion() string {
	if o == nil || IsNil(o.SwVersion) {
		var ret string
		return ret
	}
	return *o.SwVersion
}

// GetSwVersionOk returns a tuple with the SwVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JammerInfo) GetSwVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SwVersion) {
		return nil, false
	}
	return o.SwVersion, true
}

// HasSwVersion returns a boolean if a field has been set.
func (o *JammerInfo) HasSwVersion() bool {
	if o != nil && !IsNil(o.SwVersion) {
		return true
	}

	return false
}

// SetSwVersion gets a reference to the given string and assigns it to the SwVersion field.
func (o *JammerInfo) SetSwVersion(v string) {
	o.SwVersion = &v
}

// GetDisabled returns the Disabled field value
func (o *JammerInfo) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *JammerInfo) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *JammerInfo) SetDisabled(v bool) {
	o.Disabled = v
}

// GetState returns the State field value
func (o *JammerInfo) GetState() State {
	if o == nil {
		var ret State
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *JammerInfo) GetStateOk() (*State, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *JammerInfo) SetState(v State) {
	o.State = v
}

// GetPosition returns the Position field value
func (o *JammerInfo) GetPosition() GeoPosition {
	if o == nil {
		var ret GeoPosition
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *JammerInfo) GetPositionOk() (*GeoPosition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *JammerInfo) SetPosition(v GeoPosition) {
	o.Position = v
}

// GetPositionMode returns the PositionMode field value
func (o *JammerInfo) GetPositionMode() GeoPositionMode {
	if o == nil {
		var ret GeoPositionMode
		return ret
	}

	return o.PositionMode
}

// GetPositionModeOk returns a tuple with the PositionMode field value
// and a boolean to check if the value has been set.
func (o *JammerInfo) GetPositionModeOk() (*GeoPositionMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PositionMode, true
}

// SetPositionMode sets field value
func (o *JammerInfo) SetPositionMode(v GeoPositionMode) {
	o.PositionMode = v
}

// GetWorkzone returns the Workzone field value
func (o *JammerInfo) GetWorkzone() []WorkzoneSector {
	if o == nil {
		var ret []WorkzoneSector
		return ret
	}

	return o.Workzone
}

// GetWorkzoneOk returns a tuple with the Workzone field value
// and a boolean to check if the value has been set.
func (o *JammerInfo) GetWorkzoneOk() ([]WorkzoneSector, bool) {
	if o == nil {
		return nil, false
	}
	return o.Workzone, true
}

// SetWorkzone sets field value
func (o *JammerInfo) SetWorkzone(v []WorkzoneSector) {
	o.Workzone = v
}

// GetSensorId returns the SensorId field value if set, zero value otherwise.
func (o *JammerInfo) GetSensorId() string {
	if o == nil || IsNil(o.SensorId) {
		var ret string
		return ret
	}
	return *o.SensorId
}

// GetSensorIdOk returns a tuple with the SensorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JammerInfo) GetSensorIdOk() (*string, bool) {
	if o == nil || IsNil(o.SensorId) {
		return nil, false
	}
	return o.SensorId, true
}

// HasSensorId returns a boolean if a field has been set.
func (o *JammerInfo) HasSensorId() bool {
	if o != nil && !IsNil(o.SensorId) {
		return true
	}

	return false
}

// SetSensorId gets a reference to the given string and assigns it to the SensorId field.
func (o *JammerInfo) SetSensorId(v string) {
	o.SensorId = &v
}

// GetBands returns the Bands field value
func (o *JammerInfo) GetBands() []Band {
	if o == nil {
		var ret []Band
		return ret
	}

	return o.Bands
}

// GetBandsOk returns a tuple with the Bands field value
// and a boolean to check if the value has been set.
func (o *JammerInfo) GetBandsOk() ([]Band, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bands, true
}

// SetBands sets field value
func (o *JammerInfo) SetBands(v []Band) {
	o.Bands = v
}

// GetBandOptions returns the BandOptions field value if set, zero value otherwise.
func (o *JammerInfo) GetBandOptions() [][]string {
	if o == nil || IsNil(o.BandOptions) {
		var ret [][]string
		return ret
	}
	return o.BandOptions
}

// GetBandOptionsOk returns a tuple with the BandOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JammerInfo) GetBandOptionsOk() ([][]string, bool) {
	if o == nil || IsNil(o.BandOptions) {
		return nil, false
	}
	return o.BandOptions, true
}

// HasBandOptions returns a boolean if a field has been set.
func (o *JammerInfo) HasBandOptions() bool {
	if o != nil && !IsNil(o.BandOptions) {
		return true
	}

	return false
}

// SetBandOptions gets a reference to the given [][]string and assigns it to the BandOptions field.
func (o *JammerInfo) SetBandOptions(v [][]string) {
	o.BandOptions = v
}

// GetHwInfo returns the HwInfo field value if set, zero value otherwise.
func (o *JammerInfo) GetHwInfo() HwInfo {
	if o == nil || IsNil(o.HwInfo) {
		var ret HwInfo
		return ret
	}
	return *o.HwInfo
}

// GetHwInfoOk returns a tuple with the HwInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JammerInfo) GetHwInfoOk() (*HwInfo, bool) {
	if o == nil || IsNil(o.HwInfo) {
		return nil, false
	}
	return o.HwInfo, true
}

// HasHwInfo returns a boolean if a field has been set.
func (o *JammerInfo) HasHwInfo() bool {
	if o != nil && !IsNil(o.HwInfo) {
		return true
	}

	return false
}

// SetHwInfo gets a reference to the given HwInfo and assigns it to the HwInfo field.
func (o *JammerInfo) SetHwInfo(v HwInfo) {
	o.HwInfo = &v
}

// GetTimeoutStatus returns the TimeoutStatus field value if set, zero value otherwise.
func (o *JammerInfo) GetTimeoutStatus() JammerTimeoutStatus {
	if o == nil || IsNil(o.TimeoutStatus) {
		var ret JammerTimeoutStatus
		return ret
	}
	return *o.TimeoutStatus
}

// GetTimeoutStatusOk returns a tuple with the TimeoutStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JammerInfo) GetTimeoutStatusOk() (*JammerTimeoutStatus, bool) {
	if o == nil || IsNil(o.TimeoutStatus) {
		return nil, false
	}
	return o.TimeoutStatus, true
}

// HasTimeoutStatus returns a boolean if a field has been set.
func (o *JammerInfo) HasTimeoutStatus() bool {
	if o != nil && !IsNil(o.TimeoutStatus) {
		return true
	}

	return false
}

// SetTimeoutStatus gets a reference to the given JammerTimeoutStatus and assigns it to the TimeoutStatus field.
func (o *JammerInfo) SetTimeoutStatus(v JammerTimeoutStatus) {
	o.TimeoutStatus = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *JammerInfo) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JammerInfo) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *JammerInfo) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *JammerInfo) SetGroupId(v string) {
	o.GroupId = &v
}

func (o JammerInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JammerInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["model"] = o.Model
	if !IsNil(o.Serial) {
		toSerialize["serial"] = o.Serial
	}
	if !IsNil(o.SwVersion) {
		toSerialize["sw_version"] = o.SwVersion
	}
	toSerialize["disabled"] = o.Disabled
	toSerialize["state"] = o.State
	toSerialize["position"] = o.Position
	toSerialize["position_mode"] = o.PositionMode
	toSerialize["workzone"] = o.Workzone
	if !IsNil(o.SensorId) {
		toSerialize["sensor_id"] = o.SensorId
	}
	toSerialize["bands"] = o.Bands
	if !IsNil(o.BandOptions) {
		toSerialize["band_options"] = o.BandOptions
	}
	if !IsNil(o.HwInfo) {
		toSerialize["hw_info"] = o.HwInfo
	}
	if !IsNil(o.TimeoutStatus) {
		toSerialize["timeout_status"] = o.TimeoutStatus
	}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JammerInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"model",
		"disabled",
		"state",
		"position",
		"position_mode",
		"workzone",
		"bands",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJammerInfo := _JammerInfo{}

	err = json.Unmarshal(data, &varJammerInfo)

	if err != nil {
		return err
	}

	*o = JammerInfo(varJammerInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "model")
		delete(additionalProperties, "serial")
		delete(additionalProperties, "sw_version")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "state")
		delete(additionalProperties, "position")
		delete(additionalProperties, "position_mode")
		delete(additionalProperties, "workzone")
		delete(additionalProperties, "sensor_id")
		delete(additionalProperties, "bands")
		delete(additionalProperties, "band_options")
		delete(additionalProperties, "hw_info")
		delete(additionalProperties, "timeout_status")
		delete(additionalProperties, "group_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJammerInfo struct {
	value *JammerInfo
	isSet bool
}

func (v NullableJammerInfo) Get() *JammerInfo {
	return v.value
}

func (v *NullableJammerInfo) Set(val *JammerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableJammerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableJammerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJammerInfo(val *JammerInfo) *NullableJammerInfo {
	return &NullableJammerInfo{value: val, isSet: true}
}

func (v NullableJammerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJammerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


