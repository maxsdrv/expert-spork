/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provider_client

import (
	"encoding/json"
	"fmt"
)

// checks if the TrackData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackData{}

// TrackData struct for TrackData
type TrackData struct {
	// Matching sensor ID identification string based on UUID
	TrackId string `json:"track_id"`
	// Matching sensor ID identification string based on UUID
	TargetId string `json:"target_id"`
	// Matching sensor ID identification string based on UUID
	SourceId string `json:"source_id"`
	Points []TrackPoint `json:"points"`
	AdditionalProperties map[string]interface{}
}

type _TrackData TrackData

// NewTrackData instantiates a new TrackData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackData(trackId string, targetId string, sourceId string, points []TrackPoint) *TrackData {
	this := TrackData{}
	this.TrackId = trackId
	this.TargetId = targetId
	this.SourceId = sourceId
	this.Points = points
	return &this
}

// NewTrackDataWithDefaults instantiates a new TrackData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackDataWithDefaults() *TrackData {
	this := TrackData{}
	return &this
}

// GetTrackId returns the TrackId field value
func (o *TrackData) GetTrackId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TrackId
}

// GetTrackIdOk returns a tuple with the TrackId field value
// and a boolean to check if the value has been set.
func (o *TrackData) GetTrackIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrackId, true
}

// SetTrackId sets field value
func (o *TrackData) SetTrackId(v string) {
	o.TrackId = v
}

// GetTargetId returns the TargetId field value
func (o *TrackData) GetTargetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value
// and a boolean to check if the value has been set.
func (o *TrackData) GetTargetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetId, true
}

// SetTargetId sets field value
func (o *TrackData) SetTargetId(v string) {
	o.TargetId = v
}

// GetSourceId returns the SourceId field value
func (o *TrackData) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *TrackData) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *TrackData) SetSourceId(v string) {
	o.SourceId = v
}

// GetPoints returns the Points field value
func (o *TrackData) GetPoints() []TrackPoint {
	if o == nil {
		var ret []TrackPoint
		return ret
	}

	return o.Points
}

// GetPointsOk returns a tuple with the Points field value
// and a boolean to check if the value has been set.
func (o *TrackData) GetPointsOk() ([]TrackPoint, bool) {
	if o == nil {
		return nil, false
	}
	return o.Points, true
}

// SetPoints sets field value
func (o *TrackData) SetPoints(v []TrackPoint) {
	o.Points = v
}

func (o TrackData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["track_id"] = o.TrackId
	toSerialize["target_id"] = o.TargetId
	toSerialize["source_id"] = o.SourceId
	toSerialize["points"] = o.Points

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TrackData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"track_id",
		"target_id",
		"source_id",
		"points",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrackData := _TrackData{}

	err = json.Unmarshal(data, &varTrackData)

	if err != nil {
		return err
	}

	*o = TrackData(varTrackData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "track_id")
		delete(additionalProperties, "target_id")
		delete(additionalProperties, "source_id")
		delete(additionalProperties, "points")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTrackData struct {
	value *TrackData
	isSet bool
}

func (v NullableTrackData) Get() *TrackData {
	return v.value
}

func (v *NullableTrackData) Set(val *TrackData) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackData) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackData(val *TrackData) *NullableTrackData {
	return &NullableTrackData{value: val, isSet: true}
}

func (v NullableTrackData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


