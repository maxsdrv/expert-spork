/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provider_client

import (
	"encoding/json"
	"fmt"
)

// checks if the GetJammerMode200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetJammerMode200Response{}

// GetJammerMode200Response struct for GetJammerMode200Response
type GetJammerMode200Response struct {
	JammerMode JammerMode `json:"jammer_mode"`
	AdditionalProperties map[string]interface{}
}

type _GetJammerMode200Response GetJammerMode200Response

// NewGetJammerMode200Response instantiates a new GetJammerMode200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetJammerMode200Response(jammerMode JammerMode) *GetJammerMode200Response {
	this := GetJammerMode200Response{}
	this.JammerMode = jammerMode
	return &this
}

// NewGetJammerMode200ResponseWithDefaults instantiates a new GetJammerMode200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetJammerMode200ResponseWithDefaults() *GetJammerMode200Response {
	this := GetJammerMode200Response{}
	return &this
}

// GetJammerMode returns the JammerMode field value
func (o *GetJammerMode200Response) GetJammerMode() JammerMode {
	if o == nil {
		var ret JammerMode
		return ret
	}

	return o.JammerMode
}

// GetJammerModeOk returns a tuple with the JammerMode field value
// and a boolean to check if the value has been set.
func (o *GetJammerMode200Response) GetJammerModeOk() (*JammerMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JammerMode, true
}

// SetJammerMode sets field value
func (o *GetJammerMode200Response) SetJammerMode(v JammerMode) {
	o.JammerMode = v
}

func (o GetJammerMode200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetJammerMode200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["jammer_mode"] = o.JammerMode

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetJammerMode200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"jammer_mode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetJammerMode200Response := _GetJammerMode200Response{}

	err = json.Unmarshal(data, &varGetJammerMode200Response)

	if err != nil {
		return err
	}

	*o = GetJammerMode200Response(varGetJammerMode200Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "jammer_mode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetJammerMode200Response struct {
	value *GetJammerMode200Response
	isSet bool
}

func (v NullableGetJammerMode200Response) Get() *GetJammerMode200Response {
	return v.value
}

func (v *NullableGetJammerMode200Response) Set(val *GetJammerMode200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetJammerMode200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetJammerMode200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetJammerMode200Response(val *GetJammerMode200Response) *NullableGetJammerMode200Response {
	return &NullableGetJammerMode200Response{value: val, isSet: true}
}

func (v NullableGetJammerMode200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetJammerMode200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


