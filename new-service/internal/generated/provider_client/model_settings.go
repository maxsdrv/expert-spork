/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provider_client

import (
	"encoding/json"
	"fmt"
)

// checks if the Settings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Settings{}

// Settings struct for Settings
type Settings struct {
	DeviceIdMapping []DeviceIdMapping `json:"device_id_mapping,omitempty"`
	Devices []DeviceSettings `json:"devices"`
	AdditionalProperties map[string]interface{}
}

type _Settings Settings

// NewSettings instantiates a new Settings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettings(devices []DeviceSettings) *Settings {
	this := Settings{}
	this.Devices = devices
	return &this
}

// NewSettingsWithDefaults instantiates a new Settings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsWithDefaults() *Settings {
	this := Settings{}
	return &this
}

// GetDeviceIdMapping returns the DeviceIdMapping field value if set, zero value otherwise.
func (o *Settings) GetDeviceIdMapping() []DeviceIdMapping {
	if o == nil || IsNil(o.DeviceIdMapping) {
		var ret []DeviceIdMapping
		return ret
	}
	return o.DeviceIdMapping
}

// GetDeviceIdMappingOk returns a tuple with the DeviceIdMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetDeviceIdMappingOk() ([]DeviceIdMapping, bool) {
	if o == nil || IsNil(o.DeviceIdMapping) {
		return nil, false
	}
	return o.DeviceIdMapping, true
}

// HasDeviceIdMapping returns a boolean if a field has been set.
func (o *Settings) HasDeviceIdMapping() bool {
	if o != nil && !IsNil(o.DeviceIdMapping) {
		return true
	}

	return false
}

// SetDeviceIdMapping gets a reference to the given []DeviceIdMapping and assigns it to the DeviceIdMapping field.
func (o *Settings) SetDeviceIdMapping(v []DeviceIdMapping) {
	o.DeviceIdMapping = v
}

// GetDevices returns the Devices field value
func (o *Settings) GetDevices() []DeviceSettings {
	if o == nil {
		var ret []DeviceSettings
		return ret
	}

	return o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value
// and a boolean to check if the value has been set.
func (o *Settings) GetDevicesOk() ([]DeviceSettings, bool) {
	if o == nil {
		return nil, false
	}
	return o.Devices, true
}

// SetDevices sets field value
func (o *Settings) SetDevices(v []DeviceSettings) {
	o.Devices = v
}

func (o Settings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Settings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceIdMapping) {
		toSerialize["device_id_mapping"] = o.DeviceIdMapping
	}
	toSerialize["devices"] = o.Devices

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Settings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"devices",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSettings := _Settings{}

	err = json.Unmarshal(data, &varSettings)

	if err != nil {
		return err
	}

	*o = Settings(varSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "device_id_mapping")
		delete(additionalProperties, "devices")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSettings struct {
	value *Settings
	isSet bool
}

func (v NullableSettings) Get() *Settings {
	return v.value
}

func (v *NullableSettings) Set(val *Settings) {
	v.value = val
	v.isSet = true
}

func (v NullableSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettings(val *Settings) *NullableSettings {
	return &NullableSettings{value: val, isSet: true}
}

func (v NullableSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


