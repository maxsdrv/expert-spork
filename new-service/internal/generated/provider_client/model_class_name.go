/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provider_client

import (
	"encoding/json"
	"fmt"
)

// ClassName Target class name
type ClassName string

// List of class_name
const (
	CLASSNAME_UNDEFINED ClassName = "UNDEFINED"
	CLASSNAME_DRONE ClassName = "DRONE"
	CLASSNAME_CAR ClassName = "CAR"
	CLASSNAME_TRUCK ClassName = "TRUCK"
	CLASSNAME_HUMAN ClassName = "HUMAN"
	CLASSNAME_TREE ClassName = "TREE"
	CLASSNAME_PEOPLE_GROUP ClassName = "PEOPLE_GROUP"
	CLASSNAME_MOTORCYCLE ClassName = "MOTORCYCLE"
	CLASSNAME_JET_SKI ClassName = "JET_SKI"
	CLASSNAME_BOAT ClassName = "BOAT"
	CLASSNAME_SHIP ClassName = "SHIP"
	CLASSNAME_REMOTE_CONSOLE ClassName = "REMOTE_CONSOLE"
	CLASSNAME_UNKNOWN_DEFAULT_OPEN_API ClassName = "11184809"
)

// All allowed values of ClassName enum
var AllowedClassNameEnumValues = []ClassName{
	"UNDEFINED",
	"DRONE",
	"CAR",
	"TRUCK",
	"HUMAN",
	"TREE",
	"PEOPLE_GROUP",
	"MOTORCYCLE",
	"JET_SKI",
	"BOAT",
	"SHIP",
	"REMOTE_CONSOLE",
	"11184809",
}

func (v *ClassName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClassName(value)
	for _, existing := range AllowedClassNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClassName", value)
}

// NewClassNameFromValue returns a pointer to a valid ClassName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClassNameFromValue(v string) (*ClassName, error) {
	ev := ClassName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClassName: valid values are %v", v, AllowedClassNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClassName) IsValid() bool {
	for _, existing := range AllowedClassNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to class_name value
func (v ClassName) Ptr() *ClassName {
	return &v
}

type NullableClassName struct {
	value *ClassName
	isSet bool
}

func (v NullableClassName) Get() *ClassName {
	return v.value
}

func (v *NullableClassName) Set(val *ClassName) {
	v.value = val
	v.isSet = true
}

func (v NullableClassName) IsSet() bool {
	return v.isSet
}

func (v *NullableClassName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClassName(val *ClassName) *NullableClassName {
	return &NullableClassName{value: val, isSet: true}
}

func (v NullableClassName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClassName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

