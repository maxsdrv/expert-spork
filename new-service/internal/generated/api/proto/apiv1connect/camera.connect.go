// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: camera.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	proto "dds-provider/internal/generated/api/proto"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CameraServiceName is the fully-qualified name of the CameraService service.
	CameraServiceName = "api.v1.CameraService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CameraServiceCameraIdProcedure is the fully-qualified name of the CameraService's CameraId RPC.
	CameraServiceCameraIdProcedure = "/api.v1.CameraService/CameraId"
)

// CameraServiceClient is a client for the api.v1.CameraService service.
type CameraServiceClient interface {
	CameraId(context.Context, *connect.Request[proto.CameraIdRequest]) (*connect.Response[proto.CameraIdResponse], error)
}

// NewCameraServiceClient constructs a client for the api.v1.CameraService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCameraServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CameraServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	cameraServiceMethods := proto.File_camera_proto.Services().ByName("CameraService").Methods()
	return &cameraServiceClient{
		cameraId: connect.NewClient[proto.CameraIdRequest, proto.CameraIdResponse](
			httpClient,
			baseURL+CameraServiceCameraIdProcedure,
			connect.WithSchema(cameraServiceMethods.ByName("CameraId")),
			connect.WithClientOptions(opts...),
		),
	}
}

// cameraServiceClient implements CameraServiceClient.
type cameraServiceClient struct {
	cameraId *connect.Client[proto.CameraIdRequest, proto.CameraIdResponse]
}

// CameraId calls api.v1.CameraService.CameraId.
func (c *cameraServiceClient) CameraId(ctx context.Context, req *connect.Request[proto.CameraIdRequest]) (*connect.Response[proto.CameraIdResponse], error) {
	return c.cameraId.CallUnary(ctx, req)
}

// CameraServiceHandler is an implementation of the api.v1.CameraService service.
type CameraServiceHandler interface {
	CameraId(context.Context, *connect.Request[proto.CameraIdRequest]) (*connect.Response[proto.CameraIdResponse], error)
}

// NewCameraServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCameraServiceHandler(svc CameraServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cameraServiceMethods := proto.File_camera_proto.Services().ByName("CameraService").Methods()
	cameraServiceCameraIdHandler := connect.NewUnaryHandler(
		CameraServiceCameraIdProcedure,
		svc.CameraId,
		connect.WithSchema(cameraServiceMethods.ByName("CameraId")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.CameraService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CameraServiceCameraIdProcedure:
			cameraServiceCameraIdHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCameraServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCameraServiceHandler struct{}

func (UnimplementedCameraServiceHandler) CameraId(context.Context, *connect.Request[proto.CameraIdRequest]) (*connect.Response[proto.CameraIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.CameraService.CameraId is not implemented"))
}
