// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: jammer.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	proto "dds-provider/internal/generated/api/proto"
	errors "errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// JammerServiceName is the fully-qualified name of the JammerService service.
	JammerServiceName = "api.v1.JammerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JammerServiceJammersProcedure is the fully-qualified name of the JammerService's Jammers RPC.
	JammerServiceJammersProcedure = "/api.v1.JammerService/Jammers"
	// JammerServiceJammerInfoDynamicProcedure is the fully-qualified name of the JammerService's
	// JammerInfoDynamic RPC.
	JammerServiceJammerInfoDynamicProcedure = "/api.v1.JammerService/JammerInfoDynamic"
	// JammerServiceGroupsProcedure is the fully-qualified name of the JammerService's Groups RPC.
	JammerServiceGroupsProcedure = "/api.v1.JammerService/Groups"
	// JammerServiceSetJammerBandsProcedure is the fully-qualified name of the JammerService's
	// SetJammerBands RPC.
	JammerServiceSetJammerBandsProcedure = "/api.v1.JammerService/SetJammerBands"
)

// JammerServiceClient is a client for the api.v1.JammerService service.
type JammerServiceClient interface {
	Jammers(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[proto.JammersResponse], error)
	// Get the initial jammer state with the first stream message
	JammerInfoDynamic(context.Context, *connect.Request[proto.JammerInfoRequest]) (*connect.ServerStreamForClient[proto.JammerInfoDynamicResponse], error)
	Groups(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[proto.GroupsResponse], error)
	// (Sets jammer's per-band activity for manual mode)
	// - empty bands array stops all bands immediately
	// - after duration seconds jamming stops
	// - if requested while already started the new request will start instead of existing one
	// - on device error no action but 200 response before
	// - timer_status presense in jammer_info indicates timer is run
	SetJammerBands(context.Context, *connect.Request[proto.SetJammerBandsRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewJammerServiceClient constructs a client for the api.v1.JammerService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJammerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) JammerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	jammerServiceMethods := proto.File_jammer_proto.Services().ByName("JammerService").Methods()
	return &jammerServiceClient{
		jammers: connect.NewClient[emptypb.Empty, proto.JammersResponse](
			httpClient,
			baseURL+JammerServiceJammersProcedure,
			connect.WithSchema(jammerServiceMethods.ByName("Jammers")),
			connect.WithClientOptions(opts...),
		),
		jammerInfoDynamic: connect.NewClient[proto.JammerInfoRequest, proto.JammerInfoDynamicResponse](
			httpClient,
			baseURL+JammerServiceJammerInfoDynamicProcedure,
			connect.WithSchema(jammerServiceMethods.ByName("JammerInfoDynamic")),
			connect.WithClientOptions(opts...),
		),
		groups: connect.NewClient[emptypb.Empty, proto.GroupsResponse](
			httpClient,
			baseURL+JammerServiceGroupsProcedure,
			connect.WithSchema(jammerServiceMethods.ByName("Groups")),
			connect.WithClientOptions(opts...),
		),
		setJammerBands: connect.NewClient[proto.SetJammerBandsRequest, emptypb.Empty](
			httpClient,
			baseURL+JammerServiceSetJammerBandsProcedure,
			connect.WithSchema(jammerServiceMethods.ByName("SetJammerBands")),
			connect.WithClientOptions(opts...),
		),
	}
}

// jammerServiceClient implements JammerServiceClient.
type jammerServiceClient struct {
	jammers           *connect.Client[emptypb.Empty, proto.JammersResponse]
	jammerInfoDynamic *connect.Client[proto.JammerInfoRequest, proto.JammerInfoDynamicResponse]
	groups            *connect.Client[emptypb.Empty, proto.GroupsResponse]
	setJammerBands    *connect.Client[proto.SetJammerBandsRequest, emptypb.Empty]
}

// Jammers calls api.v1.JammerService.Jammers.
func (c *jammerServiceClient) Jammers(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[proto.JammersResponse], error) {
	return c.jammers.CallUnary(ctx, req)
}

// JammerInfoDynamic calls api.v1.JammerService.JammerInfoDynamic.
func (c *jammerServiceClient) JammerInfoDynamic(ctx context.Context, req *connect.Request[proto.JammerInfoRequest]) (*connect.ServerStreamForClient[proto.JammerInfoDynamicResponse], error) {
	return c.jammerInfoDynamic.CallServerStream(ctx, req)
}

// Groups calls api.v1.JammerService.Groups.
func (c *jammerServiceClient) Groups(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[proto.GroupsResponse], error) {
	return c.groups.CallUnary(ctx, req)
}

// SetJammerBands calls api.v1.JammerService.SetJammerBands.
func (c *jammerServiceClient) SetJammerBands(ctx context.Context, req *connect.Request[proto.SetJammerBandsRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.setJammerBands.CallUnary(ctx, req)
}

// JammerServiceHandler is an implementation of the api.v1.JammerService service.
type JammerServiceHandler interface {
	Jammers(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[proto.JammersResponse], error)
	// Get the initial jammer state with the first stream message
	JammerInfoDynamic(context.Context, *connect.Request[proto.JammerInfoRequest], *connect.ServerStream[proto.JammerInfoDynamicResponse]) error
	Groups(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[proto.GroupsResponse], error)
	// (Sets jammer's per-band activity for manual mode)
	// - empty bands array stops all bands immediately
	// - after duration seconds jamming stops
	// - if requested while already started the new request will start instead of existing one
	// - on device error no action but 200 response before
	// - timer_status presense in jammer_info indicates timer is run
	SetJammerBands(context.Context, *connect.Request[proto.SetJammerBandsRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewJammerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJammerServiceHandler(svc JammerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	jammerServiceMethods := proto.File_jammer_proto.Services().ByName("JammerService").Methods()
	jammerServiceJammersHandler := connect.NewUnaryHandler(
		JammerServiceJammersProcedure,
		svc.Jammers,
		connect.WithSchema(jammerServiceMethods.ByName("Jammers")),
		connect.WithHandlerOptions(opts...),
	)
	jammerServiceJammerInfoDynamicHandler := connect.NewServerStreamHandler(
		JammerServiceJammerInfoDynamicProcedure,
		svc.JammerInfoDynamic,
		connect.WithSchema(jammerServiceMethods.ByName("JammerInfoDynamic")),
		connect.WithHandlerOptions(opts...),
	)
	jammerServiceGroupsHandler := connect.NewUnaryHandler(
		JammerServiceGroupsProcedure,
		svc.Groups,
		connect.WithSchema(jammerServiceMethods.ByName("Groups")),
		connect.WithHandlerOptions(opts...),
	)
	jammerServiceSetJammerBandsHandler := connect.NewUnaryHandler(
		JammerServiceSetJammerBandsProcedure,
		svc.SetJammerBands,
		connect.WithSchema(jammerServiceMethods.ByName("SetJammerBands")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.JammerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JammerServiceJammersProcedure:
			jammerServiceJammersHandler.ServeHTTP(w, r)
		case JammerServiceJammerInfoDynamicProcedure:
			jammerServiceJammerInfoDynamicHandler.ServeHTTP(w, r)
		case JammerServiceGroupsProcedure:
			jammerServiceGroupsHandler.ServeHTTP(w, r)
		case JammerServiceSetJammerBandsProcedure:
			jammerServiceSetJammerBandsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJammerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJammerServiceHandler struct{}

func (UnimplementedJammerServiceHandler) Jammers(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[proto.JammersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.JammerService.Jammers is not implemented"))
}

func (UnimplementedJammerServiceHandler) JammerInfoDynamic(context.Context, *connect.Request[proto.JammerInfoRequest], *connect.ServerStream[proto.JammerInfoDynamicResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.JammerService.JammerInfoDynamic is not implemented"))
}

func (UnimplementedJammerServiceHandler) Groups(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[proto.GroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.JammerService.Groups is not implemented"))
}

func (UnimplementedJammerServiceHandler) SetJammerBands(context.Context, *connect.Request[proto.SetJammerBandsRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.JammerService.SetJammerBands is not implemented"))
}
