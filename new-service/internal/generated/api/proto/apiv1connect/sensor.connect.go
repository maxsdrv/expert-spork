// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sensor.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	proto "dds-provider/internal/generated/api/proto"
	errors "errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SensorServiceName is the fully-qualified name of the SensorService proxy.
	SensorServiceName = "api.v1.SensorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SensorServiceSensorsProcedure is the fully-qualified name of the SensorService's Sensors RPC.
	SensorServiceSensorsProcedure = "/api.v1.SensorService/Sensors"
	// SensorServiceSensorInfoDynamicProcedure is the fully-qualified name of the SensorService's
	// SensorInfoDynamic RPC.
	SensorServiceSensorInfoDynamicProcedure = "/api.v1.SensorService/SensorInfoDynamic"
	// SensorServiceSetJammerModeProcedure is the fully-qualified name of the SensorService's
	// SetJammerMode RPC.
	SensorServiceSetJammerModeProcedure = "/api.v1.SensorService/SetJammerMode"
)

// SensorServiceClient is a client for the api.v1.SensorService proxy.
type SensorServiceClient interface {
	Sensors(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[proto.SensorsResponse], error)
	SensorInfoDynamic(context.Context, *connect.Request[proto.SensorInfoDynamicRequest]) (*connect.ServerStreamForClient[proto.SensorInfoDynamicResponse], error)
	// Sets current jammer mode - automatic or manual
	// MANUAL:
	// - accepts requests via set_jammer_bands
	// AUTO:
	// - starts jamming of any DRONE object
	// - jamming runs for "timeout" duration then stops and runs again if detection event is present
	// - manual requests via set_jammer_bands take preference above automatic jamming (except for empty bands request which does not stop jamming in AUTO mode currently)
	// Switching:
	// - switching of modes is allowed at any moment
	// - if mode changed while jamming runs it will run until timeout, then may run again according to the new mode
	SetJammerMode(context.Context, *connect.Request[proto.SetJammerModeRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewSensorServiceClient constructs a client for the api.v1.SensorService proxy. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSensorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SensorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	sensorServiceMethods := proto.File_sensor_proto.Services().ByName("SensorService").Methods()
	return &sensorServiceClient{
		sensors: connect.NewClient[emptypb.Empty, proto.SensorsResponse](
			httpClient,
			baseURL+SensorServiceSensorsProcedure,
			connect.WithSchema(sensorServiceMethods.ByName("Sensors")),
			connect.WithClientOptions(opts...),
		),
		sensorInfoDynamic: connect.NewClient[proto.SensorInfoDynamicRequest, proto.SensorInfoDynamicResponse](
			httpClient,
			baseURL+SensorServiceSensorInfoDynamicProcedure,
			connect.WithSchema(sensorServiceMethods.ByName("SensorInfoDynamic")),
			connect.WithClientOptions(opts...),
		),
		setJammerMode: connect.NewClient[proto.SetJammerModeRequest, emptypb.Empty](
			httpClient,
			baseURL+SensorServiceSetJammerModeProcedure,
			connect.WithSchema(sensorServiceMethods.ByName("SetJammerMode")),
			connect.WithClientOptions(opts...),
		),
	}
}

// sensorServiceClient implements SensorServiceClient.
type sensorServiceClient struct {
	sensors           *connect.Client[emptypb.Empty, proto.SensorsResponse]
	sensorInfoDynamic *connect.Client[proto.SensorInfoDynamicRequest, proto.SensorInfoDynamicResponse]
	setJammerMode     *connect.Client[proto.SetJammerModeRequest, emptypb.Empty]
}

// Sensors calls api.v1.SensorService.Sensors.
func (c *sensorServiceClient) Sensors(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[proto.SensorsResponse], error) {
	return c.sensors.CallUnary(ctx, req)
}

// SensorInfoDynamic calls api.v1.SensorService.SensorInfoDynamic.
func (c *sensorServiceClient) SensorInfoDynamic(ctx context.Context, req *connect.Request[proto.SensorInfoDynamicRequest]) (*connect.ServerStreamForClient[proto.SensorInfoDynamicResponse], error) {
	return c.sensorInfoDynamic.CallServerStream(ctx, req)
}

// SetJammerMode calls api.v1.SensorService.SetJammerMode.
func (c *sensorServiceClient) SetJammerMode(ctx context.Context, req *connect.Request[proto.SetJammerModeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.setJammerMode.CallUnary(ctx, req)
}

// SensorServiceHandler is an implementation of the api.v1.SensorService proxy.
type SensorServiceHandler interface {
	Sensors(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[proto.SensorsResponse], error)
	SensorInfoDynamic(context.Context, *connect.Request[proto.SensorInfoDynamicRequest], *connect.ServerStream[proto.SensorInfoDynamicResponse]) error
	// Sets current jammer mode - automatic or manual
	// MANUAL:
	// - accepts requests via set_jammer_bands
	// AUTO:
	// - starts jamming of any DRONE object
	// - jamming runs for "timeout" duration then stops and runs again if detection event is present
	// - manual requests via set_jammer_bands take preference above automatic jamming (except for empty bands request which does not stop jamming in AUTO mode currently)
	// Switching:
	// - switching of modes is allowed at any moment
	// - if mode changed while jamming runs it will run until timeout, then may run again according to the new mode
	SetJammerMode(context.Context, *connect.Request[proto.SetJammerModeRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewSensorServiceHandler builds an HTTP handler from the proxy implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSensorServiceHandler(svc SensorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sensorServiceMethods := proto.File_sensor_proto.Services().ByName("SensorService").Methods()
	sensorServiceSensorsHandler := connect.NewUnaryHandler(
		SensorServiceSensorsProcedure,
		svc.Sensors,
		connect.WithSchema(sensorServiceMethods.ByName("Sensors")),
		connect.WithHandlerOptions(opts...),
	)
	sensorServiceSensorInfoDynamicHandler := connect.NewServerStreamHandler(
		SensorServiceSensorInfoDynamicProcedure,
		svc.SensorInfoDynamic,
		connect.WithSchema(sensorServiceMethods.ByName("SensorInfoDynamic")),
		connect.WithHandlerOptions(opts...),
	)
	sensorServiceSetJammerModeHandler := connect.NewUnaryHandler(
		SensorServiceSetJammerModeProcedure,
		svc.SetJammerMode,
		connect.WithSchema(sensorServiceMethods.ByName("SetJammerMode")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.SensorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SensorServiceSensorsProcedure:
			sensorServiceSensorsHandler.ServeHTTP(w, r)
		case SensorServiceSensorInfoDynamicProcedure:
			sensorServiceSensorInfoDynamicHandler.ServeHTTP(w, r)
		case SensorServiceSetJammerModeProcedure:
			sensorServiceSetJammerModeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSensorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSensorServiceHandler struct{}

func (UnimplementedSensorServiceHandler) Sensors(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[proto.SensorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.SensorService.Sensors is not implemented"))
}

func (UnimplementedSensorServiceHandler) SensorInfoDynamic(context.Context, *connect.Request[proto.SensorInfoDynamicRequest], *connect.ServerStream[proto.SensorInfoDynamicResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.SensorService.SensorInfoDynamic is not implemented"))
}

func (UnimplementedSensorServiceHandler) SetJammerMode(context.Context, *connect.Request[proto.SetJammerModeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.SensorService.SetJammerMode is not implemented"))
}
