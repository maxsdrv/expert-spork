// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: device.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	proto "dds-provider/internal/generated/api/proto"
	errors "errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DeviceServiceName is the fully-qualified name of the DeviceService service.
	DeviceServiceName = "api.v1.DeviceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeviceServiceSetDisabledProcedure is the fully-qualified name of the DeviceService's SetDisabled
	// RPC.
	DeviceServiceSetDisabledProcedure = "/api.v1.DeviceService/SetDisabled"
	// DeviceServicePositionModeProcedure is the fully-qualified name of the DeviceService's
	// PositionMode RPC.
	DeviceServicePositionModeProcedure = "/api.v1.DeviceService/PositionMode"
	// DeviceServiceSetPositionModeProcedure is the fully-qualified name of the DeviceService's
	// SetPositionMode RPC.
	DeviceServiceSetPositionModeProcedure = "/api.v1.DeviceService/SetPositionMode"
	// DeviceServiceSetPositionProcedure is the fully-qualified name of the DeviceService's SetPosition
	// RPC.
	DeviceServiceSetPositionProcedure = "/api.v1.DeviceService/SetPosition"
)

// DeviceServiceClient is a client for the api.v1.DeviceService service.
type DeviceServiceClient interface {
	SetDisabled(context.Context, *connect.Request[proto.SetDisabledRequest]) (*connect.Response[emptypb.Empty], error)
	PositionMode(context.Context, *connect.Request[proto.PositionModeRequest]) (*connect.Response[proto.PositionModeResponse], error)
	SetPositionMode(context.Context, *connect.Request[proto.SetPositionModeRequest]) (*connect.Response[emptypb.Empty], error)
	SetPosition(context.Context, *connect.Request[proto.SetPositionRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewDeviceServiceClient constructs a client for the api.v1.DeviceService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeviceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeviceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	deviceServiceMethods := proto.File_device_proto.Services().ByName("DeviceService").Methods()
	return &deviceServiceClient{
		setDisabled: connect.NewClient[proto.SetDisabledRequest, emptypb.Empty](
			httpClient,
			baseURL+DeviceServiceSetDisabledProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("SetDisabled")),
			connect.WithClientOptions(opts...),
		),
		positionMode: connect.NewClient[proto.PositionModeRequest, proto.PositionModeResponse](
			httpClient,
			baseURL+DeviceServicePositionModeProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("PositionMode")),
			connect.WithClientOptions(opts...),
		),
		setPositionMode: connect.NewClient[proto.SetPositionModeRequest, emptypb.Empty](
			httpClient,
			baseURL+DeviceServiceSetPositionModeProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("SetPositionMode")),
			connect.WithClientOptions(opts...),
		),
		setPosition: connect.NewClient[proto.SetPositionRequest, emptypb.Empty](
			httpClient,
			baseURL+DeviceServiceSetPositionProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("SetPosition")),
			connect.WithClientOptions(opts...),
		),
	}
}

// deviceServiceClient implements DeviceServiceClient.
type deviceServiceClient struct {
	setDisabled     *connect.Client[proto.SetDisabledRequest, emptypb.Empty]
	positionMode    *connect.Client[proto.PositionModeRequest, proto.PositionModeResponse]
	setPositionMode *connect.Client[proto.SetPositionModeRequest, emptypb.Empty]
	setPosition     *connect.Client[proto.SetPositionRequest, emptypb.Empty]
}

// SetDisabled calls api.v1.DeviceService.SetDisabled.
func (c *deviceServiceClient) SetDisabled(ctx context.Context, req *connect.Request[proto.SetDisabledRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.setDisabled.CallUnary(ctx, req)
}

// PositionMode calls api.v1.DeviceService.PositionMode.
func (c *deviceServiceClient) PositionMode(ctx context.Context, req *connect.Request[proto.PositionModeRequest]) (*connect.Response[proto.PositionModeResponse], error) {
	return c.positionMode.CallUnary(ctx, req)
}

// SetPositionMode calls api.v1.DeviceService.SetPositionMode.
func (c *deviceServiceClient) SetPositionMode(ctx context.Context, req *connect.Request[proto.SetPositionModeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.setPositionMode.CallUnary(ctx, req)
}

// SetPosition calls api.v1.DeviceService.SetPosition.
func (c *deviceServiceClient) SetPosition(ctx context.Context, req *connect.Request[proto.SetPositionRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.setPosition.CallUnary(ctx, req)
}

// DeviceServiceHandler is an implementation of the api.v1.DeviceService service.
type DeviceServiceHandler interface {
	SetDisabled(context.Context, *connect.Request[proto.SetDisabledRequest]) (*connect.Response[emptypb.Empty], error)
	PositionMode(context.Context, *connect.Request[proto.PositionModeRequest]) (*connect.Response[proto.PositionModeResponse], error)
	SetPositionMode(context.Context, *connect.Request[proto.SetPositionModeRequest]) (*connect.Response[emptypb.Empty], error)
	SetPosition(context.Context, *connect.Request[proto.SetPositionRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewDeviceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeviceServiceHandler(svc DeviceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deviceServiceMethods := proto.File_device_proto.Services().ByName("DeviceService").Methods()
	deviceServiceSetDisabledHandler := connect.NewUnaryHandler(
		DeviceServiceSetDisabledProcedure,
		svc.SetDisabled,
		connect.WithSchema(deviceServiceMethods.ByName("SetDisabled")),
		connect.WithHandlerOptions(opts...),
	)
	deviceServicePositionModeHandler := connect.NewUnaryHandler(
		DeviceServicePositionModeProcedure,
		svc.PositionMode,
		connect.WithSchema(deviceServiceMethods.ByName("PositionMode")),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceSetPositionModeHandler := connect.NewUnaryHandler(
		DeviceServiceSetPositionModeProcedure,
		svc.SetPositionMode,
		connect.WithSchema(deviceServiceMethods.ByName("SetPositionMode")),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceSetPositionHandler := connect.NewUnaryHandler(
		DeviceServiceSetPositionProcedure,
		svc.SetPosition,
		connect.WithSchema(deviceServiceMethods.ByName("SetPosition")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.DeviceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeviceServiceSetDisabledProcedure:
			deviceServiceSetDisabledHandler.ServeHTTP(w, r)
		case DeviceServicePositionModeProcedure:
			deviceServicePositionModeHandler.ServeHTTP(w, r)
		case DeviceServiceSetPositionModeProcedure:
			deviceServiceSetPositionModeHandler.ServeHTTP(w, r)
		case DeviceServiceSetPositionProcedure:
			deviceServiceSetPositionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeviceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeviceServiceHandler struct{}

func (UnimplementedDeviceServiceHandler) SetDisabled(context.Context, *connect.Request[proto.SetDisabledRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.DeviceService.SetDisabled is not implemented"))
}

func (UnimplementedDeviceServiceHandler) PositionMode(context.Context, *connect.Request[proto.PositionModeRequest]) (*connect.Response[proto.PositionModeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.DeviceService.PositionMode is not implemented"))
}

func (UnimplementedDeviceServiceHandler) SetPositionMode(context.Context, *connect.Request[proto.SetPositionModeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.DeviceService.SetPositionMode is not implemented"))
}

func (UnimplementedDeviceServiceHandler) SetPosition(context.Context, *connect.Request[proto.SetPositionRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.DeviceService.SetPosition is not implemented"))
}
