// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: common.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	proto "dds-provider/internal/generated/api/proto"
	errors "errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CommonServiceName is the fully-qualified name of the CommonService proxy.
	CommonServiceName = "api.v1.CommonService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CommonServiceSettingsProcedure is the fully-qualified name of the CommonService's Settings RPC.
	CommonServiceSettingsProcedure = "/api.v1.CommonService/Settings"
	// CommonServiceSetSettingsProcedure is the fully-qualified name of the CommonService's SetSettings
	// RPC.
	CommonServiceSetSettingsProcedure = "/api.v1.CommonService/SetSettings"
	// CommonServiceLicenseStatusProcedure is the fully-qualified name of the CommonService's
	// LicenseStatus RPC.
	CommonServiceLicenseStatusProcedure = "/api.v1.CommonService/LicenseStatus"
	// CommonServiceUploadLicenseProcedure is the fully-qualified name of the CommonService's
	// UploadLicense RPC.
	CommonServiceUploadLicenseProcedure = "/api.v1.CommonService/UploadLicense"
)

// CommonServiceClient is a client for the api.v1.CommonService proxy.
type CommonServiceClient interface {
	Settings(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[proto.SettingsResponse], error)
	SetSettings(context.Context, *connect.Request[proto.SetSettingsRequest]) (*connect.Response[emptypb.Empty], error)
	LicenseStatus(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[proto.LicenseStatusResponse], error)
	UploadLicense(context.Context, *connect.Request[proto.UploadLicenseRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewCommonServiceClient constructs a client for the api.v1.CommonService proxy. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCommonServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CommonServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	commonServiceMethods := proto.File_common_proto.Services().ByName("CommonService").Methods()
	return &commonServiceClient{
		settings: connect.NewClient[emptypb.Empty, proto.SettingsResponse](
			httpClient,
			baseURL+CommonServiceSettingsProcedure,
			connect.WithSchema(commonServiceMethods.ByName("Settings")),
			connect.WithClientOptions(opts...),
		),
		setSettings: connect.NewClient[proto.SetSettingsRequest, emptypb.Empty](
			httpClient,
			baseURL+CommonServiceSetSettingsProcedure,
			connect.WithSchema(commonServiceMethods.ByName("SetSettings")),
			connect.WithClientOptions(opts...),
		),
		licenseStatus: connect.NewClient[emptypb.Empty, proto.LicenseStatusResponse](
			httpClient,
			baseURL+CommonServiceLicenseStatusProcedure,
			connect.WithSchema(commonServiceMethods.ByName("LicenseStatus")),
			connect.WithClientOptions(opts...),
		),
		uploadLicense: connect.NewClient[proto.UploadLicenseRequest, emptypb.Empty](
			httpClient,
			baseURL+CommonServiceUploadLicenseProcedure,
			connect.WithSchema(commonServiceMethods.ByName("UploadLicense")),
			connect.WithClientOptions(opts...),
		),
	}
}

// commonServiceClient implements CommonServiceClient.
type commonServiceClient struct {
	settings      *connect.Client[emptypb.Empty, proto.SettingsResponse]
	setSettings   *connect.Client[proto.SetSettingsRequest, emptypb.Empty]
	licenseStatus *connect.Client[emptypb.Empty, proto.LicenseStatusResponse]
	uploadLicense *connect.Client[proto.UploadLicenseRequest, emptypb.Empty]
}

// Settings calls api.v1.CommonService.Settings.
func (c *commonServiceClient) Settings(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[proto.SettingsResponse], error) {
	return c.settings.CallUnary(ctx, req)
}

// SetSettings calls api.v1.CommonService.SetSettings.
func (c *commonServiceClient) SetSettings(ctx context.Context, req *connect.Request[proto.SetSettingsRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.setSettings.CallUnary(ctx, req)
}

// LicenseStatus calls api.v1.CommonService.LicenseStatus.
func (c *commonServiceClient) LicenseStatus(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[proto.LicenseStatusResponse], error) {
	return c.licenseStatus.CallUnary(ctx, req)
}

// UploadLicense calls api.v1.CommonService.UploadLicense.
func (c *commonServiceClient) UploadLicense(ctx context.Context, req *connect.Request[proto.UploadLicenseRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.uploadLicense.CallUnary(ctx, req)
}

// CommonServiceHandler is an implementation of the api.v1.CommonService proxy.
type CommonServiceHandler interface {
	Settings(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[proto.SettingsResponse], error)
	SetSettings(context.Context, *connect.Request[proto.SetSettingsRequest]) (*connect.Response[emptypb.Empty], error)
	LicenseStatus(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[proto.LicenseStatusResponse], error)
	UploadLicense(context.Context, *connect.Request[proto.UploadLicenseRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewCommonServiceHandler builds an HTTP handler from the proxy implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCommonServiceHandler(svc CommonServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	commonServiceMethods := proto.File_common_proto.Services().ByName("CommonService").Methods()
	commonServiceSettingsHandler := connect.NewUnaryHandler(
		CommonServiceSettingsProcedure,
		svc.Settings,
		connect.WithSchema(commonServiceMethods.ByName("Settings")),
		connect.WithHandlerOptions(opts...),
	)
	commonServiceSetSettingsHandler := connect.NewUnaryHandler(
		CommonServiceSetSettingsProcedure,
		svc.SetSettings,
		connect.WithSchema(commonServiceMethods.ByName("SetSettings")),
		connect.WithHandlerOptions(opts...),
	)
	commonServiceLicenseStatusHandler := connect.NewUnaryHandler(
		CommonServiceLicenseStatusProcedure,
		svc.LicenseStatus,
		connect.WithSchema(commonServiceMethods.ByName("LicenseStatus")),
		connect.WithHandlerOptions(opts...),
	)
	commonServiceUploadLicenseHandler := connect.NewUnaryHandler(
		CommonServiceUploadLicenseProcedure,
		svc.UploadLicense,
		connect.WithSchema(commonServiceMethods.ByName("UploadLicense")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.CommonService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CommonServiceSettingsProcedure:
			commonServiceSettingsHandler.ServeHTTP(w, r)
		case CommonServiceSetSettingsProcedure:
			commonServiceSetSettingsHandler.ServeHTTP(w, r)
		case CommonServiceLicenseStatusProcedure:
			commonServiceLicenseStatusHandler.ServeHTTP(w, r)
		case CommonServiceUploadLicenseProcedure:
			commonServiceUploadLicenseHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCommonServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCommonServiceHandler struct{}

func (UnimplementedCommonServiceHandler) Settings(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[proto.SettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.CommonService.Settings is not implemented"))
}

func (UnimplementedCommonServiceHandler) SetSettings(context.Context, *connect.Request[proto.SetSettingsRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.CommonService.SetSettings is not implemented"))
}

func (UnimplementedCommonServiceHandler) LicenseStatus(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[proto.LicenseStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.CommonService.LicenseStatus is not implemented"))
}

func (UnimplementedCommonServiceHandler) UploadLicense(context.Context, *connect.Request[proto.UploadLicenseRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.CommonService.UploadLicense is not implemented"))
}
