// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: target.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	proto "dds-provider/internal/generated/api/proto"
	errors "errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TargetServiceName is the fully-qualified name of the TargetService proxy.
	TargetServiceName = "api.v1.TargetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TargetServiceTargetsProcedure is the fully-qualified name of the TargetService's Targets RPC.
	TargetServiceTargetsProcedure = "/api.v1.TargetService/Targets"
)

// TargetServiceClient is a client for the api.v1.TargetService proxy.
type TargetServiceClient interface {
	Targets(context.Context, *connect.Request[emptypb.Empty]) (*connect.ServerStreamForClient[proto.TargetsResponse], error)
}

// NewTargetServiceClient constructs a client for the api.v1.TargetService proxy. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTargetServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TargetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	targetServiceMethods := proto.File_target_proto.Services().ByName("TargetService").Methods()
	return &targetServiceClient{
		targets: connect.NewClient[emptypb.Empty, proto.TargetsResponse](
			httpClient,
			baseURL+TargetServiceTargetsProcedure,
			connect.WithSchema(targetServiceMethods.ByName("Targets")),
			connect.WithClientOptions(opts...),
		),
	}
}

// targetServiceClient implements TargetServiceClient.
type targetServiceClient struct {
	targets *connect.Client[emptypb.Empty, proto.TargetsResponse]
}

// Targets calls api.v1.TargetService.Targets.
func (c *targetServiceClient) Targets(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.ServerStreamForClient[proto.TargetsResponse], error) {
	return c.targets.CallServerStream(ctx, req)
}

// TargetServiceHandler is an implementation of the api.v1.TargetService proxy.
type TargetServiceHandler interface {
	Targets(context.Context, *connect.Request[emptypb.Empty], *connect.ServerStream[proto.TargetsResponse]) error
}

// NewTargetServiceHandler builds an HTTP handler from the proxy implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTargetServiceHandler(svc TargetServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	targetServiceMethods := proto.File_target_proto.Services().ByName("TargetService").Methods()
	targetServiceTargetsHandler := connect.NewServerStreamHandler(
		TargetServiceTargetsProcedure,
		svc.Targets,
		connect.WithSchema(targetServiceMethods.ByName("Targets")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.TargetService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TargetServiceTargetsProcedure:
			targetServiceTargetsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTargetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTargetServiceHandler struct{}

func (UnimplementedTargetServiceHandler) Targets(context.Context, *connect.Request[emptypb.Empty], *connect.ServerStream[proto.TargetsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.TargetService.Targets is not implemented"))
}
