/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dss_target_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SensorList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SensorList{}

// SensorList struct for SensorList
type SensorList struct {
	Sensors []SensorInfo `json:"sensors"`
}

type _SensorList SensorList

// NewSensorList instantiates a new SensorList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensorList(sensors []SensorInfo) *SensorList {
	this := SensorList{}
	this.Sensors = sensors
	return &this
}

// NewSensorListWithDefaults instantiates a new SensorList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensorListWithDefaults() *SensorList {
	this := SensorList{}
	return &this
}

// GetSensors returns the Sensors field value
func (o *SensorList) GetSensors() []SensorInfo {
	if o == nil {
		var ret []SensorInfo
		return ret
	}

	return o.Sensors
}

// GetSensorsOk returns a tuple with the Sensors field value
// and a boolean to check if the value has been set.
func (o *SensorList) GetSensorsOk() ([]SensorInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sensors, true
}

// SetSensors sets field value
func (o *SensorList) SetSensors(v []SensorInfo) {
	o.Sensors = v
}

func (o SensorList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SensorList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sensors"] = o.Sensors
	return toSerialize, nil
}

func (o *SensorList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sensors",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSensorList := _SensorList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSensorList)

	if err != nil {
		return err
	}

	*o = SensorList(varSensorList)

	return err
}

type NullableSensorList struct {
	value *SensorList
	isSet bool
}

func (v NullableSensorList) Get() *SensorList {
	return v.value
}

func (v *NullableSensorList) Set(val *SensorList) {
	v.value = val
	v.isSet = true
}

func (v NullableSensorList) IsSet() bool {
	return v.isSet
}

func (v *NullableSensorList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensorList(val *SensorList) *NullableSensorList {
	return &NullableSensorList{value: val, isSet: true}
}

func (v NullableSensorList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensorList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


