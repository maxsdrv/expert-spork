/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dss_target_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GeoPosition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeoPosition{}

// GeoPosition struct for GeoPosition
type GeoPosition struct {
	Azimuth float64 `json:"azimuth"`
	Coordinate GeoCoordinate `json:"coordinate"`
}

type _GeoPosition GeoPosition

// NewGeoPosition instantiates a new GeoPosition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoPosition(azimuth float64, coordinate GeoCoordinate) *GeoPosition {
	this := GeoPosition{}
	this.Azimuth = azimuth
	this.Coordinate = coordinate
	return &this
}

// NewGeoPositionWithDefaults instantiates a new GeoPosition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoPositionWithDefaults() *GeoPosition {
	this := GeoPosition{}
	return &this
}

// GetAzimuth returns the Azimuth field value
func (o *GeoPosition) GetAzimuth() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Azimuth
}

// GetAzimuthOk returns a tuple with the Azimuth field value
// and a boolean to check if the value has been set.
func (o *GeoPosition) GetAzimuthOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Azimuth, true
}

// SetAzimuth sets field value
func (o *GeoPosition) SetAzimuth(v float64) {
	o.Azimuth = v
}

// GetCoordinate returns the Coordinate field value
func (o *GeoPosition) GetCoordinate() GeoCoordinate {
	if o == nil {
		var ret GeoCoordinate
		return ret
	}

	return o.Coordinate
}

// GetCoordinateOk returns a tuple with the Coordinate field value
// and a boolean to check if the value has been set.
func (o *GeoPosition) GetCoordinateOk() (*GeoCoordinate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Coordinate, true
}

// SetCoordinate sets field value
func (o *GeoPosition) SetCoordinate(v GeoCoordinate) {
	o.Coordinate = v
}

func (o GeoPosition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeoPosition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["azimuth"] = o.Azimuth
	toSerialize["coordinate"] = o.Coordinate
	return toSerialize, nil
}

func (o *GeoPosition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"azimuth",
		"coordinate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGeoPosition := _GeoPosition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGeoPosition)

	if err != nil {
		return err
	}

	*o = GeoPosition(varGeoPosition)

	return err
}

type NullableGeoPosition struct {
	value *GeoPosition
	isSet bool
}

func (v NullableGeoPosition) Get() *GeoPosition {
	return v.value
}

func (v *NullableGeoPosition) Set(val *GeoPosition) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoPosition) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoPosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoPosition(val *GeoPosition) *NullableGeoPosition {
	return &NullableGeoPosition{value: val, isSet: true}
}

func (v NullableGeoPosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoPosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


