/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dss_target_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JammerList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JammerList{}

// JammerList struct for JammerList
type JammerList struct {
	Jammers []JammerInfo `json:"jammers"`
}

type _JammerList JammerList

// NewJammerList instantiates a new JammerList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJammerList(jammers []JammerInfo) *JammerList {
	this := JammerList{}
	this.Jammers = jammers
	return &this
}

// NewJammerListWithDefaults instantiates a new JammerList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJammerListWithDefaults() *JammerList {
	this := JammerList{}
	return &this
}

// GetJammers returns the Jammers field value
func (o *JammerList) GetJammers() []JammerInfo {
	if o == nil {
		var ret []JammerInfo
		return ret
	}

	return o.Jammers
}

// GetJammersOk returns a tuple with the Jammers field value
// and a boolean to check if the value has been set.
func (o *JammerList) GetJammersOk() ([]JammerInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Jammers, true
}

// SetJammers sets field value
func (o *JammerList) SetJammers(v []JammerInfo) {
	o.Jammers = v
}

func (o JammerList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JammerList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["jammers"] = o.Jammers
	return toSerialize, nil
}

func (o *JammerList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"jammers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJammerList := _JammerList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJammerList)

	if err != nil {
		return err
	}

	*o = JammerList(varJammerList)

	return err
}

type NullableJammerList struct {
	value *JammerList
	isSet bool
}

func (v NullableJammerList) Get() *JammerList {
	return v.value
}

func (v *NullableJammerList) Set(val *JammerList) {
	v.value = val
	v.isSet = true
}

func (v NullableJammerList) IsSet() bool {
	return v.isSet
}

func (v *NullableJammerList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJammerList(val *JammerList) *NullableJammerList {
	return &NullableJammerList{value: val, isSet: true}
}

func (v NullableJammerList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJammerList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


