/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dss_target_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeviceSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceSettings{}

// DeviceSettings struct for DeviceSettings
type DeviceSettings struct {
	// Matching sensor ID identification string based on UUID
	Id string `json:"id"`
	Disabled bool `json:"disabled"`
	PositionMode GeoPositionMode `json:"position_mode"`
	Position GeoPosition `json:"position"`
}

type _DeviceSettings DeviceSettings

// NewDeviceSettings instantiates a new DeviceSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceSettings(id string, disabled bool, positionMode GeoPositionMode, position GeoPosition) *DeviceSettings {
	this := DeviceSettings{}
	this.Id = id
	this.Disabled = disabled
	this.PositionMode = positionMode
	this.Position = position
	return &this
}

// NewDeviceSettingsWithDefaults instantiates a new DeviceSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceSettingsWithDefaults() *DeviceSettings {
	this := DeviceSettings{}
	return &this
}

// GetId returns the Id field value
func (o *DeviceSettings) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeviceSettings) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeviceSettings) SetId(v string) {
	o.Id = v
}

// GetDisabled returns the Disabled field value
func (o *DeviceSettings) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *DeviceSettings) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *DeviceSettings) SetDisabled(v bool) {
	o.Disabled = v
}

// GetPositionMode returns the PositionMode field value
func (o *DeviceSettings) GetPositionMode() GeoPositionMode {
	if o == nil {
		var ret GeoPositionMode
		return ret
	}

	return o.PositionMode
}

// GetPositionModeOk returns a tuple with the PositionMode field value
// and a boolean to check if the value has been set.
func (o *DeviceSettings) GetPositionModeOk() (*GeoPositionMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PositionMode, true
}

// SetPositionMode sets field value
func (o *DeviceSettings) SetPositionMode(v GeoPositionMode) {
	o.PositionMode = v
}

// GetPosition returns the Position field value
func (o *DeviceSettings) GetPosition() GeoPosition {
	if o == nil {
		var ret GeoPosition
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *DeviceSettings) GetPositionOk() (*GeoPosition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *DeviceSettings) SetPosition(v GeoPosition) {
	o.Position = v
}

func (o DeviceSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["disabled"] = o.Disabled
	toSerialize["position_mode"] = o.PositionMode
	toSerialize["position"] = o.Position
	return toSerialize, nil
}

func (o *DeviceSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"disabled",
		"position_mode",
		"position",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceSettings := _DeviceSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeviceSettings)

	if err != nil {
		return err
	}

	*o = DeviceSettings(varDeviceSettings)

	return err
}

type NullableDeviceSettings struct {
	value *DeviceSettings
	isSet bool
}

func (v NullableDeviceSettings) Get() *DeviceSettings {
	return v.value
}

func (v *NullableDeviceSettings) Set(val *DeviceSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceSettings(val *DeviceSettings) *NullableDeviceSettings {
	return &NullableDeviceSettings{value: val, isSet: true}
}

func (v NullableDeviceSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


