/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dss_target_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WsReply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WsReply{}

// WsReply Used in WS connection to provide results of async API requests
type WsReply struct {
	Id interface{} `json:"id"`
	// HTTP status line status code
	HttpCode int32 `json:"http_code"`
	ReplyText string `json:"reply_text"`
}

type _WsReply WsReply

// NewWsReply instantiates a new WsReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWsReply(id interface{}, httpCode int32, replyText string) *WsReply {
	this := WsReply{}
	this.Id = id
	this.HttpCode = httpCode
	this.ReplyText = replyText
	return &this
}

// NewWsReplyWithDefaults instantiates a new WsReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWsReplyWithDefaults() *WsReply {
	this := WsReply{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *WsReply) GetId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WsReply) GetIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WsReply) SetId(v interface{}) {
	o.Id = v
}

// GetHttpCode returns the HttpCode field value
func (o *WsReply) GetHttpCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HttpCode
}

// GetHttpCodeOk returns a tuple with the HttpCode field value
// and a boolean to check if the value has been set.
func (o *WsReply) GetHttpCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HttpCode, true
}

// SetHttpCode sets field value
func (o *WsReply) SetHttpCode(v int32) {
	o.HttpCode = v
}

// GetReplyText returns the ReplyText field value
func (o *WsReply) GetReplyText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReplyText
}

// GetReplyTextOk returns a tuple with the ReplyText field value
// and a boolean to check if the value has been set.
func (o *WsReply) GetReplyTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReplyText, true
}

// SetReplyText sets field value
func (o *WsReply) SetReplyText(v string) {
	o.ReplyText = v
}

func (o WsReply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WsReply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	toSerialize["http_code"] = o.HttpCode
	toSerialize["reply_text"] = o.ReplyText
	return toSerialize, nil
}

func (o *WsReply) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"http_code",
		"reply_text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWsReply := _WsReply{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWsReply)

	if err != nil {
		return err
	}

	*o = WsReply(varWsReply)

	return err
}

type NullableWsReply struct {
	value *WsReply
	isSet bool
}

func (v NullableWsReply) Get() *WsReply {
	return v.value
}

func (v *NullableWsReply) Set(val *WsReply) {
	v.value = val
	v.isSet = true
}

func (v NullableWsReply) IsSet() bool {
	return v.isSet
}

func (v *NullableWsReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWsReply(val *WsReply) *NullableWsReply {
	return &NullableWsReply{value: val, isSet: true}
}

func (v NullableWsReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWsReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


