/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dss_target_service

import (
	"encoding/json"
)

// checks if the TargetDataPosition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetDataPosition{}

// TargetDataPosition struct for TargetDataPosition
type TargetDataPosition struct {
	Coordinate *GeoCoordinate `json:"coordinate,omitempty"`
	// Matching sensor ID identification string based on UUID
	SourceId *string `json:"source_id,omitempty"`
	Direction *TargetDataPositionDirection `json:"direction,omitempty"`
}

// NewTargetDataPosition instantiates a new TargetDataPosition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetDataPosition() *TargetDataPosition {
	this := TargetDataPosition{}
	return &this
}

// NewTargetDataPositionWithDefaults instantiates a new TargetDataPosition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetDataPositionWithDefaults() *TargetDataPosition {
	this := TargetDataPosition{}
	return &this
}

// GetCoordinate returns the Coordinate field value if set, zero value otherwise.
func (o *TargetDataPosition) GetCoordinate() GeoCoordinate {
	if o == nil || IsNil(o.Coordinate) {
		var ret GeoCoordinate
		return ret
	}
	return *o.Coordinate
}

// GetCoordinateOk returns a tuple with the Coordinate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetDataPosition) GetCoordinateOk() (*GeoCoordinate, bool) {
	if o == nil || IsNil(o.Coordinate) {
		return nil, false
	}
	return o.Coordinate, true
}

// HasCoordinate returns a boolean if a field has been set.
func (o *TargetDataPosition) HasCoordinate() bool {
	if o != nil && !IsNil(o.Coordinate) {
		return true
	}

	return false
}

// SetCoordinate gets a reference to the given GeoCoordinate and assigns it to the Coordinate field.
func (o *TargetDataPosition) SetCoordinate(v GeoCoordinate) {
	o.Coordinate = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *TargetDataPosition) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetDataPosition) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *TargetDataPosition) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *TargetDataPosition) SetSourceId(v string) {
	o.SourceId = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *TargetDataPosition) GetDirection() TargetDataPositionDirection {
	if o == nil || IsNil(o.Direction) {
		var ret TargetDataPositionDirection
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetDataPosition) GetDirectionOk() (*TargetDataPositionDirection, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *TargetDataPosition) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given TargetDataPositionDirection and assigns it to the Direction field.
func (o *TargetDataPosition) SetDirection(v TargetDataPositionDirection) {
	o.Direction = &v
}

func (o TargetDataPosition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetDataPosition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Coordinate) {
		toSerialize["coordinate"] = o.Coordinate
	}
	if !IsNil(o.SourceId) {
		toSerialize["source_id"] = o.SourceId
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	return toSerialize, nil
}

type NullableTargetDataPosition struct {
	value *TargetDataPosition
	isSet bool
}

func (v NullableTargetDataPosition) Get() *TargetDataPosition {
	return v.value
}

func (v *NullableTargetDataPosition) Set(val *TargetDataPosition) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetDataPosition) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetDataPosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetDataPosition(val *TargetDataPosition) *NullableTargetDataPosition {
	return &NullableTargetDataPosition{value: val, isSet: true}
}

func (v NullableTargetDataPosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetDataPosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


