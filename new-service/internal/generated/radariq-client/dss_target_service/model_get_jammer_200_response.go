/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dss_target_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetJammer200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetJammer200Response{}

// GetJammer200Response struct for GetJammer200Response
type GetJammer200Response struct {
	JammerInfo JammerInfo `json:"jammer_info"`
}

type _GetJammer200Response GetJammer200Response

// NewGetJammer200Response instantiates a new GetJammer200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetJammer200Response(jammerInfo JammerInfo) *GetJammer200Response {
	this := GetJammer200Response{}
	this.JammerInfo = jammerInfo
	return &this
}

// NewGetJammer200ResponseWithDefaults instantiates a new GetJammer200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetJammer200ResponseWithDefaults() *GetJammer200Response {
	this := GetJammer200Response{}
	return &this
}

// GetJammerInfo returns the JammerInfo field value
func (o *GetJammer200Response) GetJammerInfo() JammerInfo {
	if o == nil {
		var ret JammerInfo
		return ret
	}

	return o.JammerInfo
}

// GetJammerInfoOk returns a tuple with the JammerInfo field value
// and a boolean to check if the value has been set.
func (o *GetJammer200Response) GetJammerInfoOk() (*JammerInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JammerInfo, true
}

// SetJammerInfo sets field value
func (o *GetJammer200Response) SetJammerInfo(v JammerInfo) {
	o.JammerInfo = v
}

func (o GetJammer200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetJammer200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["jammer_info"] = o.JammerInfo
	return toSerialize, nil
}

func (o *GetJammer200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"jammer_info",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetJammer200Response := _GetJammer200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetJammer200Response)

	if err != nil {
		return err
	}

	*o = GetJammer200Response(varGetJammer200Response)

	return err
}

type NullableGetJammer200Response struct {
	value *GetJammer200Response
	isSet bool
}

func (v NullableGetJammer200Response) Get() *GetJammer200Response {
	return v.value
}

func (v *NullableGetJammer200Response) Set(val *GetJammer200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetJammer200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetJammer200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetJammer200Response(val *GetJammer200Response) *NullableGetJammer200Response {
	return &NullableGetJammer200Response{value: val, isSet: true}
}

func (v NullableGetJammer200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetJammer200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


