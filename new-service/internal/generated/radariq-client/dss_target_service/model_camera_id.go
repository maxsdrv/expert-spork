/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dss_target_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CameraId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CameraId{}

// CameraId struct for CameraId
type CameraId struct {
	CameraId string `json:"camera_id"`
}

type _CameraId CameraId

// NewCameraId instantiates a new CameraId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCameraId(cameraId string) *CameraId {
	this := CameraId{}
	this.CameraId = cameraId
	return &this
}

// NewCameraIdWithDefaults instantiates a new CameraId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCameraIdWithDefaults() *CameraId {
	this := CameraId{}
	return &this
}

// GetCameraId returns the CameraId field value
func (o *CameraId) GetCameraId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CameraId
}

// GetCameraIdOk returns a tuple with the CameraId field value
// and a boolean to check if the value has been set.
func (o *CameraId) GetCameraIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CameraId, true
}

// SetCameraId sets field value
func (o *CameraId) SetCameraId(v string) {
	o.CameraId = v
}

func (o CameraId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CameraId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["camera_id"] = o.CameraId
	return toSerialize, nil
}

func (o *CameraId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"camera_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCameraId := _CameraId{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCameraId)

	if err != nil {
		return err
	}

	*o = CameraId(varCameraId)

	return err
}

type NullableCameraId struct {
	value *CameraId
	isSet bool
}

func (v NullableCameraId) Get() *CameraId {
	return v.value
}

func (v *NullableCameraId) Set(val *CameraId) {
	v.value = val
	v.isSet = true
}

func (v NullableCameraId) IsSet() bool {
	return v.isSet
}

func (v *NullableCameraId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCameraId(val *CameraId) *NullableCameraId {
	return &NullableCameraId{value: val, isSet: true}
}

func (v NullableCameraId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCameraId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


