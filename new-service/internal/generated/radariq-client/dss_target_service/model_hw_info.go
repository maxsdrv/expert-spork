/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dss_target_service

import (
	"encoding/json"
)

// checks if the HwInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HwInfo{}

// HwInfo struct for HwInfo
type HwInfo struct {
	Temperature *string `json:"temperature,omitempty"`
	Voltage *string `json:"voltage,omitempty"`
	Current *string `json:"current,omitempty"`
}

// NewHwInfo instantiates a new HwInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHwInfo() *HwInfo {
	this := HwInfo{}
	return &this
}

// NewHwInfoWithDefaults instantiates a new HwInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHwInfoWithDefaults() *HwInfo {
	this := HwInfo{}
	return &this
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *HwInfo) GetTemperature() string {
	if o == nil || IsNil(o.Temperature) {
		var ret string
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HwInfo) GetTemperatureOk() (*string, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *HwInfo) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given string and assigns it to the Temperature field.
func (o *HwInfo) SetTemperature(v string) {
	o.Temperature = &v
}

// GetVoltage returns the Voltage field value if set, zero value otherwise.
func (o *HwInfo) GetVoltage() string {
	if o == nil || IsNil(o.Voltage) {
		var ret string
		return ret
	}
	return *o.Voltage
}

// GetVoltageOk returns a tuple with the Voltage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HwInfo) GetVoltageOk() (*string, bool) {
	if o == nil || IsNil(o.Voltage) {
		return nil, false
	}
	return o.Voltage, true
}

// HasVoltage returns a boolean if a field has been set.
func (o *HwInfo) HasVoltage() bool {
	if o != nil && !IsNil(o.Voltage) {
		return true
	}

	return false
}

// SetVoltage gets a reference to the given string and assigns it to the Voltage field.
func (o *HwInfo) SetVoltage(v string) {
	o.Voltage = &v
}

// GetCurrent returns the Current field value if set, zero value otherwise.
func (o *HwInfo) GetCurrent() string {
	if o == nil || IsNil(o.Current) {
		var ret string
		return ret
	}
	return *o.Current
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HwInfo) GetCurrentOk() (*string, bool) {
	if o == nil || IsNil(o.Current) {
		return nil, false
	}
	return o.Current, true
}

// HasCurrent returns a boolean if a field has been set.
func (o *HwInfo) HasCurrent() bool {
	if o != nil && !IsNil(o.Current) {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given string and assigns it to the Current field.
func (o *HwInfo) SetCurrent(v string) {
	o.Current = &v
}

func (o HwInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HwInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}
	if !IsNil(o.Voltage) {
		toSerialize["voltage"] = o.Voltage
	}
	if !IsNil(o.Current) {
		toSerialize["current"] = o.Current
	}
	return toSerialize, nil
}

type NullableHwInfo struct {
	value *HwInfo
	isSet bool
}

func (v NullableHwInfo) Get() *HwInfo {
	return v.value
}

func (v *NullableHwInfo) Set(val *HwInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableHwInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableHwInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHwInfo(val *HwInfo) *NullableHwInfo {
	return &NullableHwInfo{value: val, isSet: true}
}

func (v NullableHwInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHwInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


