/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dss_target_service

import (
	"encoding/json"
	"fmt"
)

// SensorType the model 'SensorType'
type SensorType string

// List of sensor_type
const (
	SENSORTYPE_RFD SensorType = "RFD"
	SENSORTYPE_RADAR SensorType = "RADAR"
	SENSORTYPE_CAMERA SensorType = "CAMERA"
)

// All allowed values of SensorType enum
var AllowedSensorTypeEnumValues = []SensorType{
	"RFD",
	"RADAR",
	"CAMERA",
}

func (v *SensorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SensorType(value)
	for _, existing := range AllowedSensorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SensorType", value)
}

// NewSensorTypeFromValue returns a pointer to a valid SensorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSensorTypeFromValue(v string) (*SensorType, error) {
	ev := SensorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SensorType: valid values are %v", v, AllowedSensorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SensorType) IsValid() bool {
	for _, existing := range AllowedSensorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to sensor_type value
func (v SensorType) Ptr() *SensorType {
	return &v
}

type NullableSensorType struct {
	value *SensorType
	isSet bool
}

func (v NullableSensorType) Get() *SensorType {
	return v.value
}

func (v *NullableSensorType) Set(val *SensorType) {
	v.value = val
	v.isSet = true
}

func (v NullableSensorType) IsSet() bool {
	return v.isSet
}

func (v *NullableSensorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensorType(val *SensorType) *NullableSensorType {
	return &NullableSensorType{value: val, isSet: true}
}

func (v NullableSensorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

