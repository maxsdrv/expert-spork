/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dss_target_service

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GeoCoordinate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeoCoordinate{}

// GeoCoordinate struct for GeoCoordinate
type GeoCoordinate struct {
	// Altitude in meters above sea level
	Altitude *float64 `json:"altitude,omitempty"`
	// Latitude in decimal degrees
	Latitude float64 `json:"latitude"`
	// Longitude in decimal degrees
	Longitude float64 `json:"longitude"`
}

type _GeoCoordinate GeoCoordinate

// NewGeoCoordinate instantiates a new GeoCoordinate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoCoordinate(latitude float64, longitude float64) *GeoCoordinate {
	this := GeoCoordinate{}
	this.Latitude = latitude
	this.Longitude = longitude
	return &this
}

// NewGeoCoordinateWithDefaults instantiates a new GeoCoordinate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoCoordinateWithDefaults() *GeoCoordinate {
	this := GeoCoordinate{}
	return &this
}

// GetAltitude returns the Altitude field value if set, zero value otherwise.
func (o *GeoCoordinate) GetAltitude() float64 {
	if o == nil || IsNil(o.Altitude) {
		var ret float64
		return ret
	}
	return *o.Altitude
}

// GetAltitudeOk returns a tuple with the Altitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoCoordinate) GetAltitudeOk() (*float64, bool) {
	if o == nil || IsNil(o.Altitude) {
		return nil, false
	}
	return o.Altitude, true
}

// HasAltitude returns a boolean if a field has been set.
func (o *GeoCoordinate) HasAltitude() bool {
	if o != nil && !IsNil(o.Altitude) {
		return true
	}

	return false
}

// SetAltitude gets a reference to the given float64 and assigns it to the Altitude field.
func (o *GeoCoordinate) SetAltitude(v float64) {
	o.Altitude = &v
}

// GetLatitude returns the Latitude field value
func (o *GeoCoordinate) GetLatitude() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value
// and a boolean to check if the value has been set.
func (o *GeoCoordinate) GetLatitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latitude, true
}

// SetLatitude sets field value
func (o *GeoCoordinate) SetLatitude(v float64) {
	o.Latitude = v
}

// GetLongitude returns the Longitude field value
func (o *GeoCoordinate) GetLongitude() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value
// and a boolean to check if the value has been set.
func (o *GeoCoordinate) GetLongitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Longitude, true
}

// SetLongitude sets field value
func (o *GeoCoordinate) SetLongitude(v float64) {
	o.Longitude = v
}

func (o GeoCoordinate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeoCoordinate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Altitude) {
		toSerialize["altitude"] = o.Altitude
	}
	toSerialize["latitude"] = o.Latitude
	toSerialize["longitude"] = o.Longitude
	return toSerialize, nil
}

func (o *GeoCoordinate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"latitude",
		"longitude",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGeoCoordinate := _GeoCoordinate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGeoCoordinate)

	if err != nil {
		return err
	}

	*o = GeoCoordinate(varGeoCoordinate)

	return err
}

type NullableGeoCoordinate struct {
	value *GeoCoordinate
	isSet bool
}

func (v NullableGeoCoordinate) Get() *GeoCoordinate {
	return v.value
}

func (v *NullableGeoCoordinate) Set(val *GeoCoordinate) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoCoordinate) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoCoordinate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoCoordinate(val *GeoCoordinate) *NullableGeoCoordinate {
	return &NullableGeoCoordinate{value: val, isSet: true}
}

func (v NullableGeoCoordinate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoCoordinate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


