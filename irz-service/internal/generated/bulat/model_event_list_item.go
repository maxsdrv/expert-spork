/*
Bulat API

API specification for the Bulat system.  **IMPORTANT**: This API always returns HTTP 200 status code, even for errors. Error responses are indicated by the response content, not HTTP status codes.  Error codes: - noacc/noaccess: No access to the requested resource - dberror: Error while executing database queries   - noname/noid/no_acc_c: Incorrect data in the request 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the EventListItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventListItem{}

// EventListItem struct for EventListItem
type EventListItem struct {
	CarName *string `json:"car_name,omitempty"`
	CarId *int32 `json:"car_id,omitempty"`
	Devices []string `json:"devices,omitempty"`
	Dt *int64 `json:"dt,omitempty"`
	Lbl *int32 `json:"lbl,omitempty"`
	LblRu *string `json:"lbl_ru,omitempty"`
	Id int32 `json:"id"`
	Type int32 `json:"type"`
	Lat *float64 `json:"lat,omitempty"`
	Lon *float64 `json:"lon,omitempty"`
	Radius *int32 `json:"radius,omitempty"`
	Icon *string `json:"icon,omitempty"`
	Title *string `json:"title,omitempty"`
	Absent *GroupObjectInner `json:"absent,omitempty"`
	Val *string `json:"val,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EventListItem EventListItem

// NewEventListItem instantiates a new EventListItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventListItem(id int32, type_ int32) *EventListItem {
	this := EventListItem{}
	this.Id = id
	this.Type = type_
	return &this
}

// NewEventListItemWithDefaults instantiates a new EventListItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventListItemWithDefaults() *EventListItem {
	this := EventListItem{}
	return &this
}

// GetCarName returns the CarName field value if set, zero value otherwise.
func (o *EventListItem) GetCarName() string {
	if o == nil || IsNil(o.CarName) {
		var ret string
		return ret
	}
	return *o.CarName
}

// GetCarNameOk returns a tuple with the CarName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventListItem) GetCarNameOk() (*string, bool) {
	if o == nil || IsNil(o.CarName) {
		return nil, false
	}
	return o.CarName, true
}

// HasCarName returns a boolean if a field has been set.
func (o *EventListItem) HasCarName() bool {
	if o != nil && !IsNil(o.CarName) {
		return true
	}

	return false
}

// SetCarName gets a reference to the given string and assigns it to the CarName field.
func (o *EventListItem) SetCarName(v string) {
	o.CarName = &v
}

// GetCarId returns the CarId field value if set, zero value otherwise.
func (o *EventListItem) GetCarId() int32 {
	if o == nil || IsNil(o.CarId) {
		var ret int32
		return ret
	}
	return *o.CarId
}

// GetCarIdOk returns a tuple with the CarId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventListItem) GetCarIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CarId) {
		return nil, false
	}
	return o.CarId, true
}

// HasCarId returns a boolean if a field has been set.
func (o *EventListItem) HasCarId() bool {
	if o != nil && !IsNil(o.CarId) {
		return true
	}

	return false
}

// SetCarId gets a reference to the given int32 and assigns it to the CarId field.
func (o *EventListItem) SetCarId(v int32) {
	o.CarId = &v
}

// GetDevices returns the Devices field value if set, zero value otherwise.
func (o *EventListItem) GetDevices() []string {
	if o == nil || IsNil(o.Devices) {
		var ret []string
		return ret
	}
	return o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventListItem) GetDevicesOk() ([]string, bool) {
	if o == nil || IsNil(o.Devices) {
		return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *EventListItem) HasDevices() bool {
	if o != nil && !IsNil(o.Devices) {
		return true
	}

	return false
}

// SetDevices gets a reference to the given []string and assigns it to the Devices field.
func (o *EventListItem) SetDevices(v []string) {
	o.Devices = v
}

// GetDt returns the Dt field value if set, zero value otherwise.
func (o *EventListItem) GetDt() int64 {
	if o == nil || IsNil(o.Dt) {
		var ret int64
		return ret
	}
	return *o.Dt
}

// GetDtOk returns a tuple with the Dt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventListItem) GetDtOk() (*int64, bool) {
	if o == nil || IsNil(o.Dt) {
		return nil, false
	}
	return o.Dt, true
}

// HasDt returns a boolean if a field has been set.
func (o *EventListItem) HasDt() bool {
	if o != nil && !IsNil(o.Dt) {
		return true
	}

	return false
}

// SetDt gets a reference to the given int64 and assigns it to the Dt field.
func (o *EventListItem) SetDt(v int64) {
	o.Dt = &v
}

// GetLbl returns the Lbl field value if set, zero value otherwise.
func (o *EventListItem) GetLbl() int32 {
	if o == nil || IsNil(o.Lbl) {
		var ret int32
		return ret
	}
	return *o.Lbl
}

// GetLblOk returns a tuple with the Lbl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventListItem) GetLblOk() (*int32, bool) {
	if o == nil || IsNil(o.Lbl) {
		return nil, false
	}
	return o.Lbl, true
}

// HasLbl returns a boolean if a field has been set.
func (o *EventListItem) HasLbl() bool {
	if o != nil && !IsNil(o.Lbl) {
		return true
	}

	return false
}

// SetLbl gets a reference to the given int32 and assigns it to the Lbl field.
func (o *EventListItem) SetLbl(v int32) {
	o.Lbl = &v
}

// GetLblRu returns the LblRu field value if set, zero value otherwise.
func (o *EventListItem) GetLblRu() string {
	if o == nil || IsNil(o.LblRu) {
		var ret string
		return ret
	}
	return *o.LblRu
}

// GetLblRuOk returns a tuple with the LblRu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventListItem) GetLblRuOk() (*string, bool) {
	if o == nil || IsNil(o.LblRu) {
		return nil, false
	}
	return o.LblRu, true
}

// HasLblRu returns a boolean if a field has been set.
func (o *EventListItem) HasLblRu() bool {
	if o != nil && !IsNil(o.LblRu) {
		return true
	}

	return false
}

// SetLblRu gets a reference to the given string and assigns it to the LblRu field.
func (o *EventListItem) SetLblRu(v string) {
	o.LblRu = &v
}

// GetId returns the Id field value
func (o *EventListItem) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EventListItem) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EventListItem) SetId(v int32) {
	o.Id = v
}

// GetType returns the Type field value
func (o *EventListItem) GetType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EventListItem) GetTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EventListItem) SetType(v int32) {
	o.Type = v
}

// GetLat returns the Lat field value if set, zero value otherwise.
func (o *EventListItem) GetLat() float64 {
	if o == nil || IsNil(o.Lat) {
		var ret float64
		return ret
	}
	return *o.Lat
}

// GetLatOk returns a tuple with the Lat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventListItem) GetLatOk() (*float64, bool) {
	if o == nil || IsNil(o.Lat) {
		return nil, false
	}
	return o.Lat, true
}

// HasLat returns a boolean if a field has been set.
func (o *EventListItem) HasLat() bool {
	if o != nil && !IsNil(o.Lat) {
		return true
	}

	return false
}

// SetLat gets a reference to the given float64 and assigns it to the Lat field.
func (o *EventListItem) SetLat(v float64) {
	o.Lat = &v
}

// GetLon returns the Lon field value if set, zero value otherwise.
func (o *EventListItem) GetLon() float64 {
	if o == nil || IsNil(o.Lon) {
		var ret float64
		return ret
	}
	return *o.Lon
}

// GetLonOk returns a tuple with the Lon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventListItem) GetLonOk() (*float64, bool) {
	if o == nil || IsNil(o.Lon) {
		return nil, false
	}
	return o.Lon, true
}

// HasLon returns a boolean if a field has been set.
func (o *EventListItem) HasLon() bool {
	if o != nil && !IsNil(o.Lon) {
		return true
	}

	return false
}

// SetLon gets a reference to the given float64 and assigns it to the Lon field.
func (o *EventListItem) SetLon(v float64) {
	o.Lon = &v
}

// GetRadius returns the Radius field value if set, zero value otherwise.
func (o *EventListItem) GetRadius() int32 {
	if o == nil || IsNil(o.Radius) {
		var ret int32
		return ret
	}
	return *o.Radius
}

// GetRadiusOk returns a tuple with the Radius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventListItem) GetRadiusOk() (*int32, bool) {
	if o == nil || IsNil(o.Radius) {
		return nil, false
	}
	return o.Radius, true
}

// HasRadius returns a boolean if a field has been set.
func (o *EventListItem) HasRadius() bool {
	if o != nil && !IsNil(o.Radius) {
		return true
	}

	return false
}

// SetRadius gets a reference to the given int32 and assigns it to the Radius field.
func (o *EventListItem) SetRadius(v int32) {
	o.Radius = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *EventListItem) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventListItem) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *EventListItem) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *EventListItem) SetIcon(v string) {
	o.Icon = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *EventListItem) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventListItem) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *EventListItem) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *EventListItem) SetTitle(v string) {
	o.Title = &v
}

// GetAbsent returns the Absent field value if set, zero value otherwise.
func (o *EventListItem) GetAbsent() GroupObjectInner {
	if o == nil || IsNil(o.Absent) {
		var ret GroupObjectInner
		return ret
	}
	return *o.Absent
}

// GetAbsentOk returns a tuple with the Absent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventListItem) GetAbsentOk() (*GroupObjectInner, bool) {
	if o == nil || IsNil(o.Absent) {
		return nil, false
	}
	return o.Absent, true
}

// HasAbsent returns a boolean if a field has been set.
func (o *EventListItem) HasAbsent() bool {
	if o != nil && !IsNil(o.Absent) {
		return true
	}

	return false
}

// SetAbsent gets a reference to the given GroupObjectInner and assigns it to the Absent field.
func (o *EventListItem) SetAbsent(v GroupObjectInner) {
	o.Absent = &v
}

// GetVal returns the Val field value if set, zero value otherwise.
func (o *EventListItem) GetVal() string {
	if o == nil || IsNil(o.Val) {
		var ret string
		return ret
	}
	return *o.Val
}

// GetValOk returns a tuple with the Val field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventListItem) GetValOk() (*string, bool) {
	if o == nil || IsNil(o.Val) {
		return nil, false
	}
	return o.Val, true
}

// HasVal returns a boolean if a field has been set.
func (o *EventListItem) HasVal() bool {
	if o != nil && !IsNil(o.Val) {
		return true
	}

	return false
}

// SetVal gets a reference to the given string and assigns it to the Val field.
func (o *EventListItem) SetVal(v string) {
	o.Val = &v
}

func (o EventListItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventListItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CarName) {
		toSerialize["car_name"] = o.CarName
	}
	if !IsNil(o.CarId) {
		toSerialize["car_id"] = o.CarId
	}
	if !IsNil(o.Devices) {
		toSerialize["devices"] = o.Devices
	}
	if !IsNil(o.Dt) {
		toSerialize["dt"] = o.Dt
	}
	if !IsNil(o.Lbl) {
		toSerialize["lbl"] = o.Lbl
	}
	if !IsNil(o.LblRu) {
		toSerialize["lbl_ru"] = o.LblRu
	}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	if !IsNil(o.Lat) {
		toSerialize["lat"] = o.Lat
	}
	if !IsNil(o.Lon) {
		toSerialize["lon"] = o.Lon
	}
	if !IsNil(o.Radius) {
		toSerialize["radius"] = o.Radius
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Absent) {
		toSerialize["absent"] = o.Absent
	}
	if !IsNil(o.Val) {
		toSerialize["val"] = o.Val
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EventListItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventListItem := _EventListItem{}

	err = json.Unmarshal(data, &varEventListItem)

	if err != nil {
		return err
	}

	*o = EventListItem(varEventListItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "car_name")
		delete(additionalProperties, "car_id")
		delete(additionalProperties, "devices")
		delete(additionalProperties, "dt")
		delete(additionalProperties, "lbl")
		delete(additionalProperties, "lbl_ru")
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "lat")
		delete(additionalProperties, "lon")
		delete(additionalProperties, "radius")
		delete(additionalProperties, "icon")
		delete(additionalProperties, "title")
		delete(additionalProperties, "absent")
		delete(additionalProperties, "val")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEventListItem struct {
	value *EventListItem
	isSet bool
}

func (v NullableEventListItem) Get() *EventListItem {
	return v.value
}

func (v *NullableEventListItem) Set(val *EventListItem) {
	v.value = val
	v.isSet = true
}

func (v NullableEventListItem) IsSet() bool {
	return v.isSet
}

func (v *NullableEventListItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventListItem(val *EventListItem) *NullableEventListItem {
	return &NullableEventListItem{value: val, isSet: true}
}

func (v NullableEventListItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventListItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


