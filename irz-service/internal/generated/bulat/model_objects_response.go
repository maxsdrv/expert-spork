/*
Bulat API

API specification for the Bulat system.  **IMPORTANT**: This API always returns HTTP 200 status code, even for errors. Error responses are indicated by the response content, not HTTP status codes.  Error codes: - noacc/noaccess: No access to the requested resource - dberror: Error while executing database queries   - noname/noid/no_acc_c: Incorrect data in the request 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the ObjectsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectsResponse{}

// ObjectsResponse struct for ObjectsResponse
type ObjectsResponse struct {
	Status int32 `json:"status"`
	Error *ErrorResponse `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
	Car []ListObject `json:"car,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ObjectsResponse ObjectsResponse

// NewObjectsResponse instantiates a new ObjectsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectsResponse(status int32) *ObjectsResponse {
	this := ObjectsResponse{}
	this.Status = status
	return &this
}

// NewObjectsResponseWithDefaults instantiates a new ObjectsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectsResponseWithDefaults() *ObjectsResponse {
	this := ObjectsResponse{}
	return &this
}

// GetStatus returns the Status field value
func (o *ObjectsResponse) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ObjectsResponse) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ObjectsResponse) SetStatus(v int32) {
	o.Status = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ObjectsResponse) GetError() ErrorResponse {
	if o == nil || IsNil(o.Error) {
		var ret ErrorResponse
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectsResponse) GetErrorOk() (*ErrorResponse, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ObjectsResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorResponse and assigns it to the Error field.
func (o *ObjectsResponse) SetError(v ErrorResponse) {
	o.Error = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ObjectsResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectsResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ObjectsResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ObjectsResponse) SetMessage(v string) {
	o.Message = &v
}

// GetCar returns the Car field value if set, zero value otherwise.
func (o *ObjectsResponse) GetCar() []ListObject {
	if o == nil || IsNil(o.Car) {
		var ret []ListObject
		return ret
	}
	return o.Car
}

// GetCarOk returns a tuple with the Car field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectsResponse) GetCarOk() ([]ListObject, bool) {
	if o == nil || IsNil(o.Car) {
		return nil, false
	}
	return o.Car, true
}

// HasCar returns a boolean if a field has been set.
func (o *ObjectsResponse) HasCar() bool {
	if o != nil && !IsNil(o.Car) {
		return true
	}

	return false
}

// SetCar gets a reference to the given []ListObject and assigns it to the Car field.
func (o *ObjectsResponse) SetCar(v []ListObject) {
	o.Car = v
}

func (o ObjectsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Car) {
		toSerialize["car"] = o.Car
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ObjectsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectsResponse := _ObjectsResponse{}

	err = json.Unmarshal(data, &varObjectsResponse)

	if err != nil {
		return err
	}

	*o = ObjectsResponse(varObjectsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "status")
		delete(additionalProperties, "error")
		delete(additionalProperties, "message")
		delete(additionalProperties, "car")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableObjectsResponse struct {
	value *ObjectsResponse
	isSet bool
}

func (v NullableObjectsResponse) Get() *ObjectsResponse {
	return v.value
}

func (v *NullableObjectsResponse) Set(val *ObjectsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectsResponse(val *ObjectsResponse) *NullableObjectsResponse {
	return &NullableObjectsResponse{value: val, isSet: true}
}

func (v NullableObjectsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


