/*
Bulat API

API specification for the Bulat system.  **IMPORTANT**: This API always returns HTTP 200 status code, even for errors. Error responses are indicated by the response content, not HTTP status codes.  Error codes: - noacc/noaccess: No access to the requested resource - dberror: Error while executing database queries   - noname/noid/no_acc_c: Incorrect data in the request 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the EventObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventObject{}

// EventObject struct for EventObject
type EventObject struct {
	DeId int32 `json:"de_id"`
	List []EventListItem `json:"list"`
	AdditionalProperties map[string]interface{}
}

type _EventObject EventObject

// NewEventObject instantiates a new EventObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventObject(deId int32, list []EventListItem) *EventObject {
	this := EventObject{}
	this.DeId = deId
	this.List = list
	return &this
}

// NewEventObjectWithDefaults instantiates a new EventObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventObjectWithDefaults() *EventObject {
	this := EventObject{}
	return &this
}

// GetDeId returns the DeId field value
func (o *EventObject) GetDeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DeId
}

// GetDeIdOk returns a tuple with the DeId field value
// and a boolean to check if the value has been set.
func (o *EventObject) GetDeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeId, true
}

// SetDeId sets field value
func (o *EventObject) SetDeId(v int32) {
	o.DeId = v
}

// GetList returns the List field value
func (o *EventObject) GetList() []EventListItem {
	if o == nil {
		var ret []EventListItem
		return ret
	}

	return o.List
}

// GetListOk returns a tuple with the List field value
// and a boolean to check if the value has been set.
func (o *EventObject) GetListOk() ([]EventListItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.List, true
}

// SetList sets field value
func (o *EventObject) SetList(v []EventListItem) {
	o.List = v
}

func (o EventObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["de_id"] = o.DeId
	toSerialize["list"] = o.List

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EventObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"de_id",
		"list",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventObject := _EventObject{}

	err = json.Unmarshal(data, &varEventObject)

	if err != nil {
		return err
	}

	*o = EventObject(varEventObject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "de_id")
		delete(additionalProperties, "list")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEventObject struct {
	value *EventObject
	isSet bool
}

func (v NullableEventObject) Get() *EventObject {
	return v.value
}

func (v *NullableEventObject) Set(val *EventObject) {
	v.value = val
	v.isSet = true
}

func (v NullableEventObject) IsSet() bool {
	return v.isSet
}

func (v *NullableEventObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventObject(val *EventObject) *NullableEventObject {
	return &NullableEventObject{value: val, isSet: true}
}

func (v NullableEventObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


