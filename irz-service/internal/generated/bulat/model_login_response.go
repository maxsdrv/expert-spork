/*
Bulat API

API specification for the Bulat system.  **IMPORTANT**: This API always returns HTTP 200 status code, even for errors. Error responses are indicated by the response content, not HTTP status codes.  Error codes: - noacc/noaccess: No access to the requested resource - dberror: Error while executing database queries   - noname/noid/no_acc_c: Incorrect data in the request 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// LoginResponse - struct for LoginResponse
type LoginResponse struct {
	ArrayOfLoginErrorResponseInner *[]LoginErrorResponseInner
	ArrayOfLoginSuccessResponseInner *[]LoginSuccessResponseInner
}

// []LoginErrorResponseInnerAsLoginResponse is a convenience function that returns []LoginErrorResponseInner wrapped in LoginResponse
func ArrayOfLoginErrorResponseInnerAsLoginResponse(v *[]LoginErrorResponseInner) LoginResponse {
	return LoginResponse{
		ArrayOfLoginErrorResponseInner: v,
	}
}

// []LoginSuccessResponseInnerAsLoginResponse is a convenience function that returns []LoginSuccessResponseInner wrapped in LoginResponse
func ArrayOfLoginSuccessResponseInnerAsLoginResponse(v *[]LoginSuccessResponseInner) LoginResponse {
	return LoginResponse{
		ArrayOfLoginSuccessResponseInner: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *LoginResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfLoginErrorResponseInner
	err = newStrictDecoder(data).Decode(&dst.ArrayOfLoginErrorResponseInner)
	if err == nil {
		jsonArrayOfLoginErrorResponseInner, _ := json.Marshal(dst.ArrayOfLoginErrorResponseInner)
		if string(jsonArrayOfLoginErrorResponseInner) == "{}" { // empty struct
			dst.ArrayOfLoginErrorResponseInner = nil
		} else {
			if err = validator.Validate(dst.ArrayOfLoginErrorResponseInner); err != nil {
				dst.ArrayOfLoginErrorResponseInner = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfLoginErrorResponseInner = nil
	}

	// try to unmarshal data into ArrayOfLoginSuccessResponseInner
	err = newStrictDecoder(data).Decode(&dst.ArrayOfLoginSuccessResponseInner)
	if err == nil {
		jsonArrayOfLoginSuccessResponseInner, _ := json.Marshal(dst.ArrayOfLoginSuccessResponseInner)
		if string(jsonArrayOfLoginSuccessResponseInner) == "{}" { // empty struct
			dst.ArrayOfLoginSuccessResponseInner = nil
		} else {
			if err = validator.Validate(dst.ArrayOfLoginSuccessResponseInner); err != nil {
				dst.ArrayOfLoginSuccessResponseInner = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfLoginSuccessResponseInner = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfLoginErrorResponseInner = nil
		dst.ArrayOfLoginSuccessResponseInner = nil

		return fmt.Errorf("data matches more than one schema in oneOf(LoginResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(LoginResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src LoginResponse) MarshalJSON() ([]byte, error) {
	if src.ArrayOfLoginErrorResponseInner != nil {
		return json.Marshal(&src.ArrayOfLoginErrorResponseInner)
	}

	if src.ArrayOfLoginSuccessResponseInner != nil {
		return json.Marshal(&src.ArrayOfLoginSuccessResponseInner)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *LoginResponse) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfLoginErrorResponseInner != nil {
		return obj.ArrayOfLoginErrorResponseInner
	}

	if obj.ArrayOfLoginSuccessResponseInner != nil {
		return obj.ArrayOfLoginSuccessResponseInner
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj LoginResponse) GetActualInstanceValue() (interface{}) {
	if obj.ArrayOfLoginErrorResponseInner != nil {
		return *obj.ArrayOfLoginErrorResponseInner
	}

	if obj.ArrayOfLoginSuccessResponseInner != nil {
		return *obj.ArrayOfLoginSuccessResponseInner
	}

	// all schemas are nil
	return nil
}

type NullableLoginResponse struct {
	value *LoginResponse
	isSet bool
}

func (v NullableLoginResponse) Get() *LoginResponse {
	return v.value
}

func (v *NullableLoginResponse) Set(val *LoginResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginResponse(val *LoginResponse) *NullableLoginResponse {
	return &NullableLoginResponse{value: val, isSet: true}
}

func (v NullableLoginResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


