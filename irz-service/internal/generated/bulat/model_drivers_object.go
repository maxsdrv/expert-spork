/*
Bulat API

API specification for the Bulat system.  **IMPORTANT**: This API always returns HTTP 200 status code, even for errors. Error responses are indicated by the response content, not HTTP status codes.  Error codes: - noacc/noaccess: No access to the requested resource - dberror: Error while executing database queries   - noname/noid/no_acc_c: Incorrect data in the request 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the DriversObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DriversObject{}

// DriversObject struct for DriversObject
type DriversObject struct {
	Count *int32 `json:"count,omitempty"`
	LdId *int32 `json:"ld_id,omitempty"`
	LdName *string `json:"ld_name,omitempty"`
	LdPhone *string `json:"ld_phone,omitempty"`
	LdTachographKey *string `json:"ld_tachograph_key,omitempty"`
	LdAvaDt *int32 `json:"ld_ava_dt,omitempty"`
	LdHasava *int32 `json:"ld_hasava,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DriversObject DriversObject

// NewDriversObject instantiates a new DriversObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDriversObject() *DriversObject {
	this := DriversObject{}
	return &this
}

// NewDriversObjectWithDefaults instantiates a new DriversObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDriversObjectWithDefaults() *DriversObject {
	this := DriversObject{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *DriversObject) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriversObject) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *DriversObject) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *DriversObject) SetCount(v int32) {
	o.Count = &v
}

// GetLdId returns the LdId field value if set, zero value otherwise.
func (o *DriversObject) GetLdId() int32 {
	if o == nil || IsNil(o.LdId) {
		var ret int32
		return ret
	}
	return *o.LdId
}

// GetLdIdOk returns a tuple with the LdId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriversObject) GetLdIdOk() (*int32, bool) {
	if o == nil || IsNil(o.LdId) {
		return nil, false
	}
	return o.LdId, true
}

// HasLdId returns a boolean if a field has been set.
func (o *DriversObject) HasLdId() bool {
	if o != nil && !IsNil(o.LdId) {
		return true
	}

	return false
}

// SetLdId gets a reference to the given int32 and assigns it to the LdId field.
func (o *DriversObject) SetLdId(v int32) {
	o.LdId = &v
}

// GetLdName returns the LdName field value if set, zero value otherwise.
func (o *DriversObject) GetLdName() string {
	if o == nil || IsNil(o.LdName) {
		var ret string
		return ret
	}
	return *o.LdName
}

// GetLdNameOk returns a tuple with the LdName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriversObject) GetLdNameOk() (*string, bool) {
	if o == nil || IsNil(o.LdName) {
		return nil, false
	}
	return o.LdName, true
}

// HasLdName returns a boolean if a field has been set.
func (o *DriversObject) HasLdName() bool {
	if o != nil && !IsNil(o.LdName) {
		return true
	}

	return false
}

// SetLdName gets a reference to the given string and assigns it to the LdName field.
func (o *DriversObject) SetLdName(v string) {
	o.LdName = &v
}

// GetLdPhone returns the LdPhone field value if set, zero value otherwise.
func (o *DriversObject) GetLdPhone() string {
	if o == nil || IsNil(o.LdPhone) {
		var ret string
		return ret
	}
	return *o.LdPhone
}

// GetLdPhoneOk returns a tuple with the LdPhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriversObject) GetLdPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.LdPhone) {
		return nil, false
	}
	return o.LdPhone, true
}

// HasLdPhone returns a boolean if a field has been set.
func (o *DriversObject) HasLdPhone() bool {
	if o != nil && !IsNil(o.LdPhone) {
		return true
	}

	return false
}

// SetLdPhone gets a reference to the given string and assigns it to the LdPhone field.
func (o *DriversObject) SetLdPhone(v string) {
	o.LdPhone = &v
}

// GetLdTachographKey returns the LdTachographKey field value if set, zero value otherwise.
func (o *DriversObject) GetLdTachographKey() string {
	if o == nil || IsNil(o.LdTachographKey) {
		var ret string
		return ret
	}
	return *o.LdTachographKey
}

// GetLdTachographKeyOk returns a tuple with the LdTachographKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriversObject) GetLdTachographKeyOk() (*string, bool) {
	if o == nil || IsNil(o.LdTachographKey) {
		return nil, false
	}
	return o.LdTachographKey, true
}

// HasLdTachographKey returns a boolean if a field has been set.
func (o *DriversObject) HasLdTachographKey() bool {
	if o != nil && !IsNil(o.LdTachographKey) {
		return true
	}

	return false
}

// SetLdTachographKey gets a reference to the given string and assigns it to the LdTachographKey field.
func (o *DriversObject) SetLdTachographKey(v string) {
	o.LdTachographKey = &v
}

// GetLdAvaDt returns the LdAvaDt field value if set, zero value otherwise.
func (o *DriversObject) GetLdAvaDt() int32 {
	if o == nil || IsNil(o.LdAvaDt) {
		var ret int32
		return ret
	}
	return *o.LdAvaDt
}

// GetLdAvaDtOk returns a tuple with the LdAvaDt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriversObject) GetLdAvaDtOk() (*int32, bool) {
	if o == nil || IsNil(o.LdAvaDt) {
		return nil, false
	}
	return o.LdAvaDt, true
}

// HasLdAvaDt returns a boolean if a field has been set.
func (o *DriversObject) HasLdAvaDt() bool {
	if o != nil && !IsNil(o.LdAvaDt) {
		return true
	}

	return false
}

// SetLdAvaDt gets a reference to the given int32 and assigns it to the LdAvaDt field.
func (o *DriversObject) SetLdAvaDt(v int32) {
	o.LdAvaDt = &v
}

// GetLdHasava returns the LdHasava field value if set, zero value otherwise.
func (o *DriversObject) GetLdHasava() int32 {
	if o == nil || IsNil(o.LdHasava) {
		var ret int32
		return ret
	}
	return *o.LdHasava
}

// GetLdHasavaOk returns a tuple with the LdHasava field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriversObject) GetLdHasavaOk() (*int32, bool) {
	if o == nil || IsNil(o.LdHasava) {
		return nil, false
	}
	return o.LdHasava, true
}

// HasLdHasava returns a boolean if a field has been set.
func (o *DriversObject) HasLdHasava() bool {
	if o != nil && !IsNil(o.LdHasava) {
		return true
	}

	return false
}

// SetLdHasava gets a reference to the given int32 and assigns it to the LdHasava field.
func (o *DriversObject) SetLdHasava(v int32) {
	o.LdHasava = &v
}

func (o DriversObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DriversObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.LdId) {
		toSerialize["ld_id"] = o.LdId
	}
	if !IsNil(o.LdName) {
		toSerialize["ld_name"] = o.LdName
	}
	if !IsNil(o.LdPhone) {
		toSerialize["ld_phone"] = o.LdPhone
	}
	if !IsNil(o.LdTachographKey) {
		toSerialize["ld_tachograph_key"] = o.LdTachographKey
	}
	if !IsNil(o.LdAvaDt) {
		toSerialize["ld_ava_dt"] = o.LdAvaDt
	}
	if !IsNil(o.LdHasava) {
		toSerialize["ld_hasava"] = o.LdHasava
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DriversObject) UnmarshalJSON(data []byte) (err error) {
	varDriversObject := _DriversObject{}

	err = json.Unmarshal(data, &varDriversObject)

	if err != nil {
		return err
	}

	*o = DriversObject(varDriversObject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "count")
		delete(additionalProperties, "ld_id")
		delete(additionalProperties, "ld_name")
		delete(additionalProperties, "ld_phone")
		delete(additionalProperties, "ld_tachograph_key")
		delete(additionalProperties, "ld_ava_dt")
		delete(additionalProperties, "ld_hasava")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDriversObject struct {
	value *DriversObject
	isSet bool
}

func (v NullableDriversObject) Get() *DriversObject {
	return v.value
}

func (v *NullableDriversObject) Set(val *DriversObject) {
	v.value = val
	v.isSet = true
}

func (v NullableDriversObject) IsSet() bool {
	return v.isSet
}

func (v *NullableDriversObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDriversObject(val *DriversObject) *NullableDriversObject {
	return &NullableDriversObject{value: val, isSet: true}
}

func (v NullableDriversObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDriversObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


