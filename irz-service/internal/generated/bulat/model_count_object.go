/*
Bulat API

API specification for the Bulat system.  **IMPORTANT**: This API always returns HTTP 200 status code, even for errors. Error responses are indicated by the response content, not HTTP status codes.  Error codes: - noacc/noaccess: No access to the requested resource - dberror: Error while executing database queries   - noname/noid/no_acc_c: Incorrect data in the request 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the CountObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountObject{}

// CountObject struct for CountObject
type CountObject struct {
	Car *int32 `json:"car,omitempty"`
	True *int32 `json:"true,omitempty"`
	False *int32 `json:"false,omitempty"`
	Park *int32 `json:"park,omitempty"`
	Run *int32 `json:"run,omitempty"`
	G *int32 `json:"g,omitempty"`
	O *int32 `json:"o,omitempty"`
	R *int32 `json:"r,omitempty"`
	B *int32 `json:"b,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CountObject CountObject

// NewCountObject instantiates a new CountObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountObject() *CountObject {
	this := CountObject{}
	return &this
}

// NewCountObjectWithDefaults instantiates a new CountObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountObjectWithDefaults() *CountObject {
	this := CountObject{}
	return &this
}

// GetCar returns the Car field value if set, zero value otherwise.
func (o *CountObject) GetCar() int32 {
	if o == nil || IsNil(o.Car) {
		var ret int32
		return ret
	}
	return *o.Car
}

// GetCarOk returns a tuple with the Car field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountObject) GetCarOk() (*int32, bool) {
	if o == nil || IsNil(o.Car) {
		return nil, false
	}
	return o.Car, true
}

// HasCar returns a boolean if a field has been set.
func (o *CountObject) HasCar() bool {
	if o != nil && !IsNil(o.Car) {
		return true
	}

	return false
}

// SetCar gets a reference to the given int32 and assigns it to the Car field.
func (o *CountObject) SetCar(v int32) {
	o.Car = &v
}

// GetTrue returns the True field value if set, zero value otherwise.
func (o *CountObject) GetTrue() int32 {
	if o == nil || IsNil(o.True) {
		var ret int32
		return ret
	}
	return *o.True
}

// GetTrueOk returns a tuple with the True field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountObject) GetTrueOk() (*int32, bool) {
	if o == nil || IsNil(o.True) {
		return nil, false
	}
	return o.True, true
}

// HasTrue returns a boolean if a field has been set.
func (o *CountObject) HasTrue() bool {
	if o != nil && !IsNil(o.True) {
		return true
	}

	return false
}

// SetTrue gets a reference to the given int32 and assigns it to the True field.
func (o *CountObject) SetTrue(v int32) {
	o.True = &v
}

// GetFalse returns the False field value if set, zero value otherwise.
func (o *CountObject) GetFalse() int32 {
	if o == nil || IsNil(o.False) {
		var ret int32
		return ret
	}
	return *o.False
}

// GetFalseOk returns a tuple with the False field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountObject) GetFalseOk() (*int32, bool) {
	if o == nil || IsNil(o.False) {
		return nil, false
	}
	return o.False, true
}

// HasFalse returns a boolean if a field has been set.
func (o *CountObject) HasFalse() bool {
	if o != nil && !IsNil(o.False) {
		return true
	}

	return false
}

// SetFalse gets a reference to the given int32 and assigns it to the False field.
func (o *CountObject) SetFalse(v int32) {
	o.False = &v
}

// GetPark returns the Park field value if set, zero value otherwise.
func (o *CountObject) GetPark() int32 {
	if o == nil || IsNil(o.Park) {
		var ret int32
		return ret
	}
	return *o.Park
}

// GetParkOk returns a tuple with the Park field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountObject) GetParkOk() (*int32, bool) {
	if o == nil || IsNil(o.Park) {
		return nil, false
	}
	return o.Park, true
}

// HasPark returns a boolean if a field has been set.
func (o *CountObject) HasPark() bool {
	if o != nil && !IsNil(o.Park) {
		return true
	}

	return false
}

// SetPark gets a reference to the given int32 and assigns it to the Park field.
func (o *CountObject) SetPark(v int32) {
	o.Park = &v
}

// GetRun returns the Run field value if set, zero value otherwise.
func (o *CountObject) GetRun() int32 {
	if o == nil || IsNil(o.Run) {
		var ret int32
		return ret
	}
	return *o.Run
}

// GetRunOk returns a tuple with the Run field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountObject) GetRunOk() (*int32, bool) {
	if o == nil || IsNil(o.Run) {
		return nil, false
	}
	return o.Run, true
}

// HasRun returns a boolean if a field has been set.
func (o *CountObject) HasRun() bool {
	if o != nil && !IsNil(o.Run) {
		return true
	}

	return false
}

// SetRun gets a reference to the given int32 and assigns it to the Run field.
func (o *CountObject) SetRun(v int32) {
	o.Run = &v
}

// GetG returns the G field value if set, zero value otherwise.
func (o *CountObject) GetG() int32 {
	if o == nil || IsNil(o.G) {
		var ret int32
		return ret
	}
	return *o.G
}

// GetGOk returns a tuple with the G field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountObject) GetGOk() (*int32, bool) {
	if o == nil || IsNil(o.G) {
		return nil, false
	}
	return o.G, true
}

// HasG returns a boolean if a field has been set.
func (o *CountObject) HasG() bool {
	if o != nil && !IsNil(o.G) {
		return true
	}

	return false
}

// SetG gets a reference to the given int32 and assigns it to the G field.
func (o *CountObject) SetG(v int32) {
	o.G = &v
}

// GetO returns the O field value if set, zero value otherwise.
func (o *CountObject) GetO() int32 {
	if o == nil || IsNil(o.O) {
		var ret int32
		return ret
	}
	return *o.O
}

// GetOOk returns a tuple with the O field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountObject) GetOOk() (*int32, bool) {
	if o == nil || IsNil(o.O) {
		return nil, false
	}
	return o.O, true
}

// HasO returns a boolean if a field has been set.
func (o *CountObject) HasO() bool {
	if o != nil && !IsNil(o.O) {
		return true
	}

	return false
}

// SetO gets a reference to the given int32 and assigns it to the O field.
func (o *CountObject) SetO(v int32) {
	o.O = &v
}

// GetR returns the R field value if set, zero value otherwise.
func (o *CountObject) GetR() int32 {
	if o == nil || IsNil(o.R) {
		var ret int32
		return ret
	}
	return *o.R
}

// GetROk returns a tuple with the R field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountObject) GetROk() (*int32, bool) {
	if o == nil || IsNil(o.R) {
		return nil, false
	}
	return o.R, true
}

// HasR returns a boolean if a field has been set.
func (o *CountObject) HasR() bool {
	if o != nil && !IsNil(o.R) {
		return true
	}

	return false
}

// SetR gets a reference to the given int32 and assigns it to the R field.
func (o *CountObject) SetR(v int32) {
	o.R = &v
}

// GetB returns the B field value if set, zero value otherwise.
func (o *CountObject) GetB() int32 {
	if o == nil || IsNil(o.B) {
		var ret int32
		return ret
	}
	return *o.B
}

// GetBOk returns a tuple with the B field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountObject) GetBOk() (*int32, bool) {
	if o == nil || IsNil(o.B) {
		return nil, false
	}
	return o.B, true
}

// HasB returns a boolean if a field has been set.
func (o *CountObject) HasB() bool {
	if o != nil && !IsNil(o.B) {
		return true
	}

	return false
}

// SetB gets a reference to the given int32 and assigns it to the B field.
func (o *CountObject) SetB(v int32) {
	o.B = &v
}

func (o CountObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Car) {
		toSerialize["car"] = o.Car
	}
	if !IsNil(o.True) {
		toSerialize["true"] = o.True
	}
	if !IsNil(o.False) {
		toSerialize["false"] = o.False
	}
	if !IsNil(o.Park) {
		toSerialize["park"] = o.Park
	}
	if !IsNil(o.Run) {
		toSerialize["run"] = o.Run
	}
	if !IsNil(o.G) {
		toSerialize["g"] = o.G
	}
	if !IsNil(o.O) {
		toSerialize["o"] = o.O
	}
	if !IsNil(o.R) {
		toSerialize["r"] = o.R
	}
	if !IsNil(o.B) {
		toSerialize["b"] = o.B
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CountObject) UnmarshalJSON(data []byte) (err error) {
	varCountObject := _CountObject{}

	err = json.Unmarshal(data, &varCountObject)

	if err != nil {
		return err
	}

	*o = CountObject(varCountObject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "car")
		delete(additionalProperties, "true")
		delete(additionalProperties, "false")
		delete(additionalProperties, "park")
		delete(additionalProperties, "run")
		delete(additionalProperties, "g")
		delete(additionalProperties, "o")
		delete(additionalProperties, "r")
		delete(additionalProperties, "b")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCountObject struct {
	value *CountObject
	isSet bool
}

func (v NullableCountObject) Get() *CountObject {
	return v.value
}

func (v *NullableCountObject) Set(val *CountObject) {
	v.value = val
	v.isSet = true
}

func (v NullableCountObject) IsSet() bool {
	return v.isSet
}

func (v *NullableCountObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountObject(val *CountObject) *NullableCountObject {
	return &NullableCountObject{value: val, isSet: true}
}

func (v NullableCountObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


