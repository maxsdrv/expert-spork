/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provider_client

import (
	"encoding/json"
	"fmt"
)

// JammerMode the model 'JammerMode'
type JammerMode string

// List of jammer_mode
const (
	JAMMERMODE_AUTO JammerMode = "AUTO"
	JAMMERMODE_MANUAL JammerMode = "MANUAL"
	JAMMERMODE_UNKNOWN_DEFAULT_OPEN_API JammerMode = "11184809"
)

// All allowed values of JammerMode enum
var AllowedJammerModeEnumValues = []JammerMode{
	"AUTO",
	"MANUAL",
	"11184809",
}

func (v *JammerMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JammerMode(value)
	for _, existing := range AllowedJammerModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JammerMode", value)
}

// NewJammerModeFromValue returns a pointer to a valid JammerMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJammerModeFromValue(v string) (*JammerMode, error) {
	ev := JammerMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JammerMode: valid values are %v", v, AllowedJammerModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JammerMode) IsValid() bool {
	for _, existing := range AllowedJammerModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to jammer_mode value
func (v JammerMode) Ptr() *JammerMode {
	return &v
}

type NullableJammerMode struct {
	value *JammerMode
	isSet bool
}

func (v NullableJammerMode) Get() *JammerMode {
	return v.value
}

func (v *NullableJammerMode) Set(val *JammerMode) {
	v.value = val
	v.isSet = true
}

func (v NullableJammerMode) IsSet() bool {
	return v.isSet
}

func (v *NullableJammerMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJammerMode(val *JammerMode) *NullableJammerMode {
	return &NullableJammerMode{value: val, isSet: true}
}

func (v NullableJammerMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJammerMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

