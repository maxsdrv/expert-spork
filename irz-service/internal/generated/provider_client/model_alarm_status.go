/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provider_client

import (
	"encoding/json"
	"fmt"
)

// checks if the AlarmStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlarmStatus{}

// AlarmStatus struct for AlarmStatus
type AlarmStatus struct {
	Level string `json:"level"`
	Score *float64 `json:"score,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AlarmStatus AlarmStatus

// NewAlarmStatus instantiates a new AlarmStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlarmStatus(level string) *AlarmStatus {
	this := AlarmStatus{}
	this.Level = level
	return &this
}

// NewAlarmStatusWithDefaults instantiates a new AlarmStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlarmStatusWithDefaults() *AlarmStatus {
	this := AlarmStatus{}
	return &this
}

// GetLevel returns the Level field value
func (o *AlarmStatus) GetLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *AlarmStatus) GetLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *AlarmStatus) SetLevel(v string) {
	o.Level = v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *AlarmStatus) GetScore() float64 {
	if o == nil || IsNil(o.Score) {
		var ret float64
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlarmStatus) GetScoreOk() (*float64, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *AlarmStatus) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given float64 and assigns it to the Score field.
func (o *AlarmStatus) SetScore(v float64) {
	o.Score = &v
}

func (o AlarmStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlarmStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["level"] = o.Level
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AlarmStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"level",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAlarmStatus := _AlarmStatus{}

	err = json.Unmarshal(data, &varAlarmStatus)

	if err != nil {
		return err
	}

	*o = AlarmStatus(varAlarmStatus)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "level")
		delete(additionalProperties, "score")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlarmStatus struct {
	value *AlarmStatus
	isSet bool
}

func (v NullableAlarmStatus) Get() *AlarmStatus {
	return v.value
}

func (v *NullableAlarmStatus) Set(val *AlarmStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAlarmStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAlarmStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlarmStatus(val *AlarmStatus) *NullableAlarmStatus {
	return &NullableAlarmStatus{value: val, isSet: true}
}

func (v NullableAlarmStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlarmStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


