/*
DDS Provider REST API

REST API of `dds-target-provider`.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package provider_client

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the JammerTimeoutStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JammerTimeoutStatus{}

// JammerTimeoutStatus The field is absent when the timer is stopped
type JammerTimeoutStatus struct {
	// date and time in ISO 8601 format with milliseconds
	Started time.Time `json:"started"`
	// date and time in ISO 8601 format with milliseconds
	Now time.Time `json:"now"`
	Duration int32 `json:"duration"`
	AdditionalProperties map[string]interface{}
}

type _JammerTimeoutStatus JammerTimeoutStatus

// NewJammerTimeoutStatus instantiates a new JammerTimeoutStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJammerTimeoutStatus(started time.Time, now time.Time, duration int32) *JammerTimeoutStatus {
	this := JammerTimeoutStatus{}
	this.Started = started
	this.Now = now
	this.Duration = duration
	return &this
}

// NewJammerTimeoutStatusWithDefaults instantiates a new JammerTimeoutStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJammerTimeoutStatusWithDefaults() *JammerTimeoutStatus {
	this := JammerTimeoutStatus{}
	return &this
}

// GetStarted returns the Started field value
func (o *JammerTimeoutStatus) GetStarted() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Started
}

// GetStartedOk returns a tuple with the Started field value
// and a boolean to check if the value has been set.
func (o *JammerTimeoutStatus) GetStartedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Started, true
}

// SetStarted sets field value
func (o *JammerTimeoutStatus) SetStarted(v time.Time) {
	o.Started = v
}

// GetNow returns the Now field value
func (o *JammerTimeoutStatus) GetNow() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Now
}

// GetNowOk returns a tuple with the Now field value
// and a boolean to check if the value has been set.
func (o *JammerTimeoutStatus) GetNowOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Now, true
}

// SetNow sets field value
func (o *JammerTimeoutStatus) SetNow(v time.Time) {
	o.Now = v
}

// GetDuration returns the Duration field value
func (o *JammerTimeoutStatus) GetDuration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *JammerTimeoutStatus) GetDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *JammerTimeoutStatus) SetDuration(v int32) {
	o.Duration = v
}

func (o JammerTimeoutStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JammerTimeoutStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["started"] = o.Started
	toSerialize["now"] = o.Now
	toSerialize["duration"] = o.Duration

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JammerTimeoutStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"started",
		"now",
		"duration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJammerTimeoutStatus := _JammerTimeoutStatus{}

	err = json.Unmarshal(data, &varJammerTimeoutStatus)

	if err != nil {
		return err
	}

	*o = JammerTimeoutStatus(varJammerTimeoutStatus)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "started")
		delete(additionalProperties, "now")
		delete(additionalProperties, "duration")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJammerTimeoutStatus struct {
	value *JammerTimeoutStatus
	isSet bool
}

func (v NullableJammerTimeoutStatus) Get() *JammerTimeoutStatus {
	return v.value
}

func (v *NullableJammerTimeoutStatus) Set(val *JammerTimeoutStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableJammerTimeoutStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableJammerTimeoutStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJammerTimeoutStatus(val *JammerTimeoutStatus) *NullableJammerTimeoutStatus {
	return &NullableJammerTimeoutStatus{value: val, isSet: true}
}

func (v NullableJammerTimeoutStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJammerTimeoutStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


